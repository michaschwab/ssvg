{"version":3,"sources":["webpack://SSVG/webpack/universalModuleDefinition","webpack://SSVG/webpack/bootstrap","webpack://SSVG/./canvasworker/drawingUtils.ts","webpack://SSVG/./util/vdom/set-property-queue.ts","webpack://SSVG/./frontend/exporter.ts","webpack://SSVG/./frontend/ssvg.ts","webpack://SSVG/./frontend/domhandler.ts","webpack://SSVG/./util/vdom/vdom-manager.ts","webpack://SSVG/./canvasworker/canvasrenderer.ts","webpack://SSVG/./canvasworker/index.ts","webpack://SSVG/./canvasworker/canvasworker.ts","webpack://SSVG/./node_modules/worker-loader/dist/workers/InlineWorker.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","DrawingUtils","transform","transformObject","translateX","translateY","scaleX","scaleY","rotate","translateBeforeScale","transformString","replace","translate","exec","parseFloat","scale","substr","matrix","transformA","transformB","size","fallback","defaultValue","undefined","Math","round","parseInt","match","console","warn","color","opacity","defaultColor","CssNamedColorToHex","test","substring","length","join","Error","g","b","rgb","hslToRgb","h","hue2rgb","q","selector","specificity","parts","concat","apply","split","map","part","start","countClasses","min","SetPropertyQueue","data","useSharedArrayFor","attrName","useBuffer","this","indexOf","shared","buffer","SharedArrayBuffer","Int32Array","BYTES_PER_ELEMENT","values","raw","forEach","index","BUFFER_PRECISION_FACTOR","element","error","storage","e","log","node","SSVG","options","unassignedNodes","interactionSelections","svgAssignedAndSizeSet","lastTenCanvasDrawTimes","enterExitQueue","safeMode","useWorker","getFps","maxPixelRatio","canvas","document","createElement","worker","onmessage","msg","logDrawn","updateCanvas","raf","updateFps","requestAnimationFrame","captureD3On","svg","setupElementsIfSvgExists","addEventListener","propagateMouseEvent","propagateTouchEvent","lastHovered","hoveredElement","dispatchEvent","MouseEvent","duplicateTouchEvent","propagateWheelEvent","replaceNativeRemoveChild","replaceNativeAttribute","replaceNativePathFunctions","replaceNativeCreateElement","replaceNativeAppendChild","replaceD3Attr","replaceNativeSelect","replaceNativeGetComputedStyle","replaceD3Select","replaceD3Remove","setTimeout","vdom","svgEl","getElementsByTagName","urlConnector","location","href","svgSwitchUrl","svgSwitchComment","createComment","parent","parentElement","nextSibling","next","insertBefore","appendChild","domHandler","getVDom","setCanvasSize","useAttrQueue","queue","keys","operation","cmd","keepChildren","children","addNode","parentNodeIndex","removeNode","childIndex","parentNodeSelector","sendUpdateToWorker","renderer","updatePropertiesFromQueue","draw","width","height","devicePixelRatio","style","offscreen","transferControlToOffscreen","sendToWorker","visData","ensureNodesMapped","isWithinSvg","parentEl","parentNode","d3","originalOn","selection","on","me","el","_parents","push","arguments","getReplacement","original","_groups","getVisNode","childElements","getVisNodesFromSelector","getElementFromNode","returnValue","childNode","childEl","selectAll","select","origFilter","filter","selectorString","elements","firstElement","getNodeFromElement","nodes","selectors","sel","trim","filteredNodes","matchingNodes","filterNodesBySelector","filteredElements","origGetComputedStyle","getComputedStyle","getPropertyValue","propertyName","origQuerySelector","Element","querySelector","childNodes","globalElementIndex","originalFct","prefix","els","returnVal","getAttributeFromSelector","getElementSelector","getVisNodeFromSelector","child","queueSetAttributeOnElement","queueSetAttributeOnSelection","origSelectionAttr","attr","origSelectionStyle","originalClassed","classed","className","enableFrontendDesignProperties","indexOfParent","parentSelector","getParentNodeFromSelector","prevClassNames","evaluatedValue","__data__","newClassNames","originalTransition","transition","originalText","text","newRemove","getNewRemoveChild","d3Remove","updateChildSelectors","remove","origCreate","createElementNS","newArgs","Array","from","getNewAppendChild","childElement","oldSelector","combineElementSelectors","type","updateNodeSelector","origRemoveChild","skipUpdateSelectors","writable","removeNodeFromParent","removeChild","origAppend","appended","el2","getNodeDataFromEl","setProperty","styleProp","linkNodeToElement","addNodeToParent","splice","origAppendChild","newAppend","newChild","refChild","origGetTotalLength","SVGPathElement","getTotalLength","getAttribute","origSetAttribute","origSetAttr","setAttribute","origSetAttrNS","setAttributeNS","origGetAttr","evt","propagateEvent","createEvent","initEvent","prop","touches","touch","identifier","pageX","pageY","clientX","clientY","WheelEvent","new_event","triggeredElement","interactionSel","j","vdomNode","x","y","getMousePosition","nodeAtPosition","svgChildEl","event","pos","visNode","cx","cy","parseTransform","sqrt","pow","elX","elY","centerX","centerY","distanceX","abs","distanceY","getTotalTransformation","matchAny","Date","now","shift","timeForTenDrawsMs","fps","enterExit","update","postMessage","ignoreDesign","setAttrQueue","nodesToElements","nodesToRestyle","VdomManager","display","addChildNodesToVisData","safeLog","ensureInitialized","set","fetch","origin","then","resp","blob","createImageBitmap","bitmap","styleName","useSharedArray","self","ensureElementIndex","cb","applyStyles","getData","clearData","getRoundedAttr","val","tagName","toLowerCase","id","fill","x1","x2","y1","y2","stroke","textContent","styleSpecificity","kebabCase","obj","propNames","getOwnPropertyNames","propName","clean","styleSheets","sheet","rules","cssRules","rule","selectorText","applyRuleToMatchingNodes","newSelector","selectorPartsLooseStrict","parentsOfInterest","nodeToBeStyled","getNodeParent","getCssRuleSpecificityNumber","setStyle","longName","longSpecName","setValue","checkNode","currentNode","looseIndex","strictIndex","selPart","isCssRulePartialMatch","getNodeSelector","removedClass","removeRuleStylesFromNode","colorToRgba","childEls","localName","elementType","elementIndex","getParentNode","parents","pop","totalTransform","addTransforms","safeLogCount","logContents","indexToNodeMap","cachedListSelections","addToMap","nodeData","getNodeFromIndex","applyParentStyles","JSON","stringify","styleValue","applyStyleToNodeAndChildren","attrNameStart","ATTRIBUTES_NOT_IGNORED_WITH_IGNOREDESIGN","factor","specificityAttrName","matchingSpecificity","updateDeducedStyles","ROUNDED_ATTRS","strokeOpacity","lastSplitPos","lastIndexOf","selectorWithoutLast","lastPart","parentSel","nthChildPosition","selectedNodes","findMatchingChildren","addDirectChildrenIfMatch","matchIndex","selectedNodeSelectors","selParts","findChildrenOfType","matching","cssRuleSelectorPart","newSelPart","searchClassNames","allTrue","searchClassName","indexPart","targetIndex","cutoff","typeName","forceSingle","onDrawn","lastFullSecond","countSinceLastFullSecond","circlesByColor","rectsByColor","drawTexts","drawImages","linesByColor","ctx","getContext","save","restore","clearRect","drawLine","drawCircle","drawRect","drawText","drawImage","drawNodeAndChildren","fullSecond","performance","elData","applyTransform","drawSingleNode","drawFct","toUpperCase","fillOpacity","handle","getStrokeStyle","beginPath","fillStyle","strokeStyle","lineWidth","getStrokeWidth","arc","PI","fillAndStrokeColor","fillColor","strokeColor","sampleData","moveTo","fillOpacityStyle","fillRect","rect","drawSingle","fontSize","convertSizeToPx","font","align","textAlign","dx","dy","fillText","image","getFillStyle","strokeWidth","Path2D","lineJoin","textAnchor","lineTo","CanvasWorkerImporter","URL","webkitURL","content","url","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","append","getBlob","Blob","Worker","createObjectURL","encodeURIComponent"],"mappings":"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","file":"ssvg.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SSVG\"] = factory();\n\telse\n\t\troot[\"SSVG\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","export type Transformation = {\n    translateX: number,\n    translateY: number,\n    scaleX: number,\n    scaleY: number,\n    rotate: number,\n    translateBeforeScale: boolean\n}\n\nexport default class DrawingUtils {\n    static parseTransform(transform: string|{}): Transformation {\n        const transformObject = {translateX: 0, translateY: 0, scaleX: 1, scaleY: 1, rotate: 0, translateBeforeScale: false};\n        \n        if (transform) {\n            if(typeof transform !== \"string\") {\n                transformObject.scaleX = transform['k'];\n                transformObject.scaleY = transform['k'];\n                transformObject.translateX = transform['x'];\n                transformObject.translateY = transform['y'];\n                return transformObject;\n            }\n            let transformString = <string> transform;\n            transformString = transformString.replace(/ /g, '');\n            \n            //let translate  = /translate\\((\\d+),(\\d+)\\)/.exec(transform);\n            const translate = /\\s*translate\\(([-0-9.]+),([-0-9.]+)\\)/.exec(transformString);\n            if (translate) {\n                transformObject.translateX = parseFloat(translate[1]);\n                transformObject.translateY = parseFloat(translate[2]);\n            }\n            else {\n                //console.error('no translate found', transform);\n            }\n            \n            const scale = /\\s*scale\\(([-0-9.]+)(,[-0-9.]+)?\\)/.exec(transformString);\n            if (scale) {\n                transformObject.scaleX = parseFloat(scale[1]);\n                transformObject.scaleY = scale[2] ? parseFloat(scale[2].substr(1)) : parseFloat(scale[1]);\n            }\n            else {\n                //console.error('no scale found', transform);\n            }\n            \n            const rotate = /\\s*rotate\\(([-0-9.]+)\\)/.exec(transformString);\n            if (rotate) {\n                transformObject.rotate = parseFloat(rotate[1]);\n            }\n            else {\n                //console.error('no rotate found', transform);\n            }\n            \n            const translateScale = /\\s*translate\\(([-0-9.]+),([-0-9.]+)\\)scale\\(([-0-9.,]+)\\)/.exec(transformString);\n            if (translateScale) {\n                transformObject.translateBeforeScale = true;\n            }\n            \n            const matrix = /\\s*matrix\\(([-0-9.]+),([-0-9.]+),([-0-9.]+),([-0-9.]+),([-0-9.]+),([-0-9.]+)\\)/.exec(transformString);\n            if(matrix) {\n                transformObject.scaleX = parseFloat(matrix[1]);\n                // 2 is horizontal skewing\n                // 3 is vertical skewing\n                transformObject.scaleY = parseFloat(matrix[4]);\n                transformObject.translateX = parseFloat(matrix[5]);\n                transformObject.translateY = parseFloat(matrix[6]);\n            }\n        }\n        \n        return transformObject;\n    }\n\n    static addTransforms(transformA: Transformation, transformB: Transformation): Transformation {\n        return {\n            translateX: transformA.translateX + transformB.translateX,\n            translateY: transformA.translateY + transformB.translateY,\n            scaleX: transformA.scaleX * transformB.scaleX,\n            scaleY: transformA.scaleY * transformB.scaleY,\n            rotate: transformA.rotate + transformB.rotate,\n            translateBeforeScale: false\n        };\n        //TODO: consider translateBeforeScale\n    }\n\n    static convertSizeToPx(size: string|number, fallback = true): number|undefined {\n        const defaultValue = fallback ? 14 : undefined;\n        if(size === undefined) {\n            return defaultValue;\n        }\n        if(typeof size === \"number\") {\n            return size;\n        }\n        if(size.substr(-2) === 'em') {\n            return Math.round(parseFloat(size) * 12);\n        }\n        if(size.substr(-2) === 'px') {\n            return parseInt(size);\n        }\n        if(size.match(/^[0-9]+$/)) {\n            return parseInt(size);\n        }\n        console.warn('size in unsupported format: ', size);\n        return defaultValue;\n    }\n    \n    static colorToRgba(color: string|{r: number, g: number, b: number}|{h: number, s: number, l: number},\n                       opacity: string|number = 1,\n                       defaultColor ='none'): string {\n        if(color === 'none') {\n            return color;\n        }\n        if(!color) {\n            return defaultColor;\n        }\n        color = DrawingUtils.CssNamedColorToHex(color);\n        if(opacity === 1 && typeof color === 'string') {\n            return color;\n        }\n        if(typeof color === 'string' && color[0] === '#') {\n            let c; // From https://stackoverflow.com/questions/21646738/convert-hex-to-rgba\n            if(/^#([A-Fa-f0-9]{3}){1,2}$/.test(color)){\n                c = color.substring(1);\n                if(c.length == 3){\n                    c = c[0] + c[0] + c[1] + c[1] + c[2] + c[2];\n                }\n                c = '0x' + c;\n                return 'rgba('+[(c>>16)&255, (c>>8)&255, c&255].join(',')+',' + opacity + ')';\n            }\n            throw new Error('Bad Hex');\n        } else if(typeof color === 'object') {\n            if('r' in color) {\n                return 'rgba(' + color.r + ',' + color.g + ',' + color.b + ',' + opacity + ')';\n            }\n            if('h' in color) {\n                const rgb = DrawingUtils.hslToRgb(color.h / 360, color.s, color.l);\n                return 'rgba(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ',' + opacity + ')';\n            }\n        } else if(color.substr(0, 4) === 'rgb(') {\n            return color.substr(0, color.length - 1).replace('rgb','rgba') +\n                ', ' + opacity + ')';\n        }\n        return color;\n    }\n\n    // From https://stackoverflow.com/questions/2353211/hsl-to-rgb-color-conversion\n    static hslToRgb(h, s, l) {\n        var r, g, b;\n\n        if(s == 0){\n            r = g = b = l; // achromatic\n        } else {\n            var hue2rgb = function hue2rgb(p, q, t){\n                if(t < 0) t += 1;\n                if(t > 1) t -= 1;\n                if(t < 1/6) return p + (q - p) * 6 * t;\n                if(t < 1/2) return q;\n                if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;\n                return p;\n            };\n\n            var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n            var p = 2 * l - q;\n            r = hue2rgb(p, q, h + 1/3);\n            g = hue2rgb(p, q, h);\n            b = hue2rgb(p, q, h - 1/3);\n        }\n\n        return {r: Math.round(r * 255), g: Math.round(g * 255), b: Math.round(b * 255)};\n    }\n\n    static CssNamedColorToHex(color: any) { // TODO put a somewhat complete list here..\n        if(color === 'red') {\n            return '#ff0000';\n        }\n        if(color === 'steelblue') {\n            return '#4682b4';\n        }\n        if(color === 'black') {\n            return '#000000';\n        }\n        //TODO add more colors.\n        return color;\n    }\n\n    /**\n     * Basic implementation to get a sense of specificity. Numbers are completely made up.\n     * Should eventually be more sophisticated, e.g. using https://github.com/keeganstreet/specificity.\n     * @param selector CSS rule as string.\n     */\n    static getCssRuleSpecificityNumber(selector: string) {\n        let specificity = 0;\n\n        selector = selector\n            .replace(/ >/g, '>')\n            .replace(/> /g, '>');\n\n        const parts = [].concat.apply([], selector.split(' ')\n            .map(part => part.split('>')));\n\n        // Rough logic: the more stuff, the more specific. IDs and classes are more specific than other things.\n        for(const part of parts) {\n            specificity += 100;\n            const start = part[0];\n\n            if(start === '#') {\n                specificity += 1000;\n            } else if(start === '.') {\n                // More classes are more specific, but never more specific than an ID.\n                const countClasses = part.split('.').length - 1;\n                specificity += Math.min(900, countClasses * 100);\n            }\n        }\n\n        return specificity;\n    }\n}","import SetPropertyQueueData from \"./set-property-queue-data\";\nimport {VdomNode} from \"./vdom\";\n\nclass CompleteSetPropertyQueueData {\n    'raw': SetPropertyQueueData;\n    'shared': {\n        [attrName: string]: Int32Array\n    };\n}\n\nexport default class SetPropertyQueue {\n    private data: CompleteSetPropertyQueueData = {'raw': {}, 'shared': {}};\n    private useSharedArrayFor = ['cx', 'cy', 'x1', 'x2', 'y1', 'y2', 'x', 'y'];\n    static BUFFER_PRECISION_FACTOR = 10;\n\n    ensureInitialized(attrName: string, useBuffer: boolean) {\n        if(attrName === 'class') {\n            attrName = 'className';\n        }\n\n        if(!useBuffer || this.useSharedArrayFor.indexOf(attrName) === -1) {\n            if(!this.data.raw[attrName]) {\n                this.data.raw[attrName] = [];\n            }\n        } else {\n            if(!this.data.shared[attrName]) {\n                const length = 10000; //Todo use number of elements in vdom\n                const buffer = new SharedArrayBuffer(Int32Array.BYTES_PER_ELEMENT * length);\n                const values = new Int32Array(buffer);\n\n                // If values have been previously set without a buffer, transfer them.\n                if(this.data.raw[attrName] &&\n                    !(this.data.raw[attrName] instanceof SharedArrayBuffer)) {\n                    const prevData: string[] = <any> this.data.raw[attrName];\n\n                    prevData.forEach((value, index) => {\n                        values[index] = parseFloat(value) * SetPropertyQueue.BUFFER_PRECISION_FACTOR;\n                    });\n                }\n\n                this.data.raw[attrName] = buffer;\n                this.data.shared[attrName] = values;\n            }\n        }\n    }\n\n    set(element: VdomNode|HTMLElement, attrName: string, value: any, useBuffer: boolean) {\n        if(attrName === 'class') {\n            attrName = 'className';\n        }\n        if(element['globalElementIndex'] === undefined) {\n            console.error('No index', element);\n            throw new Error('Element has no index');\n        }\n        const index = element['globalElementIndex'];\n        const storage = useBuffer && this.useSharedArrayFor.indexOf(attrName) !== -1 ? 'shared' : 'raw';\n        try {\n            if(storage === 'shared') {\n                value *= SetPropertyQueue.BUFFER_PRECISION_FACTOR;\n            }\n            this.data[storage][attrName][index] = value;\n        }\n        catch(e) {\n            console.log(e);\n            console.log(this.data, storage, attrName, element, index);\n        }\n    }\n\n    get(node: VdomNode, attrName: string) {\n        const index = node['globalElementIndex'];\n        return this.data.raw[attrName][index];\n    }\n\n    getData() {\n        return this.data.raw;\n    }\n\n    clearData() {\n        this.data = {'raw': {}, 'shared': {}};\n    }\n}","import SSVG from \"./ssvg\";\n\nexport = SSVG;","import {VdomManager} from \"../util/vdom/vdom-manager\";\nimport {VdomNode} from \"../util/vdom/vdom\";\nimport {CanvasWorkerMessage, CanvasUpdateWorkerMessage, CanvasUpdateData} from \"../util/canvas-worker-message\"\nimport Domhandler from \"./domhandler\";\nimport CanvasWorker from \"../canvasworker/canvasworker\";\nimport Canvasrenderer from \"../canvasworker/canvasrenderer\";\nimport DrawingUtils from \"../canvasworker/drawingUtils\";\nimport CanvasWorkerImporter from '../canvasworker';\n\nexport default class SSVG {\n    private unassignedNodes: Node[] = [];\n    private worker: Worker;\n    private domHandler: Domhandler;\n    private vdom: VdomManager;\n    private interactionSelections: HTMLElement[] = [];\n    \n    private renderer: CanvasWorker;\n\n    private svg: SVGElement|undefined;\n    private readonly canvas: HTMLCanvasElement;\n    private svgAssignedAndSizeSet = false;\n    \n    private lastTenCanvasDrawTimes: number[] = [];\n    \n    private enterExitQueue: CanvasUpdateData[] = [];\n\n    private readonly safeMode: boolean = false;\n    private readonly maxPixelRatio: number|undefined;\n    private readonly useWorker: boolean = true;\n    private readonly getFps: (fps: number) => void = () => {};\n\n    private hoveredElement: Element|undefined;\n\n    constructor(options?: {\n        safeMode?: boolean,\n        maxPixelRatio?: number,\n        useWorker?: boolean,\n        getFps?: (fps: number) => void,\n        svg?: SVGElement,\n    }) {\n        if(options) {\n            if(options.safeMode !== undefined) {\n                this.safeMode = options.safeMode;\n            }\n            this.maxPixelRatio = options.maxPixelRatio;\n            if(options.useWorker !== undefined) {\n                this.useWorker = options.useWorker;\n            }\n            if(options.getFps !== undefined) {\n                this.getFps = options.getFps;\n            }\n        }\n\n        this.canvas = document.createElement('canvas');\n        if(!('OffscreenCanvas' in window)) {\n            this.useWorker = false;\n        }\n        \n        if(this.useWorker) {\n            this.worker = new CanvasWorkerImporter();\n    \n            this.worker.onmessage = e => {\n                if(e.data && e.data.msg && e.data.msg === 'DRAWN') {\n                    this.logDrawn();\n                    this.updateCanvas();\n                }\n            };\n            const raf = () => {\n                this.updateFps();\n                requestAnimationFrame(raf);\n            };\n            raf();\n        } else {\n            const raf = () => {\n                this.updateFps();\n                this.logDrawn();\n                this.updateCanvas();\n                requestAnimationFrame(raf);\n            };\n            raf();\n        }\n\n        this.captureD3On();\n        const svg = options && options.svg ? options.svg : undefined;\n        this.setupElementsIfSvgExists(svg);\n        \n        this.canvas.addEventListener('mousedown', e => this.propagateMouseEvent(e));\n        this.canvas.addEventListener('touchstart', e => this.propagateTouchEvent(e));\n        this.canvas.addEventListener('mousemove', e => {\n            const lastHovered = this.hoveredElement;\n            this.hoveredElement = this.propagateMouseEvent(e);\n            if(lastHovered !== this.hoveredElement) {\n                if(lastHovered) {\n                    lastHovered.dispatchEvent(new MouseEvent('mouseout', e));\n                }\n            }\n            this.propagateMouseEvent(e, 'mouseover');\n        });\n        this.canvas.addEventListener('touchmove', e => {\n            const lastHovered = this.hoveredElement;\n            this.hoveredElement = this.propagateTouchEvent(e);\n            if(lastHovered !== this.hoveredElement) {\n                if(lastHovered) {\n                    lastHovered.dispatchEvent(this.duplicateTouchEvent(e, 'mouseout'));\n                }\n            }\n            this.propagateTouchEvent(e, 'mouseover');\n        });\n        this.canvas.addEventListener('mouseup', e => this.propagateMouseEvent(e));\n        this.canvas.addEventListener('touchend', e => this.propagateTouchEvent(e));\n        this.canvas.addEventListener('click', e => this.propagateMouseEvent(e));\n        this.canvas.addEventListener('wheel', e => this.propagateWheelEvent(e));\n\n        this.replaceNativeRemoveChild();\n        this.replaceNativeAttribute();\n        this.replaceNativePathFunctions();\n        this.replaceNativeCreateElement();\n        this.replaceNativeAppendChild();\n        this.replaceD3Attr();\n        this.replaceNativeSelect();\n        this.replaceNativeGetComputedStyle();\n        this.replaceD3Select();\n        this.replaceD3Remove();\n\n        setTimeout(() => {\n            console.log(this.vdom.data);\n        }, 1000);\n    }\n    \n    private setupElementsIfSvgExists(svgEl?: SVGElement) {\n        \n        if(this.svg) {\n            return true;\n        }\n\n        const svg = !svgEl ? document.getElementsByTagName('svg')[0] : svgEl;\n        \n        if(!svg) {\n            return false;\n        }\n\n        const urlConnector = document.location.href.indexOf('?') === -1 ? '?' : '&';\n        const svgSwitchUrl = document.location.href + urlConnector + 'svg';\n        const svgSwitchComment = document.createComment(' This project uses SSVG.io to render a SVG as Canvas.\\r\\n' +\n            'To inspect the SVG, please open the following URL:\\r\\n' +\n            svgSwitchUrl + '\\r\\n');\n        \n        this.svg = svg;\n        const parent = this.svg.parentElement;\n\n        if(this.svg.nextSibling) {\n            const next = this.svg.nextSibling;\n            parent.insertBefore(svgSwitchComment, next);\n            parent.insertBefore(this.canvas, next);\n        } else {\n            parent.appendChild(svgSwitchComment);\n            parent.appendChild(this.canvas);\n        }\n\n        this.domHandler = new Domhandler(this.svg, this.useWorker, this.useWorker);\n        this.vdom = this.domHandler.getVDom();\n\n        this.setCanvasSize();\n        \n        return true;\n    }\n    \n    private updateCanvas() {\n        if(!this.svgAssignedAndSizeSet) {\n            return;\n        }\n        if(this.useWorker) {\n            this.domHandler.useAttrQueue(queue => {\n                if(Object.keys(queue).length === 0) {\n                    //requestAnimationFrame(() => this.updateCanvas());\n                    setTimeout(() => this.updateCanvas(), 1);\n                    return;\n                }\n\n                for(let operation of this.enterExitQueue) {\n                    if(operation.cmd === 'ENTER') {\n                        if(!operation.keepChildren) {\n                            operation.node.children = [];\n                        }\n                        this.vdom.addNode(operation.node, operation.parentNodeIndex);\n                    } else if(operation.cmd === 'EXIT') {\n                        this.vdom.removeNode(operation.childIndex, operation.parentNodeSelector);\n                    }\n                }\n                this.sendUpdateToWorker(queue);\n            });\n        } else {\n            this.domHandler.useAttrQueue(queue => {\n                if(this.renderer.updatePropertiesFromQueue) {\n                    this.renderer.updatePropertiesFromQueue(queue);\n                }\n                this.renderer.draw();\n            });\n        }\n    }\n    \n    private setCanvasSize() {\n        if(!this.svg || !this.vdom.data.width || !this.vdom.data.height) {\n            return;\n        }\n        this.vdom.data.scale = window.devicePixelRatio;\n        if(this.maxPixelRatio !== undefined && this.vdom.data.scale > this.maxPixelRatio) {\n            this.vdom.data.scale = this.maxPixelRatio;\n        }\n    \n        this.canvas.style.width = this.vdom.data.width + 'px';\n        this.canvas.style.height = this.vdom.data.height + 'px';\n        this.canvas.width = this.vdom.data.width * this.vdom.data.scale;\n        this.canvas.height = this.vdom.data.height * this.vdom.data.scale;\n        \n        if(this.useWorker) {\n            const offscreen = (this.canvas as any).transferControlToOffscreen();\n            this.sendToWorker({cmd: 'INIT', data: {\n                    canvas: offscreen,\n                    visData: this.vdom.data,\n                    safeMode: this.safeMode\n                }\n            }, [offscreen]);\n            this.vdom.ensureNodesMapped();\n        } else {\n            this.renderer = new Canvasrenderer(this.vdom, this.canvas, this.safeMode, () => {});\n        }\n        \n        this.svgAssignedAndSizeSet = true;\n    }\n\n    private isWithinSvg(element: Element) {\n        let isWithinSvg = false;\n        let parentEl = element;\n\n        while(parentEl && parentEl.parentNode) {\n            if(parentEl === this.svg) {\n                isWithinSvg = true;\n            }\n            parentEl = <Element> parentEl.parentNode;\n        }\n        return isWithinSvg;\n    }\n    \n    private captureD3On() {\n        if((window as any)['d3']) {\n            const d3 = (window as any)['d3'];\n            const originalOn = d3.selection.prototype.on;\n            const me = this;\n\n            d3.selection.prototype.on = function()\n            {\n                let el = this._parents && this._parents.length ? this._parents[0] : this[0].parentNode;\n                if(el === document.children[0]) {\n                    el = me.svg;\n                }\n                let isWithinSvg = me.isWithinSvg(el);\n\n                if(el && isWithinSvg && me.interactionSelections.indexOf(el) === -1)\n                {\n                    me.interactionSelections.push(el); // This one works for native get/setAttribute\n                    //interactionSelections.push(this); // This one works for d3 .attr.\n                }\n        \n                return originalOn.apply(this, arguments);\n            };\n        }\n    }\n    \n    private replaceD3Select() {\n        if((window as any)['d3']) {\n            const me = this;\n            const d3 = (window as any)['d3'];\n\n            const getReplacement = (original) => {\n                return function(selector: string|(()=>{})) {\n                    if(typeof selector === 'string') {\n\n                        let element: HTMLElement|SVGElement;\n                        if(this === d3) {\n                            element = me.svg;\n                        } else {\n                            element = this._groups ? this._groups[0][0] : this[0][0];\n                        }\n\n                        if(!element) {\n                            console.error('no element', this, selector);\n                            return original.apply(this, arguments);\n                        }\n                        const node = me.domHandler.getVisNode(element);\n\n                        if(!node) {\n                            console.warn('node not found', element);\n                            return original.apply(this, arguments);\n                        }\n\n                        const childNodes = me.vdom.getVisNodesFromSelector(node, selector);\n                        const childElements = childNodes.map(node => {\n                            return me.domHandler.getElementFromNode(node);\n                        });\n\n                        const returnValue = original.apply(this, arguments);\n                        const elementsOutsideSvg: NodeList = returnValue._groups ? returnValue._groups[0]\n                            : returnValue[0];\n                        elementsOutsideSvg.forEach(childNode => {\n                            const childEl = <Element> <any> childNode;\n                            if(childElements.indexOf(childEl) === -1) {\n                                childElements.push();\n                            }\n                        });\n\n                        if(returnValue._groups) {\n                            returnValue._groups[0] = childElements;\n                        } else {\n                            // Older d3 versions\n                            const parentNode = returnValue[0].parentNode;\n                            returnValue[0] = childElements;\n                            returnValue[0].parentNode = parentNode;\n                        }\n\n                        return returnValue;\n                    }\n\n                    return original.apply(this, arguments);\n                }\n            };\n\n            d3.selection.prototype.selectAll = getReplacement(d3.selection.prototype.selectAll);\n            d3.selectAll = getReplacement(d3.selectAll);\n            d3.selection.prototype.select = getReplacement(d3.selection.prototype.select);\n            d3.select = getReplacement(d3.select);\n\n            const origFilter = d3.selection.prototype.filter;\n            d3.selection.prototype.filter = function(selectorString: string) {\n                const elements = this._groups ? this._groups[0] : this[0];\n                if(typeof selectorString !== 'string') {\n                    return origFilter.apply(this, arguments);\n                }\n                let firstElement = elements[0];\n                let i = 1;\n                while(!firstElement && i < elements.length) {\n                    i++;\n                    firstElement = elements[i];\n                }\n\n                const parentNode = firstElement ? me.domHandler.getNodeFromElement(firstElement.parentNode) : null;\n                const nodes = elements.map(element => me.domHandler.getNodeFromElement(element));\n\n                const selectors = selectorString.split(',').map(sel => sel.trim());\n                const filteredNodes = [];\n\n                for(const selector of selectors) {\n                    const matchingNodes = me.vdom.filterNodesBySelector(parentNode, nodes, selector);\n\n                    for(const node of matchingNodes) {\n                        if(filteredNodes.indexOf(node) === -1) {\n                            filteredNodes.push(node);\n                        }\n                    }\n                }\n\n                const filteredElements = filteredNodes.map(node => me.domHandler.getElementFromNode(node));\n\n                const returnValue = origFilter.apply(this, arguments);\n\n                if(returnValue._groups) {\n                    returnValue._groups[0] = filteredElements;\n                } else {\n                    // Older d3 versions\n                    const parentNode = returnValue[0].parentNode;\n                    returnValue[0] = filteredElements;\n                    returnValue[0].parentNode = parentNode;\n                }\n                return returnValue;\n            }\n        }\n    }\n\n    private replaceNativeGetComputedStyle() {\n        const origGetComputedStyle = window.getComputedStyle;\n        const me = this;\n\n        window.getComputedStyle = function(element: HTMLElement) {\n            if(element && !me.isWithinSvg(element) && (<Window> <any> element) !== window) {\n                return origGetComputedStyle.call(this, element);\n            }\n\n            const node = me.domHandler.getNodeFromElement(element);\n            if(!node) {\n                console.warn('node not found for ', this, element);\n                return origGetComputedStyle.call(this, element);\n            }\n            return {\n                getPropertyValue(propertyName: string): string {\n                    //console.log(propertyName, node, node.style[propertyName]);\n                    return node.style[propertyName];\n                }\n            } as CSSStyleDeclaration;\n        };\n    }\n\n    private replaceNativeSelect() {\n        const origQuerySelector = Element.prototype.querySelector;\n        const me = this;\n\n        Element.prototype.querySelector = function(selector: string) {\n            if(!me.isWithinSvg(this)) {\n                return origQuerySelector.apply(this, arguments);\n            }\n\n            const node = me.domHandler.getVisNode(this);\n            const childNodes = me.vdom.getVisNodesFromSelector(node, selector);\n            if(childNodes.length === 0) {\n                console.warn('could not find selection', this, node, node.globalElementIndex, selector);\n                return null;\n            }\n            return me.domHandler.getElementFromNode(childNodes[0]);\n        };\n    }\n    \n    private replaceD3Attr() {\n\n        const me = this;\n\n        function getReplacement(originalFct, prefix = '') {\n            return function(name, value) {\n                \n                if(value === undefined) {\n\n                    if(me.unassignedNodes.indexOf(this) !== -1) {\n                        return originalFct.apply(this, arguments);\n                    } else {\n                        // Dealing with d3 v3.\n                        const els = this._groups ? this._groups[0] : this[0];\n                        if(els[0] && !me.isWithinSvg(els[0])) {\n                            return originalFct.apply(this, arguments);\n                        }\n                        if(els.length > 1) {\n                            const returnVal = [];\n                            for(const el of els) {\n                                returnVal.push(me.domHandler.getAttributeFromSelector(el, name))\n                            }\n                            return returnVal;\n                        } else {\n                            return me.domHandler.getAttributeFromSelector(els[0], name);\n                        }\n                    }\n                } else {\n                    if(name === 'class' || !me.svg) {\n                        return originalFct.apply(this, arguments);\n                    }\n                    // For d3 v4, this would just be this.groups[0]. The rest is for\n                    // earlier versions, where selectAll() returned other values.\n                    let elements = this._groups ? this._groups[0] : this[0];\n\n                    if(typeof elements === 'object' && Object.keys(elements).length === 1 && elements.parentNode) {\n                        const parentElement = elements.parentNode;\n                        let parentNode: VdomNode;\n                        if(parentElement !== document.children[0]) {\n                            const selector = me.domHandler.getElementSelector(parentElement);\n                            if(selector === null) {\n                                console.error('selector not found', parentElement, elements);\n                                throw Error('selector not found');\n                            }\n                            parentNode = me.vdom.getVisNodeFromSelector(selector);\n                        } else {\n                            parentNode = me.vdom.data;\n                        }\n\n                        elements = [];\n                        for(const child of parentNode.children) {\n                            elements.push(me.domHandler.getElementFromNode(child));\n                        }\n                    }\n                    if(!elements) {\n                        return originalFct.apply(this, arguments);\n                    }\n                    const filteredElements = [];\n                    try {\n                        for (const element of elements) {\n                            if (element) {\n                                filteredElements.push(element);\n                            }\n                        }\n                    } catch(e) {\n                        console.error(elements, this);\n                        console.error(e);\n                    }\n                    if(filteredElements.length === 1) {\n                        const element = filteredElements[0];\n                        if(!element) {\n                            console.warn('element not found', this, name, value);\n                            return this;\n                        }\n                        if(!me.isWithinSvg(element)) {\n                            return originalFct.apply(this, arguments);\n                        }\n                        me.domHandler.queueSetAttributeOnElement(element, prefix + name, value);\n                    } else {\n                        if(!me.isWithinSvg(elements[0])) {\n                            return originalFct.apply(this, arguments);\n                        }\n                        me.domHandler.queueSetAttributeOnSelection(filteredElements, prefix + name, value);\n                    }\n                    \n                    if(filteredElements[0] === me.svg && (name === 'width' || name === 'height')) {\n                        me.vdom.data[name] = parseInt(value);\n                        me.setCanvasSize();\n                    }\n                \n                    return this;\n                }\n            };\n        }\n    \n        if((window as any)['d3']) {\n            const d3 = (window as any)['d3'];\n\n            const origSelectionAttr = d3.selection.prototype.attr;\n            d3.selection.prototype.attr = getReplacement(origSelectionAttr);\n\n            const origSelectionStyle = d3.selection.prototype.style;\n            d3.selection.prototype.style = getReplacement(origSelectionStyle, 'style;');\n\n            const originalClassed = d3.selection.prototype.classed;\n            d3.selection.prototype.classed = function(className: string,\n                                                      value?: boolean|((data: any, index: number) => boolean)) {\n                if(value !== undefined) {\n                    me.domHandler.enableFrontendDesignProperties();\n                    let elements = this._groups ? this._groups[0] : this[0];\n                    let i = 0;\n                    for(let element of elements) {\n                        if(element) {\n                            const indexOfParent = element.childIndex;\n                            const parentSelector = element['parentSelector'];\n                            const parent = me.vdom.getParentNodeFromSelector(parentSelector);\n                            const node = parent.children[indexOfParent];\n                            if(!node) {\n                                console.warn('node not found', element, parent, indexOfParent, className);\n                                continue;\n                            }\n                            const prevClassNames = node.className || '';\n                            const evaluatedValue = typeof value === \"function\" ? value((<any> element).__data__, i) : value;\n                            if(evaluatedValue === true) {\n                                if(prevClassNames.indexOf(className) === -1) {\n                                    let newClassNames = (prevClassNames + ' ' + className).trim();\n\n                                    me.domHandler.queueSetAttributeOnElement(element, 'class', newClassNames);\n                                }\n                            } else if(evaluatedValue === false) {\n                                const containedPreviously = prevClassNames.indexOf(className) !== -1;\n                                if(containedPreviously) {\n                                    const newClassNames = prevClassNames.replace(className, '').replace('  ', ' ');\n                                    me.domHandler.queueSetAttributeOnElement(element, 'class', newClassNames);\n\n                                    if(!node['removedClasses']) {\n                                        node['removedClasses'] = [];\n                                    }\n                                    node['removedClasses'].push(className); // For removing associated styles.\n                                }\n                            }\n                        }\n\n                        i++;\n                    }\n                }\n                return originalClassed.apply(this, arguments);\n            };\n\n            const originalTransition = d3.selection.prototype.transition;\n            d3.selection.prototype.transition = function() {\n                me.domHandler.enableFrontendDesignProperties();\n                return originalTransition.apply(this, arguments);\n            };\n\n            const originalText = d3.selection.prototype.text;\n            d3.selection.prototype.text = function(value?: boolean|((data: any, index: number) => boolean)) {\n                if(value !== undefined) {\n                    let elements = this._groups ? this._groups[0] : this[0];\n                    let i = 0;\n                    for(let element of elements) {\n                        if(element && me.isWithinSvg(element)) {\n                            const evaluatedValue = typeof value === \"function\" ? value((<any> element).__data__, i) : value;\n                            me.domHandler.queueSetAttributeOnElement(element, 'text', evaluatedValue);\n                        }\n\n                        i++;\n                    }\n                }\n                return originalText.apply(this, arguments);\n            };\n        }\n    }\n\n    private replaceD3Remove() {\n        if(window['d3']) {\n            const d3 = window['d3'];\n            const me = this;\n\n            const newRemove = this.getNewRemoveChild(() => {}, true);\n            const d3Remove = function() {\n                let elements = this._groups ? this._groups[0] : this[0];\n\n                if(elements.length) {\n                    let parentElement: HTMLElement = null;\n                    for(let i = elements.length - 1; i > -1; i--) {\n                        const element = elements[i];\n                        if(element) {\n                            parentElement = element.parentNode;\n                            if(!parentElement) {\n                                console.error('element has no parent node', element);\n                            }\n                            newRemove.call(parentElement, element);\n                        }\n\n                    }\n                    if(parentElement) {\n                        me.updateChildSelectors(parentElement);\n                    }\n                }\n                return this;\n            };\n            d3.selection.prototype.remove = d3Remove;\n            //d3.transition.prototype.remove = d3Remove;\n        }\n    }\n    \n    private replaceNativeCreateElement() {\n        const origCreate = document.createElementNS;\n        const me = this;\n        \n        document.createElementNS = function() {\n            let newArgs = Array.from(arguments);\n            const el = origCreate.apply(this, newArgs);\n            \n            /*el.appendChild = () => {\n                console.log('hi!!', el, arguments);\n                //return el;\n            };*/\n    \n            el.appendChild = me.getNewAppendChild(el.appendChild);\n            \n            me.unassignedNodes.push(el);\n    \n            //console.log(me.unassignedNodes);\n            \n            return el;\n        }\n    }\n\n    private updateChildSelectors(parentElement: Element, parentNode?: VdomNode) {\n        const parentSelector = parentElement['selector'];\n        if(!parentSelector) {\n            console.error('this node has no selector', parentElement)\n        }\n        if(!parentNode) {\n            parentNode = this.vdom.getParentNodeFromSelector(parentSelector);\n        }\n        for(let i = 0; i < parentNode.children.length; i++) {\n            const childNode: VdomNode = parentNode.children[i];\n            const childElement = this.domHandler.getElementFromNode(childNode);\n            if(!childElement) {\n                console.error('element not found', childNode, parentNode.children.length, i);\n                continue;\n            }\n            const oldSelector = childElement['selector'];\n\n            childElement['childIndex'] = i;\n            childElement['parentSelector'] = parentSelector;\n            childElement['selector'] = this.domHandler.combineElementSelectors(parentSelector, childNode.type, i+1);\n\n            this.domHandler.updateNodeSelector(oldSelector, childElement['selector']);\n\n            this.updateChildSelectors(childElement, childNode);\n        }\n    }\n\n    private getNewRemoveChild(origRemoveChild: ((<T extends Node>(oldChild: T) => T)|(() => void)),\n        skipUpdateSelectors = false) {\n        const me = this;\n\n        return function<T extends Node>(this: Element, el: T) {\n            if(!this) {\n                console.error('context not defined');\n                return el;\n            }\n            if(!me.isWithinSvg(<Element> <any> el)) {\n                return origRemoveChild.apply(this, arguments);\n            }\n            const parentNode = me.domHandler.getNodeFromElement(<Element> <any> this);\n            const parentSelector = this['selector'];\n            const node = me.domHandler.getNodeFromElement(<Element> <any> el);\n\n            if(!node) {\n                console.error('node not found', node, el, this, parentNode);\n                return origRemoveChild.apply(this, arguments);\n            }\n\n            // Remove all child elements.\n            for(const childNode of node.children) {\n                const childEl = me.domHandler.getElementFromNode(childNode);\n                //el.removeChild(childEl);\n            }\n\n            // Remove from current parent first.\n            Object.defineProperty(el, 'parentNode', {\n                writable: true,\n                value: undefined\n            });\n\n            //console.log('remove')\n            me.enterExitQueue.push({\n                cmd: 'EXIT',\n                childIndex: el['childIndex'],\n                parentNodeSelector: parentSelector\n            });\n\n            me.domHandler.removeNodeFromParent(<Element> <any> el, node);\n\n            // Fix child indices of all children.\n            if(!skipUpdateSelectors) {\n                if(!parentSelector) {\n                    console.error('parent not found', parentNode, parentSelector, this, el);\n                }\n                me.updateChildSelectors(this);\n            }\n\n            delete el['selector'];\n\n            return el;\n        };\n    }\n\n    private replaceNativeRemoveChild() {\n        Element.prototype.removeChild = this.getNewRemoveChild(Element.prototype.removeChild);\n    }\n    \n    private getNewAppendChild(origAppend) {\n        const me = this;\n        \n        return function<T extends Node>(this: Element, el: T) {\n            if(!me.svgAssignedAndSizeSet) {\n                if(!me.svg && el['tagName'] === 'svg') {\n                    const appended = origAppend.apply(this, arguments);\n                    me.setupElementsIfSvgExists(<SVGElement> <any> el);\n                    return appended;\n                    \n                } else {\n                    return origAppend.apply(this, arguments);\n                }\n            }\n            \n            if(!me.isWithinSvg(this)) {\n                return origAppend.apply(this, arguments);\n            }\n\n            Object.defineProperty(el, 'ownerSVGElement', {\n                writable: true,\n                value: me.svg\n            });\n            el['appendChild'] = <T extends Node>(el2: T) => {\n                return me.getNewAppendChild(origAppend).call(el, el2);\n            };\n            const parentSelector = me.domHandler.getElementSelector(this);\n            if(parentSelector === null) {\n                return origAppend.apply(this, arguments);\n            }\n\n            const parentNode = me.domHandler.getNodeFromElement(this);\n            if(!parentNode) {\n                return console.error('parent node not found', parentSelector, this);\n            }\n            let node: VdomNode;\n            let keepChildren = false;\n\n            if(el['parentSelector']) {\n                node = me.domHandler.getVisNode(<Element> <any> el);\n\n                me.getNewRemoveChild(() => {}).call(this, el);\n                keepChildren = true; // If the element is being moved around, keep children.\n            } else {\n                node = me.domHandler.getNodeDataFromEl(<HTMLElement><any> el);\n            }\n\n            (el as any)['parentSelector'] = parentSelector;\n            (el as any)['selector'] = me.domHandler.getElementSelector(<Element><any> el, parentNode);\n            (el as any)['childIndex'] = parentNode.children.length;\n\n            Object.defineProperty(el, 'style', {\n                writable: true,\n                value: {\n                    setProperty: function(styleProp: string, value: string) {\n                        me.domHandler.queueSetAttributeOnElement(el as any, 'style;' + styleProp, value);\n                    },\n                    getPropertyValue: function(styleProp) {\n                        me.domHandler.enableFrontendDesignProperties();\n                        return node.style[styleProp];\n                    }\n                }\n            });\n\n            Object.defineProperty(el, 'parentNode', {\n                writable: true,\n                value: this\n            });\n    \n            me.domHandler.linkNodeToElement(node, el);\n            me.domHandler.addNodeToParent(parentNode, node);\n            me.updateChildSelectors(el as unknown as Element, node);\n            \n            if(me.useWorker) {\n                me.enterExitQueue.push({\n                    cmd: 'ENTER',\n                    node: node,\n                    parentNodeIndex: parentNode.globalElementIndex,\n                    keepChildren: keepChildren\n                });\n            } else {\n                if(me.renderer.addNode) {\n                    me.renderer.addNode(node);\n                }\n            }\n    \n            if(me.unassignedNodes.indexOf(el) !== -1) {\n                const index = me.unassignedNodes.indexOf(el);\n                me.unassignedNodes.splice(index, 1);\n            }\n    \n            return el;\n        };\n    }\n    \n    private replaceNativeAppendChild() {\n        const origAppendChild = Element.prototype.appendChild;\n        const newAppend = this.getNewAppendChild(origAppendChild);\n    \n        Element.prototype.appendChild = newAppend;\n        Element.prototype.insertBefore = function<T extends Node>(newChild: T, refChild: Node|null) {\n    \n            newAppend.call(this, newChild);\n            \n            return newChild;\n        };\n    }\n\n    private replaceNativePathFunctions() {\n        const me = this;\n        //const origGetPointAtLength = SVGPathElement.prototype.getPointAtLength;\n        const origGetTotalLength = SVGPathElement.prototype.getTotalLength;\n\n        /*SVGPathElement.prototype.getPointAtLength = function() {\n            if(me.isWithinSvg(this)) {\n                const d = this.getAttribute('d');\n                me.origSetAttribute.call(this, 'd', d);\n            }\n            return origGetPointAtLength.apply(this, arguments);\n        };*/\n        SVGPathElement.prototype.getTotalLength = function() {\n            if(me.isWithinSvg(this)) {\n                const d = this.getAttribute('d');\n                me.origSetAttribute.call(this, 'd', d);\n            }\n\n            return origGetTotalLength.apply(this, arguments);\n        };\n    }\n\n    private origSetAttribute;\n\n    private replaceNativeAttribute() {\n        const origSetAttr = Element.prototype.setAttribute;\n        this.origSetAttribute = origSetAttr;\n        const origSetAttrNS = Element.prototype.setAttributeNS;\n        const origGetAttr = Element.prototype.getAttribute;\n        const me = this;\n    \n        Element.prototype.setAttribute = function(name: string, value: any) {\n            if(name === 'easypz' || me.unassignedNodes.indexOf(this) !== -1) {\n                // Update the original SVG\n                origSetAttr.apply(this, arguments);\n                return;\n            }\n            if(name === 'class') {\n                origSetAttr.apply(this, arguments);\n            }\n            if(!me.isWithinSvg(this)) {\n                return origSetAttr.apply(this, arguments);\n            }\n            me.domHandler.queueSetAttributeOnElement(this, name, value);\n        };\n        //TODO: Figure out how to access the element when setting a style property.\n        /*CSSStyleDeclaration.prototype.setProperty = function(name: string, value: any) {\n            safeLog(this, arguments);\n            me.elementHandler.queueSetAttributeOnElement(this, 'style;' + name, value);\n        };*/\n        Element.prototype.setAttributeNS = function(name: string, value: any) {\n            if(name === 'easypz' || me.unassignedNodes.indexOf(this) !== -1) {\n                // Update the original SVG\n                origSetAttrNS.apply(this, arguments);\n                return;\n            }\n            if(name === 'class') {\n                origSetAttrNS.apply(this, arguments);\n            }\n            if(!me.isWithinSvg(this)) {\n                return origSetAttrNS.apply(this, arguments);\n            }\n            me.domHandler.queueSetAttributeOnElement(this, name, value);\n        };\n    \n        Element.prototype.getAttribute = function(name) {\n            if(me.unassignedNodes.indexOf(this) !== -1) {\n                return origGetAttr.apply(this, arguments);\n            } else {\n                try {\n                    return me.domHandler.getAttributeFromSelector(this, name);\n                } catch(e) {\n                    console.error(e);\n                    return origGetAttr.apply(this, arguments);\n                }\n            }\n        };\n    }\n    \n    private propagateMouseEvent(evt: MouseEvent, type?: string) {\n        return this.propagateEvent(new MouseEvent(type? type : evt.type, evt));\n    }\n\n    private duplicateTouchEvent(evt: TouchEvent, type?: string) {\n        const e = document.createEvent('TouchEvent');\n        if(!type) {\n            type = evt.type;\n        }\n        e.initEvent(type, true, false);\n        for(const prop in evt) {\n            if(prop !== 'isTrusted' && evt.hasOwnProperty(prop)) {\n                Object.defineProperty(e, prop, {\n                    writable: true,\n                    value: evt[prop],\n                });\n            }\n        }\n        Object.defineProperty(e, 'type', {\n            writable: true,\n            value: type,\n        });\n        const touches = [];\n        for(let i = 0; i < evt.touches.length; i++) {\n            const touch = evt.touches[i];\n            touches.push({identifier: touch.identifier, pageX: touch.pageX, pageY: touch.pageY,\n                clientX: touch.clientX, clientY: touch.clientY});\n        }\n        Object.defineProperty(e, 'touches', {\n            writable: true,\n            value: touches,\n        });\n        return e;\n    }\n\n    private propagateTouchEvent(evt: TouchEvent, type?: string) {\n        return this.propagateEvent(this.duplicateTouchEvent(evt, type));\n    }\n    \n    private propagateWheelEvent(evt: WheelEvent) {\n        return this.propagateEvent(new WheelEvent(evt.type, evt));\n    }\n    \n    private propagateEvent(new_event: MouseEvent|TouchEvent|WheelEvent): undefined|Element {\n        this.svg.dispatchEvent(new_event); // for EasyPZ\n\n        let triggeredElement: undefined|Element;\n\n        for(let interactionSel of this.interactionSelections)\n        {\n            let parentSelector = this.domHandler.getElementSelector(interactionSel);\n            let parentNode = this.vdom.getVisNodeFromSelector(parentSelector);\n            \n            //let matchingVisParent = selectedNodes[i];\n            let j = 1;\n            \n            if(!parentNode) {\n                //console.error(interactionSel, parentSelector, parentNode);\n            } else {\n                for(let vdomNode of parentNode.children)\n                {\n                    const {x, y} = SSVG.getMousePosition(new_event);\n                    let childNode = this.nodeAtPosition(vdomNode, x - 10, y - 10);\n                    if(childNode)\n                    {\n                        //console.log(childNode);\n                        /*let selector = parentSelector + ' > :nth-child(' + j + ')';\n                        let svgEl = this.svg.querySelector(selector);*/\n                        const svgEl = this.domHandler.getElementFromNode(vdomNode);\n                        const svgChildEl = this.domHandler.getElementFromNode(childNode);\n\n                        if(svgChildEl) {\n                            Object.defineProperty(new_event, 'target', {\n                                writable: true,\n                                value: svgChildEl\n                            });\n                        }\n\n                        if(svgChildEl) {\n                            triggeredElement = svgChildEl;\n                            svgChildEl.dispatchEvent(new_event);\n                        }\n\n                        if(svgEl && !triggeredElement) {\n                            triggeredElement = svgEl;\n                            svgEl.dispatchEvent(new_event);\n                        }\n                    }\n                    j++;\n                }\n            }\n        }\n        return triggeredElement;\n    }\n\n    //TODO move this function somewhere else.\n    private static getMousePosition(event: MouseEvent|TouchEvent) : {x: number, y: number}|null\n    {\n        let pos = {x: 0, y: 0};\n\n        if(event.type.substr(0,5) === 'mouse' && event['clientX'])\n        {\n            pos = {x: event['clientX'], y: event['clientY']};\n        }\n        else if(event.type.substr(0,5) === 'touch')\n        {\n            const touches = event['touches'] ? event['touches'] : [];\n            if(touches.length < 1) return null;\n            pos = {x: touches[0].clientX, y: touches[0].clientY};\n        }\n\n        return pos;\n    }\n    \n    private nodeAtPosition(visNode: VdomNode, x: number, y: number): false|VdomNode {\n        if (visNode.type === 'circle') {\n            let cx = visNode.cx || 0;\n            let cy = visNode.cy || 0;\n            if (visNode.transform) {\n                const transform = DrawingUtils.parseTransform(visNode.transform);\n                if (transform.translateX) {\n                    cx += transform.translateX;\n                }\n                if (transform.translateY) {\n                    cy += transform.translateY;\n                }\n            }\n            const distance = Math.sqrt(Math.pow(cx - x, 2) + Math.pow(cy - y, 2));\n            return distance < visNode.r ? visNode : false;\n        } else if(visNode.type === 'rect' || visNode.type === 'image') {\n\n            let elX = visNode.x || 0;\n            let elY = visNode.y || 0;\n            const width = visNode.width;\n            const height = visNode.height;\n\n            if (visNode.transform) {\n                const transform = DrawingUtils.parseTransform(visNode.transform);\n                if (transform.translateX) {\n                    elX += transform.translateX;\n                }\n                if (transform.translateY) {\n                    elY += transform.translateY;\n                }\n            }\n\n            const centerX = elX + width / 2;\n            const centerY = elY + height / 2;\n\n            const distanceX = Math.abs(centerX - x);\n            const distanceY = Math.abs(centerY - y);\n\n            return distanceX < width / 2 && distanceY < height / 2 ? visNode : false;\n\n        } else if(visNode.type === 'g') {\n\n            const transform = this.domHandler.getTotalTransformation(visNode);\n            if(transform.translateX) {\n                x -= transform.translateX;\n            }\n            if(transform.translateY) {\n                y -= transform.translateY;\n            }\n\n            let matchAny: false|VdomNode = false;\n            for(let i = 0; i < visNode.children.length; i++) {\n                if(this.nodeAtPosition(visNode.children[i], x, y)) {\n                    matchAny = visNode.children[i];\n                }\n            }\n            return matchAny;\n        }\n        return false;\n    }\n    \n    private logDrawn() {\n        this.lastTenCanvasDrawTimes.push(Date.now());\n        \n        if(this.lastTenCanvasDrawTimes.length > 100) {\n            this.lastTenCanvasDrawTimes.shift(); // Remove first item\n        }\n    }\n    \n    private updateFps() {\n        if(this.lastTenCanvasDrawTimes.length) {\n            const timeForTenDrawsMs = Date.now() - this.lastTenCanvasDrawTimes[0];\n            const fps = Math.round(this.lastTenCanvasDrawTimes.length / timeForTenDrawsMs * 1000);\n            this.getFps(fps);\n        }\n    }\n\n    private sendUpdateToWorker(queue) {\n        const msg: CanvasUpdateWorkerMessage = {\n            cmd: 'UPDATE_NODES',\n            data: {\n                enterExit: this.enterExitQueue,\n                update: queue,\n            }\n        };\n\n        this.sendToWorker(msg);\n\n        this.enterExitQueue = [];\n    }\n\n    private sendToWorker(msg: CanvasWorkerMessage, data?: any) {\n        this.worker.postMessage(msg, data);\n        //console.log(roughSizeOfObject(msg));\n    }\n}\n\n\nlet safeLogCount = 0;\nfunction safeLog(...logContents) {\n    \n    if(safeLogCount < 50) {\n        safeLogCount++;\n        console.log(...logContents);\n    }\n}\nfunction safeErrorLog(...logContents) {\n    \n    if(safeLogCount < 50) {\n        safeLogCount++;\n        console.error(...logContents);\n    }\n}","import {VdomNode, VdomNodeType} from \"../util/vdom/vdom\";\nimport SetPropertyQueue from \"../util/vdom/set-property-queue\";\nimport {VdomManager} from \"../util/vdom/vdom-manager\";\nimport DrawingUtils, {Transformation} from \"../canvasworker/drawingUtils\";\nimport drawingUtils from \"../canvasworker/drawingUtils\";\n\nexport default class Domhandler {\n    private readonly vdom: VdomManager;\n    private setAttrQueue = new SetPropertyQueue();\n    private nodesToElements: { nodes: VdomNode[], elements: Element[]} = { nodes: [], elements: []};\n    private nodesToRestyle: VdomNode[] = [];\n\n    constructor(private svg: SVGElement, useWorker: boolean, private ignoreDesign: boolean) {\n        const visData: any = {\n            width: parseInt(this.svg.getAttribute('width')),\n            height: parseInt(this.svg.getAttribute('height')),\n            scale: 1,\n            children: [],\n            globalElementIndex: 0,\n        };\n\n        this.vdom = new VdomManager(visData, ignoreDesign);\n        this.linkNodeToElement(visData, this.svg);\n        this.svg.style.display = 'none';\n        this.svg['selector'] = 'svg';\n\n        this.addChildNodesToVisData(this.svg.childNodes, this.vdom.data);\n\n        window.setTimeout(() => {\n            // Re-do the styles.\n            this.nodesToRestyle = [];\n            // Can not use this.nodesToRestyle = this.nodesToElements.nodes because this links the object and adding\n            // to this.nodesToRestyle would break the nodesToElements mapping.\n            for(const node of this.nodesToElements.nodes) {\n                this.nodesToRestyle.push(node);\n            }\n        }, 100);\n    }\n\n    enableFrontendDesignProperties() {\n        this.ignoreDesign = false;\n        this.vdom.enableFrontendDesignProperties();\n    }\n    \n    getVDom() {\n        return this.vdom;\n    }\n    \n    queueSetAttributeOnElement(element: Element, attrName: string, value: any) {\n        //TODO: merge with updatePropertiesFromQueue from VdomManager?\n        const parent = element.parentNode;\n        let parentSelector = parent === this.svg ? \"svg\" : (element as any)['parentSelector'] as string;\n        let childIndex = (element as any)['childIndex'];\n    \n        if(!parentSelector && element === this.svg) {\n            parentSelector = 'SVG_PARENT';\n            childIndex = 0;\n        }\n    \n        if(!parentSelector) {\n            safeLog(element, parent);\n            console.error('selector not found');\n            return;\n        }\n\n        if(element === this.svg && attrName.indexOf('style;') === 0) {\n            attrName = attrName.substr('style;'.length);\n        }\n        //attrName = this.checkAttrName(parentSelector, attrName, false);\n        this.setAttrQueue.ensureInitialized(attrName, false);\n\n        const evaluatedValue = typeof value === \"function\" ? value.call(<any> element, (<any> element).__data__, childIndex) : value;\n        //const node = this.getNodeFromElement(element);\n        //this.setAttrQueue.set(node, attrName, evaluatedValue, false);\n        const node = this.getNodeFromElement(element);\n        this.setAttrQueue.set(node, attrName, evaluatedValue, false);\n\n        if(attrName === \"href\") {\n            try {\n                fetch(location.origin + evaluatedValue, {mode: 'cors'})\n                    .then(resp => resp.blob())\n                    .then(blob => createImageBitmap(blob))\n                    .then(bitmap => {\n                        //this.checkAttrName(parentSelector, \"image\", false);\n                        this.setAttrQueue.ensureInitialized(\"image\", false);\n                        this.setAttrQueue[parentSelector][\"image\"][childIndex] = bitmap;\n                    });\n            }\n            catch(e) {console.log(e);}\n        }\n\n        if(attrName === 'class' || attrName.indexOf('style') !== -1) {\n            // Apply classes immediately so styles can be applied correctly.\n\n            if(attrName === 'class') {\n                node.className = evaluatedValue;\n                this.nodesToRestyle.push(node);\n            } else {\n                const styleName = attrName.substr(6);\n                if(!node.style) {\n                    console.error('no styles on node ', node);\n                }\n                node.style[styleName] = evaluatedValue;\n            }\n        }\n    }\n    \n    queueSetAttributeOnSelection(elements: (HTMLElement & {__data__: any})[], attrName: string, value) {\n        if(!elements.length) return;\n        if(!elements[0]) {\n            //console.error('selection elements not found', elements);\n            return;\n        }\n        const useSharedArray = 'SharedArrayBuffer' in self;\n\n        let parentElement = elements[0].parentNode;\n        let parentSelector = parentElement === this.svg ? \"svg\" : parentElement['selector'];\n        if(!parentSelector) {\n            safeLog(elements, parentElement);\n            console.error('selector not found');\n        }\n\n        this.setAttrQueue.ensureInitialized(attrName, useSharedArray);\n\n        for(let i = 0; i < elements.length; i++) {\n            const svgEl = elements[i];\n\n            const evaluatedValue = typeof value === \"function\" ? value(svgEl.__data__, i) : value;\n            this.ensureElementIndex(svgEl);\n\n            this.setAttrQueue.set(svgEl, attrName, evaluatedValue, useSharedArray);\n\n            //TODO: re-implement.\n            /*if(attrName === \"href\") {\n                try {\n                    fetch(location.origin + evaluatedValue, {mode: 'cors'})\n                    .then(resp => resp.blob())\n                    .then(blob => createImageBitmap(blob))\n                    .then(bitmap => {\n                        //this.checkAttrName(parentSelector, \"image\", useSharedArray, parentNode);\n                        this.setAttrQueue.ensureInitialized(\"image\", false);\n                        this.setAttrQueue[parentSelector][\"image\"][indexOfParent] = bitmap;\n                    });\n                }\n                catch(e) {console.log(e);}\n            }*/\n        }\n\n        if(attrName === 'className' || attrName.indexOf('style') !== -1) {\n            // Apply classes immediately so styles can be applied correctly.\n            for(let i = 0; i < elements.length; i++) {\n                const node = this.getNodeFromElement(elements[i]);\n                const evaluatedValue = typeof value === \"function\" ? value(elements[i].__data__, i) : value;\n\n                if(attrName === 'className') {\n                    node.className = evaluatedValue;\n                    this.nodesToRestyle.push(node);\n                } else {\n                    const styleName = attrName.substr(6);\n                    node.style[styleName] = evaluatedValue;\n                }\n            }\n        }\n    }\n\n    ensureElementIndex(svgEl: HTMLElement) {\n        if(!svgEl['globalElementIndex']) {\n            const node = this.getNodeFromElement(svgEl);\n            svgEl['globalElementIndex'] = node.globalElementIndex;\n        }\n    }\n\n    useAttrQueue(cb: (data) => void = () => {}) {\n        if(this.nodesToRestyle) {\n            this.applyStyles();\n        }\n\n        const data = this.setAttrQueue.getData();\n        cb(data);\n        this.vdom.updatePropertiesFromQueue(data);\n\n        //this.setAttrQueue = {};\n        this.setAttrQueue.clearData();\n    }\n\n    getAttributeFromSelector(element: Element, name: string) {\n        const node = this.getNodeFromElement(element);\n        \n        if(!node) {\n            console.error('trying to get attribute for unfit selection', node, element, name);\n            throw Error('element not found');\n        }\n        \n        return node[name];\n    }\n    \n    getVisNode(element: Element): VdomNode|null {\n        const selector = this.getElementSelector(element);\n\n        if(selector === null) {\n            return null;\n        }\n        \n        return this.vdom.getVisNodeFromSelector(selector);\n    }\n    \n    getNodeDataFromEl(el: HTMLElement): VdomNode {\n        const getRoundedAttr = (el: Element, attrName: string) => {\n            const val = el.getAttribute(attrName);\n            return val ? parseFloat(val) : null;\n        };\n        \n        const node = {\n            type: el.tagName.toLowerCase() as VdomNodeType,\n            transform: el.getAttribute('transform'),\n            d: el.getAttribute('d'),\n            className: el.getAttribute('class'),\n            id: el.getAttribute('id'),\n            r: getRoundedAttr(el, 'r'),\n            fill: el.getAttribute('fill'),\n            cx: getRoundedAttr(el, 'cx'),\n            cy: getRoundedAttr(el, 'cy'),\n            x: getRoundedAttr(el, 'x'),\n            y: getRoundedAttr(el, 'y'),\n            x1: getRoundedAttr(el, 'x1'),\n            x2: getRoundedAttr(el, 'x2'),\n            y1: getRoundedAttr(el, 'y1'),\n            y2: getRoundedAttr(el, 'y2'),\n            width: getRoundedAttr(el, 'width'),\n            height: getRoundedAttr(el, 'height'),\n            stroke: el.getAttribute('stroke'),\n            \"stroke-width\": getRoundedAttr(el, 'stroke-width'),\n            text: !el.childNodes || (el.childNodes.length === 1 && !(el.childNodes[0] as HTMLElement).tagName) ? el.textContent : undefined,\n            'font-size': el.getAttribute('font-size'),\n            'font': el.getAttribute('font'),\n            'text-anchor': el.getAttribute('text-anchor'),\n            href: el.getAttribute('href'),\n            style: {},\n            styleSpecificity: {},\n            children: [],\n            globalElementIndex: -1,\n        };\n\n        for(const styleProp in el.style) {\n            if(el.style.hasOwnProperty(styleProp)) {\n                const val = el.style[styleProp];\n                if(val !== '' && typeof el.style[styleProp] !== 'function') {\n                    const kebabCase = styleProp.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n                    node.style[kebabCase] = el.style[styleProp];\n                }\n            }\n        }\n\n        const clean = obj => {\n            const propNames = Object.getOwnPropertyNames(obj);\n            for (let i = 0; i < propNames.length; i++) {\n                const propName = propNames[i];\n                if (obj[propName] === null || obj[propName] === undefined) {\n                    delete obj[propName];\n                }\n            }\n        };\n        \n        clean(node);\n        \n        return node;\n    }\n\n    private applyStyles() {\n        for (let i = 0; i < document.styleSheets.length; i++) {\n            const sheet = document.styleSheets[i] as any;\n            const rules = (sheet.rules ? sheet.rules : sheet.cssRules) as CSSRuleList;\n        \n            for (let j = 0; j < rules.length; j++) {\n                const rule = rules[j] as any;\n                const selector = rule.selectorText as string;\n                if(!selector) {\n                    continue; // Skip @imports etc.\n                }\n                this.applyRuleToMatchingNodes(selector, rule);\n            }\n        }\n\n        this.nodesToRestyle = [];\n    }\n\n    updateNodeSelector(oldSelector: string, newSelector: string) {\n        /*if(oldSelector === newSelector) {\n            return;\n        }\n        if(this.setAttrQueue[newSelector]) {\n            console.warn('having problems rearranging the elements! old:', oldSelector, ', new:', newSelector,\n                this.setAttrQueue[oldSelector], this.setAttrQueue[newSelector]);\n            delete this.setAttrQueue[oldSelector];\n        } else {\n            this.setAttrQueue[newSelector] = this.setAttrQueue[oldSelector];\n            delete this.setAttrQueue[oldSelector];\n        }*/\n    }\n\n    private applyRuleToMatchingNodes(selectorString: string, rule: {style: {[settingName: string]: string}}): boolean {\n        selectorString = selectorString.trim();\n\n        const selector = selectorString\n            .replace(' >', '>')\n            .replace('> ', '>')\n            .replace('svg>', '');\n        \n        const selectorPartsLooseStrict = selector.split(' ')\n            .map(part => part.split('>'));\n\n\n        const parentsOfInterest = [];\n        for(const nodeToBeStyled of this.nodesToRestyle) {\n            let parent = this.getNodeParent(nodeToBeStyled);\n            while(parent && parentsOfInterest.indexOf(parent) === -1) {\n                parentsOfInterest.push(parent);\n                parent = this.getNodeParent(parent);\n            }\n        }\n        const specificity = DrawingUtils.getCssRuleSpecificityNumber(selectorString);\n\n        const setStyle = (styleName: string, rule: {style: {[settingName: string]: string}}, child: VdomNode) => {\n            if(rule.style[styleName]) {\n                const longName = 'style;' + styleName;\n                const longSpecName = 'styleSpecificity;' + styleName;\n                this.setAttrQueue.ensureInitialized(longName, false);\n                this.setAttrQueue.ensureInitialized(longSpecName, false);\n                /*this.checkAttrName(parentSelector, longName);\n                this.checkAttrName(parentSelector, longSpecName);*/\n                let setValue = false;\n\n                if(!this.setAttrQueue.get(child, longName) && !child.style[styleName]) {\n                    setValue = true;\n                } else {\n                    if(child.styleSpecificity[styleName]) {\n                        // If a later rule has the same or higher specificity, apply.\n                        // Hence, later rules override earlier rules.\n                        if(child.styleSpecificity[styleName] <= specificity) {\n                            if(this.setAttrQueue.get(child, longSpecName)) {\n                                setValue = this.setAttrQueue.get(child, longSpecName) <= specificity;\n                            } else {\n                                setValue = true;\n                            }\n                        } else {\n                            setValue = this.setAttrQueue.get(child, longSpecName) <= specificity;\n                        }\n                    } else {\n                        setValue = this.setAttrQueue.get(child, longSpecName) <= specificity;\n                    }\n                }\n\n                if(setValue) {\n                    this.setAttrQueue.set(child, longName, rule.style[styleName], false);\n                    this.setAttrQueue.set(child, longSpecName, specificity, false);\n                    /*this.setAttrQueue[parentSelector][longName][childIndex] = rule.style[styleName];\n                    this.setAttrQueue[parentSelector][longSpecName][childIndex] = specificity;*/\n                }\n            }\n        };\n\n        const checkNode = (currentNode: VdomNode, looseIndex = 0, strictIndex = 0): boolean => {\n            const selPart = selectorPartsLooseStrict[looseIndex][strictIndex];\n\n            for(let childIndex = 0; childIndex < currentNode.children.length; childIndex++) {\n                const child = currentNode.children[childIndex];\n                if(parentsOfInterest.indexOf(child) === -1 && this.nodesToRestyle.indexOf(child) === -1) {\n                    continue;\n                }\n                let partialMatch = VdomManager.isCssRulePartialMatch(selPart, child, currentNode);\n\n                if(partialMatch) {\n                    if(selectorPartsLooseStrict[looseIndex].length > strictIndex + 1) {\n                        checkNode(child, looseIndex, strictIndex + 1);\n                    } else if(selectorPartsLooseStrict.length > looseIndex + 1) {\n                        checkNode(child, looseIndex + 1, strictIndex);\n                    } else {\n                        const parentSelector = this.getNodeSelector(currentNode);\n\n                        setStyle('stroke', rule, child);\n                        setStyle('stroke-opacity', rule, child);\n                        setStyle('stroke-width', rule, child);\n                        setStyle('stroke-linejoin', rule, child);\n                        setStyle('fill', rule, child);\n                        setStyle('fill-opacity', rule, child);\n                        setStyle('font', rule, child);\n                    }\n                } else {\n                    if(child['removedClasses']) {\n                        // temporarily add the class, see if it matches this rule, and if so, un-apply its stuff.\n                        for(const removedClass of child['removedClasses']) {\n                            child.className += ' ' + removedClass;\n\n                            let newPartialMatch = VdomManager.isCssRulePartialMatch(selPart, child, currentNode);\n                            if(newPartialMatch) {\n                                const parentSelector = this.getNodeSelector(currentNode);\n                                this.removeRuleStylesFromNode(parentSelector, child, childIndex, rule);\n                            }\n\n                            child.className = child.className.substr(0, child.className.length -\n                                removedClass.length - 1);\n                        }\n                        setTimeout(() => {\n                            delete child['removedClasses'];\n                        }); // After this frame, reset which classes have been removed.\n                    }\n                    checkNode(child, looseIndex, strictIndex);\n                }\n            }\n            return false;\n        };\n\n        return checkNode(this.vdom.data);\n    }\n\n    removeRuleStylesFromNode(parentSelector: string, child: VdomNode, childIndex: number,\n                             rule: {style: {[settingName: string]: string}}) {\n        if(rule.style['stroke']) {\n            const color = drawingUtils.colorToRgba(rule.style['stroke']);\n            if(child.style['stroke'] === color || child.style['stroke-rgba'] === color) {\n                //this.checkAttrName(parentSelector, 'style;stroke');\n                //this.setAttrQueue[parentSelector]['style;stroke'][childIndex] = '';\n                //this.checkAttrName(parentSelector, 'style;stroke-rgba');\n                //this.setAttrQueue[parentSelector]['style;stroke-rgba'][childIndex] = '';\n\n                this.setAttrQueue.ensureInitialized('style;stroke', false);\n                this.setAttrQueue.ensureInitialized('style;stroke-rgba', false);\n                this.setAttrQueue.set(child, 'style;stroke', '', false);\n                this.setAttrQueue.set(child, 'style;troke-rgba', '', false);\n            }\n        }\n        //TODO remove other styles.\n    }\n\n    removeNodeFromParent(element: Element, node: VdomNode) {\n        const parentSelector = element['parentSelector'];\n        const childIndex = element['childIndex'];\n        this.vdom.removeNode(childIndex, parentSelector);\n        let index = this.nodesToElements.nodes.indexOf(node);\n        if(index === -1) {\n            return console.error('node not found', node);\n        }\n\n        this.nodesToElements.nodes.splice(index, 1);\n        this.nodesToElements.elements.splice(index, 1);\n\n        // Remove all pending changes on this element\n        const selector = element['selector'];\n        delete this.setAttrQueue[selector];\n\n        // Update indices\n        for(let i = index; i < this.nodesToElements.nodes.length; i++) {\n            this.nodesToElements.nodes[i].globalElementIndex = i;\n        }\n\n        for(let attrName in this.setAttrQueue[parentSelector]) {\n            for(let i = childIndex + 1; i < this.setAttrQueue[parentSelector][attrName].length; i++) {\n                this.setAttrQueue[parentSelector][attrName][i-1] = this.setAttrQueue[parentSelector][attrName][i];\n            }\n        }\n    }\n\n    addNodeToParent(parentNode, node) {\n        parentNode.children.push(node);\n        this.nodesToRestyle.push(node);\n    }\n    \n    private addChildNodesToVisData(childEls: HTMLElement[]|NodeList, parentNode: VdomNode): void {\n        const parentEl = this.getElementFromNode(parentNode);\n\n        for(let i  = 0; i < childEls.length; i++) {\n            let el = childEls[i] as HTMLElement;\n            \n            try\n            {\n                const node = this.getNodeDataFromEl(el);\n\n                (el as any)['parentSelector'] = this.getElementSelector(parentEl);\n                (el as any)['selector'] = this.getElementSelector(<Element><any> el);\n                (el as any)['childIndex'] = parentNode.children.length;\n\n                parentNode.children.push(node);\n                this.linkNodeToElement(node, el);\n                this.nodesToRestyle.push(node);\n                \n                if(el.childNodes)\n                {\n                    this.addChildNodesToVisData(el.childNodes, node);\n                }\n                if(node.type === 'tspan')\n                {\n                    //console.log(node, el, el.childNodes, el.textContent);\n                    //console.log(el.childNodes[0])\n                    //console.log(node, style.textAnchor);\n                }\n                if(node.type === 'text')\n                {\n                    //console.log(node, el, el.childNodes, el.textContent);\n                }\n            }\n            catch(e)\n            {\n                //console.log(e);\n                //console.log(el);\n            }\n        }\n    }\n\n    getNodeSelector(node: VdomNode): string {\n        if(node === this.vdom.data) {\n            return 'svg';\n        }\n        const element = this.getElementFromNode(node);\n        if(!element) {\n            console.error('could not find element for node ', node);\n            return '';\n        }\n        return this.getElementSelector(element, undefined, node);\n    }\n    \n    getElementSelector(element: Element, parentNode?: VdomNode, node?: VdomNode): string|null {\n        let sel = (element as any)['selector'];\n        \n        if(sel)\n        {\n            return sel;\n        }\n        else\n        {\n            if(element === this.svg) {\n                sel = 'svg';\n            } else {\n                let parentSelector = (element as any)['parentSelector'] ?\n                    (element as any)['parentSelector'] as string : '';\n\n                if(!parentNode) {\n                    parentNode = this.vdom.getVisNodeFromSelector(parentSelector);\n                }\n                if(!parentNode) {\n                    console.warn('Element not found', element, parentSelector, parentSelector.length, this.vdom.data);\n                    return null;\n                }\n                let index = parentNode.children.length + 1;\n                if(node && parentNode.children.indexOf(node) !== -1) {\n                    index = parentNode.children.indexOf(node) + 1;\n                }\n                let name = element.localName;\n                if (!name) {\n                    console.error(parentNode);\n                    throw Error('name is null');\n                }\n                name = name.toLowerCase();\n                sel = this.combineElementSelectors(parentSelector, name, index);\n            }\n            \n            return sel;\n        }\n    }\n\n    combineElementSelectors(parentSelector: string, elementType: string, childIndex: number) {\n        return parentSelector + ' > ' + elementType + ':nth-child(' + childIndex + ')';\n    }\n\n    getNodeParent(node:VdomNode): VdomNode|null {\n        if(node === this.vdom.data) {\n            return null;\n        }\n        const el = this.getElementFromNode(node);\n        if(!el) {\n            return null;\n        }\n        const parentEl = el.parentNode as Element;\n        return this.getNodeFromElement(parentEl);\n    }\n\n    linkNodeToElement(node: VdomNode, element: Node) {\n        this.nodesToElements.nodes.push(node);\n        node.globalElementIndex = this.nodesToElements.elements.length;\n        this.nodesToElements.elements.push(element as Element);\n    }\n\n    getElementFromNode(node: VdomNode): Element {\n        if(node === this.vdom.data) {\n            return this.svg;\n        }\n        return this.nodesToElements.elements[node.globalElementIndex];\n    }\n\n    getNodeFromElement(element: Element): VdomNode {\n        if(element === this.svg) {\n            return this.vdom.data;\n        }\n        const elementIndex = this.nodesToElements.elements.indexOf(element);\n        return this.nodesToElements.nodes[elementIndex];\n    }\n\n    getParentNode(node: VdomNode): VdomNode|null {\n        const element = this.getElementFromNode(node);\n        const parentElement = element.parentNode as Element;\n        return this.getNodeFromElement(parentElement);\n    }\n\n    getTotalTransformation(node: VdomNode): Transformation {\n        let parent = this.getParentNode(node);\n        const parents = [node];\n\n        while(parent) {\n            parents.push(parent);\n            parent = this.getParentNode(parent);\n        }\n\n        parent = parents.pop();\n        let totalTransform: Transformation = {\n            translateX: 0,\n            translateY: 0,\n            scaleX: 0,\n            scaleY: 0,\n            rotate: 0,\n            translateBeforeScale: false\n        };\n\n        while(parent) {\n            const transform = DrawingUtils.parseTransform(parent.transform);\n            totalTransform = DrawingUtils.addTransforms(totalTransform, transform);\n            parent = parents.pop();\n        }\n\n        return totalTransform;\n    }\n}\n\nlet safeLogCount = 0;\nfunction safeLog(...logContents) {\n    \n    if(safeLogCount < 50) {\n        safeLogCount++;\n        console.log(...logContents);\n    }\n}\nfunction safeErrorLog(...logContents) {\n    \n    if(safeLogCount < 50) {\n        safeLogCount++;\n        console.error(...logContents);\n    }\n}","import DrawingUtils from \"../../canvasworker/drawingUtils\";\nimport SetPropertyQueueData from \"./set-property-queue-data\";\nimport {VDOM, VdomNode} from \"./vdom\";\nimport SetPropertyQueue from \"./set-property-queue\";\n\nexport class VdomManager {\n\n    private static ATTRIBUTES_NOT_IGNORED_WITH_IGNOREDESIGN = ['fill', 'stroke', 'opacity', 'x1', 'x2', 'y1', 'y2', 'x',\n        'y'];\n    private indexToNodeMap: {[index: number]: VdomNode} = {};\n    \n    constructor(public data: VDOM, private ignoreDesign: boolean) {\n        this.ensureNodesMapped();\n    }\n\n    ensureNodesMapped() {\n        const addToMap = (node: VdomNode) => {\n            if(node.globalElementIndex === undefined) {\n                console.error('no element index', node);\n            }\n            this.indexToNodeMap[node.globalElementIndex] = node;\n            for(const child of node.children) {\n                addToMap(child);\n            }\n        };\n        addToMap(this.data);\n    }\n\n    enableFrontendDesignProperties() {\n        this.ignoreDesign = false;\n    }\n    \n    addNode(nodeData: VdomNode, parentNodeIndex: number) {\n        let parentNode = this.getNodeFromIndex(parentNodeIndex);\n        if(!parentNode) {\n            console.error('could not add node without parent', parentNodeIndex, nodeData, JSON.stringify(Object.keys(this.indexToNodeMap)));\n            new Error('parent not found');\n            return;\n        }\n        this.applyParentStyles(parentNode, nodeData);\n        \n        parentNode.children.push(nodeData);\n        this.indexToNodeMap[nodeData.globalElementIndex] = nodeData;\n        return nodeData;\n    }\n\n    removeNode(childIndex: number, parentNodeSelector: string) {\n        let parentNode = this.getVisNodeFromSelector(parentNodeSelector);\n        if(!parentNode) {\n            if(parentNodeSelector === \"\") {\n                parentNode = this.data;\n            } else {\n                console.error(parentNode, parentNodeSelector);\n            }\n        }\n\n        parentNode.children.splice(childIndex, 1);\n        this.cachedListSelections = {}; //TODO only remove relevant cache.\n    }\n\n    applyParentStyles(parentNode: VdomNode, childNode: VdomNode) {\n        for(const style in parentNode.style) {\n            if(!childNode.style[style]) {\n                childNode.style[style] = parentNode.style[style];\n            }\n        }\n    }\n    \n    getParentNodeFromSelector(parentSelector: string) {\n        if(!parentSelector) {\n            console.error('no parent selector', parentSelector);\n        }\n        //if(setAttrQueue.hasOwnProperty(parentSelector)) {\n        let parentNode;\n        if(parentSelector === 'SVG_PARENT') {\n            parentNode = {children: [this.data]};\n        } else {\n            parentNode = this.getVisNodeFromSelector(parentSelector);\n        }\n        if(!parentNode) {\n            console.error('parent node not found with selector', parentSelector);\n        }\n        return parentNode;\n    }\n\n    applyStyleToNodeAndChildren(node: VdomNode, styleName: string, styleValue: string, specificity: number) {\n        if(!node['styleSpecificity'][styleName] || node['styleSpecificity'][styleName] <= specificity) {\n            node['style'][styleName] = styleValue;\n            node['styleSpecificity'][styleName] = specificity;\n        }\n\n        if(node.children) {\n            for(let child of node.children) {\n                this.applyStyleToNodeAndChildren(child, styleName, styleValue, specificity);\n            }\n        }\n    }\n\n    private getNodeFromIndex(index: number): VdomNode {\n        return this.indexToNodeMap[index];\n    }\n\n    private static ROUNDED_ATTRS = ['cx', 'cy'];\n\n    updatePropertiesFromQueue(setAttrQueue: SetPropertyQueueData) {\n                \n        for(let attrName in setAttrQueue) {\n            if(!setAttrQueue.hasOwnProperty(attrName)) {\n                continue;\n            }\n            const attrNameStart = attrName.substr(0, 'style;'.length);\n\n            if(this.ignoreDesign && (attrNameStart === 'style;' ||\n                VdomManager.ATTRIBUTES_NOT_IGNORED_WITH_IGNOREDESIGN.indexOf(attrName) !== -1)) {\n                continue;\n            }\n\n            let values: string[]|Int32Array;\n            let factor: number|undefined;\n\n            if('SharedArrayBuffer' in self &&\n                setAttrQueue[attrName] instanceof SharedArrayBuffer) {\n                values = new Int32Array(<ArrayBuffer> setAttrQueue[attrName]);\n                factor = 1 / SetPropertyQueue.BUFFER_PRECISION_FACTOR;\n            } else {\n                values = setAttrQueue[attrName] as string[];\n            }\n\n            for(let childIndex in values) {\n                // This skips all values that are 0 because the SharedArrayBuffer fills up with zeros.\n                //TODO(michaschwab): Find a solution for zero values.\n                if(!values.hasOwnProperty(childIndex)) {\n                    continue;\n                }\n                if(values[childIndex] === 0) {\n                    continue;\n                }\n                const index = parseInt(childIndex);\n                const childNode = this.getNodeFromIndex(index);\n                if(!childNode) {\n                    continue;\n                }\n                let value = factor ? factor * <number> values[childIndex] : values[childIndex];\n                if(attrNameStart === 'style;') {\n                    const styleName = attrName.substr('style;'.length);\n                    const specificityAttrName = 'styleSpecificity;' + styleName;\n                    try {\n                        const matchingSpecificity: number = setAttrQueue[specificityAttrName][childIndex];\n                        this.applyStyleToNodeAndChildren(childNode, styleName, <string> value, matchingSpecificity);\n                        this.updateDeducedStyles(childNode, styleName, <string> value);\n                    } catch (e) {\n                        console.error(setAttrQueue, specificityAttrName, childIndex);\n                        this.applyStyleToNodeAndChildren(childNode, styleName, <string> value, -1);\n                    }\n\n                } else {\n                    if(VdomManager.ROUNDED_ATTRS.indexOf(attrName) !== -1) {\n                        value = Math.round(<number> value);\n                    }\n                    childNode[attrName] = value;\n                    this.updateDeducedStyles(childNode, attrName, <string> value);\n                }\n            }\n        }\n    }\n\n    updateDeducedStyles(node: VdomNode, attrName: string, value: string) {\n        if(['opacity', 'fill-opacity', 'stroke-opacity', 'stroke', 'fill'].indexOf(attrName) !== -1) {\n            let stroke = node.style.stroke ? node.style.stroke : node.stroke;\n            if(stroke) {\n                let strokeOpacity = node.style['stroke-opacity'] === undefined ? node.style['opacity']\n                    : node.style['stroke-opacity'];\n                if(strokeOpacity === undefined) {\n                    strokeOpacity = node['stroke-opacity'] === undefined ? node['opacity'] : node['stroke-opacity'];\n                }\n\n                node.style['stroke-rgba'] = DrawingUtils.colorToRgba(stroke, strokeOpacity);\n            }\n        }\n    }\n    \n    private cachedListSelections: {[selector: string]: {[index: number]: VdomNode}} = {};\n    public getVisNodeFromSelector(selector: string): VdomNode|null {\n        const lastSplitPos = selector.lastIndexOf('>');\n        const selectorWithoutLast = selector.substr(0, lastSplitPos);\n        const lastPart = selector.substr(lastSplitPos + 1);\n        const parentSel = selectorWithoutLast ? this.cachedListSelections[selectorWithoutLast] : null;\n        let index = -1;\n        const nthChildPosition = lastPart.indexOf(':nth-child(');\n        if(nthChildPosition !== -1) {\n            index = parseInt(lastPart.substr(nthChildPosition + 11)); // length of ':nth-child('\n            if(parentSel && parentSel[index]) {\n                return parentSel[index];\n            }\n        }\n        \n        const selectedNodes: VdomNode[] = [];\n        this.findMatchingChildren(this.data, selector, 0, selectedNodes);\n        \n        if(selectedNodes && selectedNodes.length === 1) {\n            const el = selectedNodes[0];\n            if(index !== -1) {\n                if(!this.cachedListSelections[selectorWithoutLast]) {\n                    this.cachedListSelections[selectorWithoutLast] = {};\n                }\n                this.cachedListSelections[selectorWithoutLast][index] = el;\n            }\n            return el;\n        }\n        return null;\n    }\n    \n    public getVisNodesFromSelector(visNode: VdomNode, selector: string) {\n        const selectedNodes = [];\n        this.findMatchingChildren(visNode, selector, 0, selectedNodes);\n        return selectedNodes;\n    }\n\n    private findChildrenOfType(visNode: VdomNode, type: string, selectedNodes: VdomNode[]) {\n        const addDirectChildrenIfMatch = (node: VdomNode) => {\n            for(const child of node.children) {\n                if(child.type === type) {\n                    selectedNodes.push(child);\n                }\n                if(node.children.length !== 0) {\n                    addDirectChildrenIfMatch(child);\n                }\n            }\n        };\n        addDirectChildrenIfMatch(visNode);\n    }\n\n    public filterNodesBySelector(parentNode: VdomNode, nodes: VdomNode[], selector: string) {\n        return nodes.filter(node => VdomManager.isCssRulePartialMatch(selector, node, parentNode));\n    }\n    \n    private findMatchingChildren(visNode: VdomNode, selector: string, matchIndex: number, selectedNodes: VdomNode[],\n                                 selectedNodeSelectors: string[] = []) {\n        if(!selector && selector !== '') {\n            console.error(visNode, selector, matchIndex, selectedNodes, selectedNodeSelectors);\n            throw Error('undefined selector');\n        }\n\n        let selParts = selector.split('>').map(s => s.trim());\n        let selPart = selParts[matchIndex];\n        \n        if(matchIndex === 0 && selPart === 'svg') {\n            matchIndex++;\n            selPart = selParts[matchIndex];\n            if(matchIndex === selParts.length) {\n                selectedNodes.push(visNode);\n                selectedNodeSelectors.push(selector);\n                return;\n            }\n        }\n\n        if(selector.match(/^[a-z]+$/)) {\n            return this.findChildrenOfType(visNode, selector, selectedNodes);\n        }\n        \n        for(let i = 0; i < visNode.children.length; i++) {\n            let node = visNode.children[i];\n            let matching = false;\n            \n            if(VdomManager.isCssRulePartialMatch(selPart, node, visNode)) {\n                if(matchIndex === selParts.length - 1) {\n                    selectedNodes.push(node);\n                    selectedNodeSelectors.push(selector);\n                } else {\n                    matching = true;\n                }\n            }\n            \n            if(node.children && (matching || selParts.length < 2) && matchIndex + 1 < selParts.length) {\n                this.findMatchingChildren(node, selector, matchIndex + 1, selectedNodes, selectedNodeSelectors);\n            }\n        }\n    }\n\n    public static isCssRulePartialMatch(cssRuleSelectorPart: string, node: VdomNode, parentNode: VdomNode): boolean {\n        if(cssRuleSelectorPart.substr(0, 5) === ':not(') {\n            const newSelPart = cssRuleSelectorPart.substr(0, cssRuleSelectorPart.length - 1).substr(5);\n            return !VdomManager.isCssRulePartialMatch(newSelPart, node, parentNode);\n        }\n        if(cssRuleSelectorPart[0] === '.') { // Example: .className or .classnameA.classnameB\n            const searchClassNames = cssRuleSelectorPart.split('.');\n            searchClassNames.shift(); // remove empty first string.\n            if(node.className) {\n                let allTrue = true;\n                for(const searchClassName of searchClassNames) {\n                    if(node.className.split(' ').indexOf(searchClassName) === -1) {\n                        allTrue = false;\n                    }\n                }\n                return allTrue;\n            }\n        } else if(cssRuleSelectorPart[0] === '#') { // Example: #id\n            if(cssRuleSelectorPart.substr(1) === node.id) {\n                return true;\n            }\n        } else if(cssRuleSelectorPart.match(/^[a-z]+$/)) { // Example: rect\n            if(cssRuleSelectorPart === node.type) {\n                return true;\n            }\n        } else if(cssRuleSelectorPart.indexOf(':nth-child(') !== -1) {\n            let type = 'any';\n            let indexPart = cssRuleSelectorPart;\n\n            if(cssRuleSelectorPart[0] !== ':') {\n                type = cssRuleSelectorPart.substr(0, cssRuleSelectorPart.indexOf(':'));\n                indexPart = cssRuleSelectorPart.substr(cssRuleSelectorPart.indexOf(':'));\n            }\n\n            const targetIndex = parseInt(indexPart.substr(':nth-child('.length));\n            const index = parentNode.children.indexOf(node);\n\n            return (index === targetIndex - 1 && (type === 'any' || node.type === type));\n        }\n        else if(cssRuleSelectorPart.indexOf('.') !== -1) { // Example: rect.className\n            const cutoff = cssRuleSelectorPart.indexOf('.');\n            const typeName = cssRuleSelectorPart.substr(0, cutoff);\n            const className = cssRuleSelectorPart.substr(cutoff + 1);\n            if(typeName === node.type && node.className && node.className.split(' ').indexOf(className) !== -1) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\nlet safeLogCount = 0;\nfunction safeLog(...logContents) {\n    if(safeLogCount < 50) {\n        safeLogCount++;\n        console.log(...logContents);\n    }\n}\nfunction safeErrorLog(...logContents) {\n    if(safeLogCount < 50) {\n        safeLogCount++;\n        console.error(...logContents);\n    }\n}","import {VdomNode} from \"../util/vdom/vdom\";\nimport {VdomManager} from \"../util/vdom/vdom-manager\";\nimport DrawingUtils from \"./drawingUtils\";\nimport CanvasWorker from \"./canvasworker\";\n\ntype DrawMode = 'start'|'normal'|'end'|'forcesingle';\n\nexport default class Canvasrenderer implements CanvasWorker {\n    \n    private ctx: CanvasRenderingContext2D;\n    \n    constructor(private vdom: VdomManager, private canvas: HTMLCanvasElement,\n                private forceSingle = false, private onDrawn = () => {}) {\n        const ctx = canvas.getContext('2d');\n        if(!ctx) throw new Error('could not create canvas context');\n        \n        this.ctx = ctx;\n        this.ctx.scale(this.vdom.data.scale, this.vdom.data.scale);\n        this.ctx.save();\n        \n        this.draw();\n        \n        setTimeout(() => {\n            console.log(this.forceSingle, this.vdom.data);\n            this.draw();\n        }, 1000);\n    }\n    \n    private lastFullSecond = 0;\n    private countSinceLastFullSecond = 0;\n    \n    draw() {\n        const ctx = this.ctx;\n        \n        ctx.restore();\n        ctx.save();\n        \n        //ctx.fillStyle = '#fff';\n        //ctx.fillRect(0, 0, this.vdom.data.width, this.vdom.data.height);\n        ctx.clearRect(0, 0, this.vdom.data.width, this.vdom.data.height);\n    \n        //this.lastDrawn = null;\n        this.drawLine(null, 'start');\n        this.drawCircle(null, 'start');\n        this.drawRect(null, 'start');\n        this.drawText(null, 'start');\n        this.drawImage(null, 'start');\n\n        this.drawNodeAndChildren(this.vdom.data, this.forceSingle);\n\n        this.drawLine(null, 'end');\n        this.drawCircle(null, 'end');\n        this.drawRect(null, 'end');\n        this.drawText(null, 'end');\n        this.drawImage(null, 'end');\n        \n        this.onDrawn();\n    \n        const fullSecond = Math.round(performance.now() / 1000);\n        if(fullSecond !== this.lastFullSecond) {\n            this.lastFullSecond = fullSecond;\n            //console.log(this.countSinceLastFullSecond);\n            this.countSinceLastFullSecond = 0;\n        }\n        this.countSinceLastFullSecond++;\n    }\n    \n    private drawNodeAndChildren(elData: VdomNode, forceSingle: boolean) {\n        const ctx = this.ctx;\n\n        ctx.save();\n        const hasTransformed = this.applyTransform(elData.transform);\n\n        if(elData.transform) {\n            forceSingle = true;\n        }\n        \n        if(elData.type && elData.type !== 'g' && (!elData.style.display || elData.style.display !== 'none')) {\n            if(elData.type === 'title') {\n                return;\n            }\n            \n            if(!forceSingle) {\n                /*if(!this.lastDrawn || (this.lastDrawn && this.lastDrawn.type !== elData.type)) {\n                    if(this.lastDrawn) {\n                        this.drawSingleNode(this.lastDrawn, 'end');\n                    }\n                    this.drawSingleNode(elData, 'start');\n                }*/\n    \n                this.drawSingleNode(elData);\n            } else {\n                this.drawSingleNode(elData, 'forcesingle');\n            }\n            \n            //this.lastDrawn = elData;\n        }\n        \n        if(elData.children) {\n            for(let i = 0; i < elData.children.length; i++) {\n                this.drawNodeAndChildren(elData.children[i], forceSingle);\n            }\n        }\n        ctx.restore();\n        if(hasTransformed) {\n            //ctx.restore();\n        }\n    }\n    \n    private drawSingleNode(elData: VdomNode, mode: DrawMode = 'normal') {\n        const type: string = elData.type;\n        const drawFct = this['draw' + type.substr(0,1).toUpperCase() + type.substr(1)];\n        if(!drawFct) {\n            return console.error('no draw function yet for ', type);\n        }\n        drawFct.call(this, elData, mode);\n    }\n\n    private drawClippath(elData: VdomNode) {\n        console.warn('clippaths can not be rendered yet.')\n    }\n    \n    private circlesByColor: {[color: string]: VdomNode[]} = {};\n    private drawCircle(elData: VdomNode, mode: DrawMode = 'normal') {\n        if(mode === 'normal') {\n            let fill = elData.style.fill ? elData.style.fill : elData.fill;\n            let fillOpacity = elData.style['fill-opacity'] ? elData.style['fill-opacity'] : elData.style['opacity'];\n            if(!fill) fill = 'rgb(0,0,0)';\n            const fillRgba = DrawingUtils.colorToRgba(fill, fillOpacity);\n            const stroke = this.getStrokeStyle(elData);\n            const handle = fillRgba + ';' + stroke;\n            if(!this.circlesByColor[handle]) {\n                this.circlesByColor[handle] = [];\n            }\n            this.circlesByColor[handle].push(elData);\n        }\n        if(mode === 'start') {\n            this.circlesByColor = {};\n            return;\n        }\n        if(mode === 'end') {\n            for(let fillAndStrokeColor in this.circlesByColor) {\n                if(this.circlesByColor.hasOwnProperty(fillAndStrokeColor)) {\n                    const split = fillAndStrokeColor.split(';');\n                    const fillColor = split[0];\n                    const strokeColor = split[1];\n\n                    this.ctx.fillStyle = fillColor;\n                    let sampleData = this.circlesByColor[fillAndStrokeColor][0];\n                    const lineWidth = this.getStrokeWidth(sampleData);\n                    this.ctx.lineWidth = lineWidth !== undefined ? lineWidth : 1;\n                    this.ctx.strokeStyle = strokeColor;\n\n                    this.ctx.beginPath();\n                    for(let elData of this.circlesByColor[fillAndStrokeColor]) {\n                        const cx = elData.cx ? elData.cx : 0;\n                        const cy = elData.cy ? elData.cy : 0;\n                        const r = elData.r;\n                        this.ctx.save();\n                        this.applyTransform(elData.transform);\n                        this.ctx.moveTo(cx + r, cy);\n                        this.ctx.arc(cx, cy, r, 0, 2 * Math.PI);\n                        this.ctx.restore();\n                        //this.ctx.restore();\n                    }\n\n                    if(fillColor !== 'none'){\n                        this.ctx.fill();\n                    }\n\n                    if(sampleData.style['stroke-rgba'] && sampleData.style['stroke-rgba'] !== 'none') {\n                        this.ctx.stroke();\n                    }\n                }\n            }\n            return;\n        }\n        if(mode === 'forcesingle') {\n            let fill = elData.style.fill ? elData.style.fill : elData.fill;\n            if(!fill) fill = '#000';\n            let fillOpacity = elData.style['fill-opacity'] ? elData.style['fill-opacity'] : elData.style['opacity'];\n\n            const cx = elData.cx || 0;\n            const cy = elData.cy || 0;\n\n            this.ctx.beginPath();\n            this.ctx.fillStyle = DrawingUtils.colorToRgba(fill, fillOpacity);\n            this.ctx.strokeStyle = this.getStrokeStyle(elData);\n            this.ctx.lineWidth = this.getStrokeWidth(elData);\n            this.ctx.arc(cx, cy, elData.r, 0, 2 * Math.PI);\n            if(fill !== 'none'){\n                this.ctx.fill();\n            }\n\n            if(elData.style['stroke-rgba'] && elData.style['stroke-rgba'] !== 'none') {\n                this.ctx.stroke();\n            }\n        }\n    }\n\n    private getFillStyle(node: VdomNode, defaultColor = 'none'): string {\n        let fill = node.style.fill ? node.style.fill : node.fill;\n        let opacity = node.style['fill-opacity'] ? node.style['fill-opacity'] : node.style['opacity'];\n        fill = DrawingUtils.colorToRgba(fill, opacity, defaultColor);\n        return fill;\n    }\n\n    private getStrokeStyle(node: VdomNode): string {\n        if(node.style['stroke-rgba']) {\n            return node.style['stroke-rgba'];\n        }\n        let stroke = node.style.stroke ? node.style.stroke : node.stroke;\n        if(stroke !== undefined) {\n            let strokeOpacity = node.style['stroke-opacity'] === undefined ? node.style['opacity']\n                : node.style['stroke-opacity'];\n            if(strokeOpacity === undefined) {\n                strokeOpacity = node['stroke-opacity'] === undefined ? node['opacity'] : node['stroke-opacity'];\n            }\n\n            node.style['stroke-rgba'] = DrawingUtils.colorToRgba(stroke, strokeOpacity);\n            return node.style['stroke-rgba'];\n        }\n        return 'none';\n    }\n\n    private getStrokeWidth(node: VdomNode) {\n        const width = node.style['stroke-width'] !== undefined ? node.style['stroke-width'] : node['stroke-width'];\n        return width === undefined ? undefined : parseFloat(width);\n    }\n\n    private rectsByColor = {};\n\n    private drawRect(elData: VdomNode, mode: DrawMode = 'normal') {\n\n        if(mode === 'normal') {\n            let fill = elData.style.fill ? elData.style.fill : elData.fill;\n            let fillOpacity = elData['fill-opacity'] ? elData['fill-opacity'] : elData['opacity'];\n            let fillOpacityStyle = elData.style['fill-opacity'] ? elData.style['fill-opacity'] : elData.style['opacity'];\n\n            if(fillOpacityStyle !== undefined) {\n                fillOpacity = fillOpacityStyle;\n            }\n\n            //if(!fill) fill = '#000';\n            const fillRgba = DrawingUtils.colorToRgba(fill, fillOpacity);\n            const stroke = this.getStrokeStyle(elData);\n            const handle = fillRgba + ';' + stroke;\n            if(!this.rectsByColor[handle]) {\n                this.rectsByColor[handle] = [];\n            }\n            this.rectsByColor[handle].push(elData);\n        }\n        if(mode === 'start') {\n            this.rectsByColor = {};\n            return;\n        }\n        if(mode === 'end') {\n            for(let fillAndStrokeColor in this.rectsByColor) {\n                if(this.rectsByColor.hasOwnProperty(fillAndStrokeColor)) {\n                    const split = fillAndStrokeColor.split(';');\n                    const fillColor = split[0];\n                    const strokeColor = split[1];\n                    this.ctx.fillStyle = fillColor;\n\n                    let sampleData = this.rectsByColor[fillAndStrokeColor][0];\n                    const lineWidth = this.getStrokeWidth(sampleData);\n                    this.ctx.lineWidth = lineWidth !== undefined ? lineWidth : 1;\n                    this.ctx.strokeStyle = strokeColor;\n\n                    this.ctx.beginPath();\n                    for(let elData of this.rectsByColor[fillAndStrokeColor]) {\n                        const x = elData.x ? elData.x : 0;\n                        const y = elData.y ? elData.y : 0;\n                        this.ctx.save();\n                        this.applyTransform(elData.transform);\n                        this.ctx.moveTo(x, y);\n                        this.ctx.rect(x, y, elData.width, elData.height);\n                        this.ctx.restore();\n                        //this.ctx.restore();\n                    }\n                    if(fillColor !== 'none'){\n                        this.ctx.fill();\n                    }\n\n                    if(sampleData.style['stroke-rgba'] && sampleData.style['stroke-rgba'] !== 'none') {\n                        this.ctx.stroke();\n                    }\n                }\n            }\n            return;\n        }\n        if(mode === 'forcesingle') {\n            let fill = elData.style.fill ? elData.style.fill : elData.fill;\n            if(fill) {\n                fill = DrawingUtils.colorToRgba(fill, elData.style['fill-opacity']);\n            }\n\n            if(fill && fill !== 'none') {\n                this.ctx.fillStyle = elData.style.fill ? elData.style.fill : elData.fill;\n                this.ctx.fillRect(elData.x, elData.y, elData.width, elData.height);\n            }\n\n            let stroke = elData.style.stroke ? elData.style.stroke : elData.stroke;\n            if(stroke !== undefined) {\n                stroke = DrawingUtils.colorToRgba(stroke, elData.style['stroke-opacity']);\n                this.ctx.strokeStyle = stroke;\n                this.ctx.beginPath();\n                this.ctx.rect(elData.x, elData.y, elData.width, elData.height);\n                this.ctx.stroke();\n            }\n        }\n    }\n\n    private drawTexts: VdomNode[] = [];\n\n    private drawText(node: VdomNode, mode: DrawMode = 'normal') {\n        const drawSingle = (elData: VdomNode) => {\n            if(elData.text === '') {\n                return;\n            }\n            const fontFamily = 'Times New Roman';\n            const fontSize = elData['font-size'] ? DrawingUtils.convertSizeToPx(elData['font-size']) + 'px' : '16px';\n            let font = elData.style['font'] ? elData.style['font'] : elData['font'];\n            if(!font) {\n                font = fontSize + ' ' + fontFamily;\n            }\n            let align = elData['text-anchor'] !== undefined ? elData['text-anchor'] : elData.style['text-anchor'];\n            if(align) {\n                if(align === 'middle') {\n                    align = 'center';\n                }\n                this.ctx.textAlign = align;\n            }\n            let fill = elData['fill'] ? elData['fill'] : elData.style['fill'];\n            if(!fill) fill = '#000';\n            this.ctx.font = font;\n            this.ctx.fillStyle = fill;\n            let x = elData.x || 0;\n            let y = elData.y || 0;\n            let dx = DrawingUtils.convertSizeToPx(elData.dx, false) || 0;\n            let dy = DrawingUtils.convertSizeToPx(elData.dy, false) || 0;\n            this.ctx.fillText(elData.text, x + dx, y + dy);\n        };\n        if(mode === 'start') {\n            this.drawTexts = [];\n            return;\n        }\n        if(mode === 'normal') {\n            this.drawTexts.push(node);\n            return;\n        }\n        if(mode === 'forcesingle') {\n            return drawSingle(node);\n        }\n        if(mode === 'end') {\n            for(const currentNode of this.drawTexts) {\n                drawSingle(currentNode);\n            }\n            return;\n        }\n    }\n\n    private drawImages: VdomNode[] = [];\n\n    private drawImage(node: VdomNode, mode: DrawMode = 'normal') {\n        const drawSingle = (elData: VdomNode) => {\n            if(elData.href === '') {\n                return;\n            }\n            let fill = elData['fill'] ? elData['fill'] : elData.style['fill'];\n            if(!fill) fill = '#000';\n            this.ctx.fillStyle = fill;\n            let x = elData.x || 0;\n            let y = elData.y || 0;\n            let width = elData.width || 0;\n            let height = elData.height || 0;\n            if(elData.image) {\n                try {\n                    this.ctx.drawImage(elData.image, x, y, width, height);\n                } catch(e) {\n                    console.log(e);\n                }\n            }\n        };\n        if(mode === 'start') {\n            this.drawImages = [];\n            return;\n        }\n        if(mode === 'normal') {\n            this.drawImages.push(node);\n            return;\n        }\n        if(mode === 'forcesingle') {\n            return drawSingle(node);\n        }\n        if(mode === 'end') {\n            for(const currentNode of this.drawImages) {\n                drawSingle(currentNode);\n            }\n            return;\n        }\n    }\n\n    private drawPath(elData: VdomNode, mode: DrawMode = 'normal') {\n        if(mode !== 'normal' && mode !== 'forcesingle') return;\n\n        const fill = this.getFillStyle(elData, '#000000');\n        const stroke = this.getStrokeStyle(elData);\n        const strokeWidth = this.getStrokeWidth(elData);\n\n        let p = new Path2D(elData.d);\n        this.ctx.fillStyle = fill;\n        if(stroke !== undefined && stroke !== 'none') {\n            if(strokeWidth !== undefined) {\n                this.ctx.lineWidth = strokeWidth;\n            }\n            this.ctx.strokeStyle = stroke;\n\n            if(elData.style['stroke-linejoin']) {\n                const lineJoin = elData.style['stroke-linejoin'];\n                if(lineJoin === 'bevel' || lineJoin === 'round' || lineJoin === 'miter') {\n                    this.ctx.lineJoin = lineJoin;\n                } else {\n                    console.error('unknown line join value:', lineJoin)\n                }\n            }\n            this.ctx.stroke(p);\n        }\n\n        if(fill && fill !== 'none') {\n            this.ctx.fill(p);\n        }\n    }\n    \n    private drawTspan(elData: VdomNode, mode: DrawMode = 'normal') {\n        if(mode !== 'normal' && mode !== 'forcesingle') return;\n        \n        this.ctx.font = \"10px Arial\";\n        this.ctx.fillStyle = \"#000000\";\n        const textAlign = <CanvasTextAlign> (elData.style.textAnchor === \"middle\" ? \"center\" : elData.style.textAnchor);\n        this.ctx.textAlign = textAlign;\n        this.ctx.fillText(elData.text, elData.x, elData.y);\n    }\n\n    private drawTextpath(elData: VdomNode) {\n        console.warn('no draw function yet for textpath');\n    }\n\n    private linesByColor: {[color: string]: VdomNode[]} = {};\n    private drawLine(elData, mode: DrawMode = 'normal') {\n        if(this.vdom.data.scale > 1) {\n            //mode = 'forcesingle';\n            // In my tests, drawing a long connected path is very slow for high DPI devices.\n        }\n        if(mode === 'normal') {\n            const stroke = this.getStrokeStyle(elData);\n            const width = this.getStrokeWidth(elData);\n            if(stroke === 'none' || width === 0) {\n                return;\n            }\n            const selector = `${stroke};${width}`;\n            if(!this.linesByColor[selector]) {\n                this.linesByColor[selector] = [];\n            }\n            this.linesByColor[selector].push(elData);\n        }\n        if(mode === 'start') {\n            this.linesByColor = {};\n            return;\n        }\n        if(mode === 'end') {\n            //safeLog(Object.keys(this.linesByColor), this.linesByColor);\n            for(let selector in this.linesByColor) {\n                if(this.linesByColor.hasOwnProperty(selector)) {\n                    const split = selector.split(';');\n                    const strokeColor = split[0];\n                    const width = split[1];\n\n                    this.ctx.strokeStyle = strokeColor;\n                    this.ctx.lineWidth = parseFloat(width);\n\n                    this.ctx.beginPath();\n                    for(let elData of this.linesByColor[selector]) {\n                        if(elData.transform) {\n                            this.ctx.save();\n                            this.applyTransform(elData.transform);\n                        }\n\n                        this.ctx.moveTo(elData.x1 || 0, elData.y1 || 0);\n                        this.ctx.lineTo(elData.x2 || 0, elData.y2 || 0);\n\n                        if(elData.transform) {\n                            //this.ctx.restore();\n                            this.ctx.restore();\n                        }\n                    }\n\n                    this.ctx.stroke();\n                }\n            }\n            return;\n        }\n        if(mode === 'forcesingle') {\n            this.ctx.beginPath();\n            this.ctx.moveTo(elData.x1 || 0, elData.y1 || 0);\n            this.ctx.lineTo(elData.x2 || 0, elData.y2 || 0);\n\n            this.ctx.strokeStyle = this.getStrokeStyle(elData);\n            this.ctx.lineWidth = this.getStrokeWidth(elData);\n            //safeLog(stroke, this.ctx.strokeStyle);\n            this.ctx.stroke();\n        }\n    }\n\n    private drawDefs(node: VdomNode) {\n        //TODO figure out.\n    }\n\n    private drawMarker(node: VdomNode) {\n        //TODO figure out.\n    }\n    \n    private applyTransform(transformString: string) {\n        const transform = transformString ? DrawingUtils.parseTransform(transformString) : null;\n        if(transform) {\n            if(transform.rotate) {\n                //console.log(transform.rotate);\n            }\n            //console.log(transformString);\n            this.ctx.rotate(transform.rotate * Math.PI / 180);\n            const x = transform.translateBeforeScale ? transform.translateX : transform.translateX * transform.scaleX;\n            const y = transform.translateBeforeScale ? transform.translateY : transform.translateY * transform.scaleY;\n            this.ctx.transform(transform.scaleX, 0, 0, transform.scaleY, x, y);\n            //ctx.rotate(transform.rotate / 2 / Math.PI);\n\n            //console.log(transform.rotate);\n            return true;\n        }\n        return false;\n    }\n}\n\n\nlet safeLogCount = 0;\nfunction safeLog(...logContents) {\n    \n    if(safeLogCount < 50) {\n        safeLogCount++;\n        console.log(...logContents);\n    }\n}\nfunction safeErrorLog(...logContents) {\n    \n    if(safeLogCount < 50) {\n        safeLogCount++;\n        console.error(...logContents);\n    }\n}","import './custom';\nimport CanvasWorkerImporter = require('worker-loader?inline=true!./canvasworker');\n\nexport default CanvasWorkerImporter;","module.exports = function() {\n  return require(\"!!/home/micha/WebstormProjects/ssvg/node_modules/worker-loader/dist/workers/InlineWorker.js\")(\"!function(t){var e={};function s(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,s),i.l=!0,i.exports}s.m=t,s.c=e,s.d=function(t,e,r){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},s.r=function(t){\\\"undefined\\\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:\\\"Module\\\"}),Object.defineProperty(t,\\\"__esModule\\\",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&\\\"object\\\"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(s.r(r),Object.defineProperty(r,\\\"default\\\",{enumerable:!0,value:t}),2&e&&\\\"string\\\"!=typeof t)for(var i in t)s.d(r,i,function(e){return t[e]}.bind(null,i));return r},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,\\\"a\\\",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p=\\\"\\\",s(s.s=1)}([function(t,e,s){\\\"use strict\\\";Object.defineProperty(e,\\\"__esModule\\\",{value:!0});class r{static parseTransform(t){const e={translateX:0,translateY:0,scaleX:1,scaleY:1,rotate:0,translateBeforeScale:!1};if(t){if(\\\"string\\\"!=typeof t)return e.scaleX=t.k,e.scaleY=t.k,e.translateX=t.x,e.translateY=t.y,e;let s=t;s=s.replace(/ /g,\\\"\\\");const r=/\\\\s*translate\\\\(([-0-9.]+),([-0-9.]+)\\\\)/.exec(s);r&&(e.translateX=parseFloat(r[1]),e.translateY=parseFloat(r[2]));const i=/\\\\s*scale\\\\(([-0-9.]+)(,[-0-9.]+)?\\\\)/.exec(s);i&&(e.scaleX=parseFloat(i[1]),e.scaleY=i[2]?parseFloat(i[2].substr(1)):parseFloat(i[1]));const o=/\\\\s*rotate\\\\(([-0-9.]+)\\\\)/.exec(s);o&&(e.rotate=parseFloat(o[1])),/\\\\s*translate\\\\(([-0-9.]+),([-0-9.]+)\\\\)scale\\\\(([-0-9.,]+)\\\\)/.exec(s)&&(e.translateBeforeScale=!0);const l=/\\\\s*matrix\\\\(([-0-9.]+),([-0-9.]+),([-0-9.]+),([-0-9.]+),([-0-9.]+),([-0-9.]+)\\\\)/.exec(s);l&&(e.scaleX=parseFloat(l[1]),e.scaleY=parseFloat(l[4]),e.translateX=parseFloat(l[5]),e.translateY=parseFloat(l[6]))}return e}static addTransforms(t,e){return{translateX:t.translateX+e.translateX,translateY:t.translateY+e.translateY,scaleX:t.scaleX*e.scaleX,scaleY:t.scaleY*e.scaleY,rotate:t.rotate+e.rotate,translateBeforeScale:!1}}static convertSizeToPx(t,e=!0){const s=e?14:void 0;return void 0===t?s:\\\"number\\\"==typeof t?t:\\\"em\\\"===t.substr(-2)?Math.round(12*parseFloat(t)):\\\"px\\\"===t.substr(-2)?parseInt(t):t.match(/^[0-9]+$/)?parseInt(t):(console.warn(\\\"size in unsupported format: \\\",t),s)}static colorToRgba(t,e=1,s=\\\"none\\\"){if(\\\"none\\\"===t)return t;if(!t)return s;if(t=r.CssNamedColorToHex(t),1===e&&\\\"string\\\"==typeof t)return t;if(\\\"string\\\"==typeof t&&\\\"#\\\"===t[0]){let s;if(/^#([A-Fa-f0-9]{3}){1,2}$/.test(t))return s=t.substring(1),3==s.length&&(s=s[0]+s[0]+s[1]+s[1]+s[2]+s[2]),s=\\\"0x\\\"+s,\\\"rgba(\\\"+[s>>16&255,s>>8&255,255&s].join(\\\",\\\")+\\\",\\\"+e+\\\")\\\";throw new Error(\\\"Bad Hex\\\")}if(\\\"object\\\"==typeof t){if(\\\"r\\\"in t)return\\\"rgba(\\\"+t.r+\\\",\\\"+t.g+\\\",\\\"+t.b+\\\",\\\"+e+\\\")\\\";if(\\\"h\\\"in t){const s=r.hslToRgb(t.h/360,t.s,t.l);return\\\"rgba(\\\"+s.r+\\\",\\\"+s.g+\\\",\\\"+s.b+\\\",\\\"+e+\\\")\\\"}}else if(\\\"rgb(\\\"===t.substr(0,4))return t.substr(0,t.length-1).replace(\\\"rgb\\\",\\\"rgba\\\")+\\\", \\\"+e+\\\")\\\";return t}static hslToRgb(t,e,s){var r,i,o;if(0==e)r=i=o=s;else{var l=function(t,e,s){return s<0&&(s+=1),s>1&&(s-=1),s<1/6?t+6*(e-t)*s:s<.5?e:s<2/3?t+(e-t)*(2/3-s)*6:t},n=s<.5?s*(1+e):s+e-s*e,a=2*s-n;r=l(a,n,t+1/3),i=l(a,n,t),o=l(a,n,t-1/3)}return{r:Math.round(255*r),g:Math.round(255*i),b:Math.round(255*o)}}static CssNamedColorToHex(t){return\\\"red\\\"===t?\\\"#ff0000\\\":\\\"steelblue\\\"===t?\\\"#4682b4\\\":\\\"black\\\"===t?\\\"#000000\\\":t}static getCssRuleSpecificityNumber(t){let e=0;t=t.replace(/ >/g,\\\">\\\").replace(/> /g,\\\">\\\");const s=[].concat.apply([],t.split(\\\" \\\").map(t=>t.split(\\\">\\\")));for(const t of s){e+=100;const s=t[0];if(\\\"#\\\"===s)e+=1e3;else if(\\\".\\\"===s){const s=t.split(\\\".\\\").length-1;e+=Math.min(900,100*s)}}return e}}e.default=r},function(t,e,s){\\\"use strict\\\";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,\\\"__esModule\\\",{value:!0});const i=s(2),o=r(s(4));let l;const n=self;let a;n.onmessage=function(t){const e=t.data;if(e&&e.cmd)switch(e.cmd){case\\\"INIT\\\":a=new i.VdomManager(e.data.visData,!1);const t=!!e.data.safeMode;l=new o.default(a,e.data.canvas,t,()=>{n.postMessage({msg:\\\"DRAWN\\\"})});break;case\\\"UPDATE_NODES\\\":const s=e;for(let t of s.data.enterExit)if(\\\"ENTER\\\"===t.cmd){t.keepChildren||(t.node.children=[]);const e=a.addNode(t.node,t.parentNodeIndex);l.addNode&&l.addNode(e)}else\\\"EXIT\\\"===t.cmd&&a.removeNode(t.childIndex,t.parentNodeSelector);l.updatePropertiesFromQueue?l.updatePropertiesFromQueue(s.data.update):a.updatePropertiesFromQueue(s.data.update),l.draw();break;default:console.error(\\\"did not find command \\\",e.cmd)}}},function(t,e,s){\\\"use strict\\\";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,\\\"__esModule\\\",{value:!0});const i=r(s(0)),o=r(s(3));class l{constructor(t,e){this.data=t,this.ignoreDesign=e,this.indexToNodeMap={},this.cachedListSelections={},this.ensureNodesMapped()}ensureNodesMapped(){const t=e=>{void 0===e.globalElementIndex&&console.error(\\\"no element index\\\",e),this.indexToNodeMap[e.globalElementIndex]=e;for(const s of e.children)t(s)};t(this.data)}enableFrontendDesignProperties(){this.ignoreDesign=!1}addNode(t,e){let s=this.getNodeFromIndex(e);return s?(this.applyParentStyles(s,t),s.children.push(t),this.indexToNodeMap[t.globalElementIndex]=t,t):(console.error(\\\"could not add node without parent\\\",e,t,JSON.stringify(Object.keys(this.indexToNodeMap))),void new Error(\\\"parent not found\\\"))}removeNode(t,e){let s=this.getVisNodeFromSelector(e);s||(\\\"\\\"===e?s=this.data:console.error(s,e)),s.children.splice(t,1),this.cachedListSelections={}}applyParentStyles(t,e){for(const s in t.style)e.style[s]||(e.style[s]=t.style[s])}getParentNodeFromSelector(t){let e;return t||console.error(\\\"no parent selector\\\",t),e=\\\"SVG_PARENT\\\"===t?{children:[this.data]}:this.getVisNodeFromSelector(t),e||console.error(\\\"parent node not found with selector\\\",t),e}applyStyleToNodeAndChildren(t,e,s,r){if((!t.styleSpecificity[e]||t.styleSpecificity[e]<=r)&&(t.style[e]=s,t.styleSpecificity[e]=r),t.children)for(let i of t.children)this.applyStyleToNodeAndChildren(i,e,s,r)}getNodeFromIndex(t){return this.indexToNodeMap[t]}updatePropertiesFromQueue(t){for(let e in t){if(!t.hasOwnProperty(e))continue;const s=e.substr(0,\\\"style;\\\".length);if(this.ignoreDesign&&(\\\"style;\\\"===s||-1!==l.ATTRIBUTES_NOT_IGNORED_WITH_IGNOREDESIGN.indexOf(e)))continue;let r,i;\\\"SharedArrayBuffer\\\"in self&&t[e]instanceof SharedArrayBuffer?(r=new Int32Array(t[e]),i=1/o.default.BUFFER_PRECISION_FACTOR):r=t[e];for(let o in r){if(!r.hasOwnProperty(o))continue;if(0===r[o])continue;const n=parseInt(o),a=this.getNodeFromIndex(n);if(!a)continue;let c=i?i*r[o]:r[o];if(\\\"style;\\\"===s){const s=e.substr(\\\"style;\\\".length),r=\\\"styleSpecificity;\\\"+s;try{const e=t[r][o];this.applyStyleToNodeAndChildren(a,s,c,e),this.updateDeducedStyles(a,s,c)}catch(e){console.error(t,r,o),this.applyStyleToNodeAndChildren(a,s,c,-1)}}else-1!==l.ROUNDED_ATTRS.indexOf(e)&&(c=Math.round(c)),a[e]=c,this.updateDeducedStyles(a,e,c)}}}updateDeducedStyles(t,e,s){if(-1!==[\\\"opacity\\\",\\\"fill-opacity\\\",\\\"stroke-opacity\\\",\\\"stroke\\\",\\\"fill\\\"].indexOf(e)){let e=t.style.stroke?t.style.stroke:t.stroke;if(e){let s=void 0===t.style[\\\"stroke-opacity\\\"]?t.style.opacity:t.style[\\\"stroke-opacity\\\"];void 0===s&&(s=void 0===t[\\\"stroke-opacity\\\"]?t.opacity:t[\\\"stroke-opacity\\\"]),t.style[\\\"stroke-rgba\\\"]=i.default.colorToRgba(e,s)}}}getVisNodeFromSelector(t){const e=t.lastIndexOf(\\\">\\\"),s=t.substr(0,e),r=t.substr(e+1),i=s?this.cachedListSelections[s]:null;let o=-1;const l=r.indexOf(\\\":nth-child(\\\");if(-1!==l&&(o=parseInt(r.substr(l+11)),i&&i[o]))return i[o];const n=[];if(this.findMatchingChildren(this.data,t,0,n),n&&1===n.length){const t=n[0];return-1!==o&&(this.cachedListSelections[s]||(this.cachedListSelections[s]={}),this.cachedListSelections[s][o]=t),t}return null}getVisNodesFromSelector(t,e){const s=[];return this.findMatchingChildren(t,e,0,s),s}findChildrenOfType(t,e,s){const r=t=>{for(const i of t.children)i.type===e&&s.push(i),0!==t.children.length&&r(i)};r(t)}filterNodesBySelector(t,e,s){return e.filter(e=>l.isCssRulePartialMatch(s,e,t))}findMatchingChildren(t,e,s,r,i=[]){if(!e&&\\\"\\\"!==e)throw console.error(t,e,s,r,i),Error(\\\"undefined selector\\\");let o=e.split(\\\">\\\").map(t=>t.trim()),n=o[s];if(0===s&&\\\"svg\\\"===n&&(n=o[++s],s===o.length))return r.push(t),void i.push(e);if(e.match(/^[a-z]+$/))return this.findChildrenOfType(t,e,r);for(let a=0;a<t.children.length;a++){let c=t.children[a],d=!1;l.isCssRulePartialMatch(n,c,t)&&(s===o.length-1?(r.push(c),i.push(e)):d=!0),c.children&&(d||o.length<2)&&s+1<o.length&&this.findMatchingChildren(c,e,s+1,r,i)}}static isCssRulePartialMatch(t,e,s){if(\\\":not(\\\"===t.substr(0,5)){const r=t.substr(0,t.length-1).substr(5);return!l.isCssRulePartialMatch(r,e,s)}if(\\\".\\\"===t[0]){const s=t.split(\\\".\\\");if(s.shift(),e.className){let t=!0;for(const r of s)-1===e.className.split(\\\" \\\").indexOf(r)&&(t=!1);return t}}else if(\\\"#\\\"===t[0]){if(t.substr(1)===e.id)return!0}else if(t.match(/^[a-z]+$/)){if(t===e.type)return!0}else{if(-1!==t.indexOf(\\\":nth-child(\\\")){let r=\\\"any\\\",i=t;\\\":\\\"!==t[0]&&(r=t.substr(0,t.indexOf(\\\":\\\")),i=t.substr(t.indexOf(\\\":\\\")));const o=parseInt(i.substr(\\\":nth-child(\\\".length));return s.children.indexOf(e)===o-1&&(\\\"any\\\"===r||e.type===r)}if(-1!==t.indexOf(\\\".\\\")){const s=t.indexOf(\\\".\\\"),r=t.substr(0,s),i=t.substr(s+1);if(r===e.type&&e.className&&-1!==e.className.split(\\\" \\\").indexOf(i))return!0}}return!1}}e.VdomManager=l,l.ATTRIBUTES_NOT_IGNORED_WITH_IGNOREDESIGN=[\\\"fill\\\",\\\"stroke\\\",\\\"opacity\\\",\\\"x1\\\",\\\"x2\\\",\\\"y1\\\",\\\"y2\\\",\\\"x\\\",\\\"y\\\"],l.ROUNDED_ATTRS=[\\\"cx\\\",\\\"cy\\\"]},function(t,e,s){\\\"use strict\\\";Object.defineProperty(e,\\\"__esModule\\\",{value:!0});class r{constructor(){this.data={raw:{},shared:{}},this.useSharedArrayFor=[\\\"cx\\\",\\\"cy\\\",\\\"x1\\\",\\\"x2\\\",\\\"y1\\\",\\\"y2\\\",\\\"x\\\",\\\"y\\\"]}ensureInitialized(t,e){if(\\\"class\\\"===t&&(t=\\\"className\\\"),e&&-1!==this.useSharedArrayFor.indexOf(t)){if(!this.data.shared[t]){const e=1e4,s=new SharedArrayBuffer(Int32Array.BYTES_PER_ELEMENT*e),i=new Int32Array(s);if(this.data.raw[t]&&!(this.data.raw[t]instanceof SharedArrayBuffer)){this.data.raw[t].forEach((t,e)=>{i[e]=parseFloat(t)*r.BUFFER_PRECISION_FACTOR})}this.data.raw[t]=s,this.data.shared[t]=i}}else this.data.raw[t]||(this.data.raw[t]=[])}set(t,e,s,i){if(\\\"class\\\"===e&&(e=\\\"className\\\"),void 0===t.globalElementIndex)throw console.error(\\\"No index\\\",t),new Error(\\\"Element has no index\\\");const o=t.globalElementIndex,l=i&&-1!==this.useSharedArrayFor.indexOf(e)?\\\"shared\\\":\\\"raw\\\";try{\\\"shared\\\"===l&&(s*=r.BUFFER_PRECISION_FACTOR),this.data[l][e][o]=s}catch(s){console.log(s),console.log(this.data,l,e,t,o)}}get(t,e){const s=t.globalElementIndex;return this.data.raw[e][s]}getData(){return this.data.raw}clearData(){this.data={raw:{},shared:{}}}}e.default=r,r.BUFFER_PRECISION_FACTOR=10},function(t,e,s){\\\"use strict\\\";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,\\\"__esModule\\\",{value:!0});const i=r(s(0));e.default=class{constructor(t,e,s=!1,r=(()=>{})){this.vdom=t,this.canvas=e,this.forceSingle=s,this.onDrawn=r,this.lastFullSecond=0,this.countSinceLastFullSecond=0,this.circlesByColor={},this.rectsByColor={},this.drawTexts=[],this.drawImages=[],this.linesByColor={};const i=e.getContext(\\\"2d\\\");if(!i)throw new Error(\\\"could not create canvas context\\\");this.ctx=i,this.ctx.scale(this.vdom.data.scale,this.vdom.data.scale),this.ctx.save(),this.draw(),setTimeout(()=>{console.log(this.forceSingle,this.vdom.data),this.draw()},1e3)}draw(){const t=this.ctx;t.restore(),t.save(),t.clearRect(0,0,this.vdom.data.width,this.vdom.data.height),this.drawLine(null,\\\"start\\\"),this.drawCircle(null,\\\"start\\\"),this.drawRect(null,\\\"start\\\"),this.drawText(null,\\\"start\\\"),this.drawImage(null,\\\"start\\\"),this.drawNodeAndChildren(this.vdom.data,this.forceSingle),this.drawLine(null,\\\"end\\\"),this.drawCircle(null,\\\"end\\\"),this.drawRect(null,\\\"end\\\"),this.drawText(null,\\\"end\\\"),this.drawImage(null,\\\"end\\\"),this.onDrawn();const e=Math.round(performance.now()/1e3);e!==this.lastFullSecond&&(this.lastFullSecond=e,this.countSinceLastFullSecond=0),this.countSinceLastFullSecond++}drawNodeAndChildren(t,e){const s=this.ctx;s.save();this.applyTransform(t.transform);if(t.transform&&(e=!0),t.type&&\\\"g\\\"!==t.type&&(!t.style.display||\\\"none\\\"!==t.style.display)){if(\\\"title\\\"===t.type)return;e?this.drawSingleNode(t,\\\"forcesingle\\\"):this.drawSingleNode(t)}if(t.children)for(let s=0;s<t.children.length;s++)this.drawNodeAndChildren(t.children[s],e);s.restore()}drawSingleNode(t,e=\\\"normal\\\"){const s=t.type,r=this[\\\"draw\\\"+s.substr(0,1).toUpperCase()+s.substr(1)];if(!r)return console.error(\\\"no draw function yet for \\\",s);r.call(this,t,e)}drawClippath(t){console.warn(\\\"clippaths can not be rendered yet.\\\")}drawCircle(t,e=\\\"normal\\\"){if(\\\"normal\\\"===e){let e=t.style.fill?t.style.fill:t.fill,s=t.style[\\\"fill-opacity\\\"]?t.style[\\\"fill-opacity\\\"]:t.style.opacity;e||(e=\\\"rgb(0,0,0)\\\");const r=i.default.colorToRgba(e,s)+\\\";\\\"+this.getStrokeStyle(t);this.circlesByColor[r]||(this.circlesByColor[r]=[]),this.circlesByColor[r].push(t)}if(\\\"start\\\"!==e){if(\\\"end\\\"!==e){if(\\\"forcesingle\\\"===e){let e=t.style.fill?t.style.fill:t.fill;e||(e=\\\"#000\\\");let s=t.style[\\\"fill-opacity\\\"]?t.style[\\\"fill-opacity\\\"]:t.style.opacity;const r=t.cx||0,o=t.cy||0;this.ctx.beginPath(),this.ctx.fillStyle=i.default.colorToRgba(e,s),this.ctx.strokeStyle=this.getStrokeStyle(t),this.ctx.lineWidth=this.getStrokeWidth(t),this.ctx.arc(r,o,t.r,0,2*Math.PI),\\\"none\\\"!==e&&this.ctx.fill(),t.style[\\\"stroke-rgba\\\"]&&\\\"none\\\"!==t.style[\\\"stroke-rgba\\\"]&&this.ctx.stroke()}}else for(let t in this.circlesByColor)if(this.circlesByColor.hasOwnProperty(t)){const e=t.split(\\\";\\\"),s=e[0],r=e[1];this.ctx.fillStyle=s;let i=this.circlesByColor[t][0];const o=this.getStrokeWidth(i);this.ctx.lineWidth=void 0!==o?o:1,this.ctx.strokeStyle=r,this.ctx.beginPath();for(let e of this.circlesByColor[t]){const t=e.cx?e.cx:0,s=e.cy?e.cy:0,r=e.r;this.ctx.save(),this.applyTransform(e.transform),this.ctx.moveTo(t+r,s),this.ctx.arc(t,s,r,0,2*Math.PI),this.ctx.restore()}\\\"none\\\"!==s&&this.ctx.fill(),i.style[\\\"stroke-rgba\\\"]&&\\\"none\\\"!==i.style[\\\"stroke-rgba\\\"]&&this.ctx.stroke()}}else this.circlesByColor={}}getFillStyle(t,e=\\\"none\\\"){let s=t.style.fill?t.style.fill:t.fill,r=t.style[\\\"fill-opacity\\\"]?t.style[\\\"fill-opacity\\\"]:t.style.opacity;return s=i.default.colorToRgba(s,r,e),s}getStrokeStyle(t){if(t.style[\\\"stroke-rgba\\\"])return t.style[\\\"stroke-rgba\\\"];let e=t.style.stroke?t.style.stroke:t.stroke;if(void 0!==e){let s=void 0===t.style[\\\"stroke-opacity\\\"]?t.style.opacity:t.style[\\\"stroke-opacity\\\"];return void 0===s&&(s=void 0===t[\\\"stroke-opacity\\\"]?t.opacity:t[\\\"stroke-opacity\\\"]),t.style[\\\"stroke-rgba\\\"]=i.default.colorToRgba(e,s),t.style[\\\"stroke-rgba\\\"]}return\\\"none\\\"}getStrokeWidth(t){const e=void 0!==t.style[\\\"stroke-width\\\"]?t.style[\\\"stroke-width\\\"]:t[\\\"stroke-width\\\"];return void 0===e?void 0:parseFloat(e)}drawRect(t,e=\\\"normal\\\"){if(\\\"normal\\\"===e){let e=t.style.fill?t.style.fill:t.fill,s=t[\\\"fill-opacity\\\"]?t[\\\"fill-opacity\\\"]:t.opacity,r=t.style[\\\"fill-opacity\\\"]?t.style[\\\"fill-opacity\\\"]:t.style.opacity;void 0!==r&&(s=r);const o=i.default.colorToRgba(e,s)+\\\";\\\"+this.getStrokeStyle(t);this.rectsByColor[o]||(this.rectsByColor[o]=[]),this.rectsByColor[o].push(t)}if(\\\"start\\\"!==e){if(\\\"end\\\"!==e){if(\\\"forcesingle\\\"===e){let e=t.style.fill?t.style.fill:t.fill;e&&(e=i.default.colorToRgba(e,t.style[\\\"fill-opacity\\\"])),e&&\\\"none\\\"!==e&&(this.ctx.fillStyle=t.style.fill?t.style.fill:t.fill,this.ctx.fillRect(t.x,t.y,t.width,t.height));let s=t.style.stroke?t.style.stroke:t.stroke;void 0!==s&&(s=i.default.colorToRgba(s,t.style[\\\"stroke-opacity\\\"]),this.ctx.strokeStyle=s,this.ctx.beginPath(),this.ctx.rect(t.x,t.y,t.width,t.height),this.ctx.stroke())}}else for(let t in this.rectsByColor)if(this.rectsByColor.hasOwnProperty(t)){const e=t.split(\\\";\\\"),s=e[0],r=e[1];this.ctx.fillStyle=s;let i=this.rectsByColor[t][0];const o=this.getStrokeWidth(i);this.ctx.lineWidth=void 0!==o?o:1,this.ctx.strokeStyle=r,this.ctx.beginPath();for(let e of this.rectsByColor[t]){const t=e.x?e.x:0,s=e.y?e.y:0;this.ctx.save(),this.applyTransform(e.transform),this.ctx.moveTo(t,s),this.ctx.rect(t,s,e.width,e.height),this.ctx.restore()}\\\"none\\\"!==s&&this.ctx.fill(),i.style[\\\"stroke-rgba\\\"]&&\\\"none\\\"!==i.style[\\\"stroke-rgba\\\"]&&this.ctx.stroke()}}else this.rectsByColor={}}drawText(t,e=\\\"normal\\\"){const s=t=>{if(\\\"\\\"===t.text)return;const e=t[\\\"font-size\\\"]?i.default.convertSizeToPx(t[\\\"font-size\\\"])+\\\"px\\\":\\\"16px\\\";let s=t.style.font?t.style.font:t.font;s||(s=e+\\\" Times New Roman\\\");let r=void 0!==t[\\\"text-anchor\\\"]?t[\\\"text-anchor\\\"]:t.style[\\\"text-anchor\\\"];r&&(\\\"middle\\\"===r&&(r=\\\"center\\\"),this.ctx.textAlign=r);let o=t.fill?t.fill:t.style.fill;o||(o=\\\"#000\\\"),this.ctx.font=s,this.ctx.fillStyle=o;let l=t.x||0,n=t.y||0,a=i.default.convertSizeToPx(t.dx,!1)||0,c=i.default.convertSizeToPx(t.dy,!1)||0;this.ctx.fillText(t.text,l+a,n+c)};if(\\\"start\\\"!==e)if(\\\"normal\\\"!==e){if(\\\"forcesingle\\\"===e)return s(t);if(\\\"end\\\"!==e);else for(const t of this.drawTexts)s(t)}else this.drawTexts.push(t);else this.drawTexts=[]}drawImage(t,e=\\\"normal\\\"){const s=t=>{if(\\\"\\\"===t.href)return;let e=t.fill?t.fill:t.style.fill;e||(e=\\\"#000\\\"),this.ctx.fillStyle=e;let s=t.x||0,r=t.y||0,i=t.width||0,o=t.height||0;if(t.image)try{this.ctx.drawImage(t.image,s,r,i,o)}catch(t){console.log(t)}};if(\\\"start\\\"!==e)if(\\\"normal\\\"!==e){if(\\\"forcesingle\\\"===e)return s(t);if(\\\"end\\\"!==e);else for(const t of this.drawImages)s(t)}else this.drawImages.push(t);else this.drawImages=[]}drawPath(t,e=\\\"normal\\\"){if(\\\"normal\\\"!==e&&\\\"forcesingle\\\"!==e)return;const s=this.getFillStyle(t,\\\"#000000\\\"),r=this.getStrokeStyle(t),i=this.getStrokeWidth(t);let o=new Path2D(t.d);if(this.ctx.fillStyle=s,void 0!==r&&\\\"none\\\"!==r){if(void 0!==i&&(this.ctx.lineWidth=i),this.ctx.strokeStyle=r,t.style[\\\"stroke-linejoin\\\"]){const e=t.style[\\\"stroke-linejoin\\\"];\\\"bevel\\\"===e||\\\"round\\\"===e||\\\"miter\\\"===e?this.ctx.lineJoin=e:console.error(\\\"unknown line join value:\\\",e)}this.ctx.stroke(o)}s&&\\\"none\\\"!==s&&this.ctx.fill(o)}drawTspan(t,e=\\\"normal\\\"){if(\\\"normal\\\"!==e&&\\\"forcesingle\\\"!==e)return;this.ctx.font=\\\"10px Arial\\\",this.ctx.fillStyle=\\\"#000000\\\";const s=\\\"middle\\\"===t.style.textAnchor?\\\"center\\\":t.style.textAnchor;this.ctx.textAlign=s,this.ctx.fillText(t.text,t.x,t.y)}drawTextpath(t){console.warn(\\\"no draw function yet for textpath\\\")}drawLine(t,e=\\\"normal\\\"){if(this.vdom.data.scale,\\\"normal\\\"===e){const e=this.getStrokeStyle(t),s=this.getStrokeWidth(t);if(\\\"none\\\"===e||0===s)return;const r=`${e};${s}`;this.linesByColor[r]||(this.linesByColor[r]=[]),this.linesByColor[r].push(t)}if(\\\"start\\\"!==e){if(\\\"end\\\"!==e)\\\"forcesingle\\\"===e&&(this.ctx.beginPath(),this.ctx.moveTo(t.x1||0,t.y1||0),this.ctx.lineTo(t.x2||0,t.y2||0),this.ctx.strokeStyle=this.getStrokeStyle(t),this.ctx.lineWidth=this.getStrokeWidth(t),this.ctx.stroke());else for(let t in this.linesByColor)if(this.linesByColor.hasOwnProperty(t)){const e=t.split(\\\";\\\"),s=e[0],r=e[1];this.ctx.strokeStyle=s,this.ctx.lineWidth=parseFloat(r),this.ctx.beginPath();for(let e of this.linesByColor[t])e.transform&&(this.ctx.save(),this.applyTransform(e.transform)),this.ctx.moveTo(e.x1||0,e.y1||0),this.ctx.lineTo(e.x2||0,e.y2||0),e.transform&&this.ctx.restore();this.ctx.stroke()}}else this.linesByColor={}}drawDefs(t){}drawMarker(t){}applyTransform(t){const e=t?i.default.parseTransform(t):null;if(e){e.rotate,this.ctx.rotate(e.rotate*Math.PI/180);const t=e.translateBeforeScale?e.translateX:e.translateX*e.scaleX,s=e.translateBeforeScale?e.translateY:e.translateY*e.scaleY;return this.ctx.transform(e.scaleX,0,0,e.scaleY,t,s),!0}return!1}}}]);\\n//# sourceMappingURL=88f0444a58ddaa2cbcb5.worker.js.map\", __webpack_public_path__ + \"88f0444a58ddaa2cbcb5.worker.js\");\n};","'use strict';\n\n// http://stackoverflow.com/questions/10343913/how-to-create-a-web-worker-from-a-string\n\nvar URL = window.URL || window.webkitURL;\n\nmodule.exports = function (content, url) {\n  try {\n    try {\n      var blob;\n\n      try {\n        // BlobBuilder = Deprecated, but widely implemented\n        var BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;\n\n        blob = new BlobBuilder();\n\n        blob.append(content);\n\n        blob = blob.getBlob();\n      } catch (e) {\n        // The proposed API\n        blob = new Blob([content]);\n      }\n\n      return new Worker(URL.createObjectURL(blob));\n    } catch (e) {\n      return new Worker('data:application/javascript,' + encodeURIComponent(content));\n    }\n  } catch (e) {\n    if (!url) {\n      throw Error('Inline worker is not supported');\n    }\n\n    return new Worker(url);\n  }\n};"],"sourceRoot":""}