{"version":3,"sources":["webpack://SSVG/webpack/universalModuleDefinition","webpack://SSVG/webpack/bootstrap","webpack://SSVG/./canvasworker/drawingUtils.ts","webpack://SSVG/./frontend/exporter.ts","webpack://SSVG/./frontend/ssvg.ts","webpack://SSVG/./frontend/domhandler.ts","webpack://SSVG/./util/vdom/vdom-manager.ts","webpack://SSVG/./canvasworker/canvasrenderer.ts","webpack://SSVG/./canvasworker/index.ts","webpack://SSVG/./canvasworker/canvasworker.ts","webpack://SSVG/./node_modules/worker-loader/dist/workers/InlineWorker.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","DrawingUtils","transform","transformObject","translateX","translateY","scaleX","scaleY","rotate","translateBeforeScale","rotateLast","transformString","replace","translate","exec","parseFloat","scale","substr","matrix","transformA","transformB","size","fallback","defaultValue","undefined","Math","round","parseInt","match","console","warn","color","opacity","defaultColor","cacheKey","rgbaCache","CssNamedColorToHex","rgba","test","Error","substring","length","join","g","b","rgb","hslToRgb","h","hue2rgb","q","COLOR_HEXES","toUpperCase","selector","specificity","parts","concat","apply","split","map","part","start","countClasses","min","ALICEBLUE","ANTIQUEWHITE","AQUA","AQUAMARINE","AZURE","BEIGE","BISQUE","BLACK","BLANCHEDALMOND","BLUE","BLUEVIOLET","BROWN","BURLYWOOD","CADETBLUE","CHARTREUSE","CHOCOLATE","CORAL","CORNFLOWERBLUE","CORNSILK","CRIMSON","CYAN","DARKBLUE","DARKCYAN","DARKGOLDENROD","DARKGRAY","DARKGREY","DARKGREEN","DARKKHAKI","DARKMAGENTA","DARKOLIVEGREEN","DARKORANGE","DARKORCHID","DARKRED","DARKSALMON","DARKSEAGREEN","DARKSLATEBLUE","DARKSLATEGRAY","DARKSLATEGREY","DARKTURQUOISE","DARKVIOLET","DEEPPINK","DEEPSKYBLUE","DIMGRAY","DIMGREY","DODGERBLUE","FIREBRICK","FLORALWHITE","FORESTGREEN","FUCHSIA","GAINSBORO","GHOSTWHITE","GOLD","GOLDENROD","GRAY","GREY","GREEN","GREENYELLOW","HONEYDEW","HOTPINK","INDIANRED","INDIGO","IVORY","KHAKI","LAVENDER","LAVENDERBLUSH","LAWNGREEN","LEMONCHIFFON","LIGHTBLUE","LIGHTCORAL","LIGHTCYAN","LIGHTGOLDENRODYELLOW","LIGHTGRAY","LIGHTGREY","LIGHTGREEN","LIGHTPINK","LIGHTSALMON","LIGHTSEAGREEN","LIGHTSKYBLUE","LIGHTSLATEGRAY","LIGHTSLATEGREY","LIGHTSTEELBLUE","LIGHTYELLOW","LIME","LIMEGREEN","LINEN","MAGENTA","MAROON","MEDIUMAQUAMARINE","MEDIUMBLUE","MEDIUMORCHID","MEDIUMPURPLE","MEDIUMSEAGREEN","MEDIUMSLATEBLUE","MEDIUMSPRINGGREEN","MEDIUMTURQUOISE","MEDIUMVIOLETRED","MIDNIGHTBLUE","MINTCREAM","MISTYROSE","MOCCASIN","NAVAJOWHITE","NAVY","OLDLACE","OLIVE","OLIVEDRAB","ORANGE","ORANGERED","ORCHID","PALEGOLDENROD","PALEGREEN","PALETURQUOISE","PALEVIOLETRED","PAPAYAWHIP","PEACHPUFF","PERU","PINK","PLUM","POWDERBLUE","PURPLE","REBECCAPURPLE","RED","ROSYBROWN","ROYALBLUE","SADDLEBROWN","SALMON","SANDYBROWN","SEAGREEN","SEASHELL","SIENNA","SILVER","SKYBLUE","SLATEBLUE","SLATEGRAY","SLATEGREY","SNOW","SPRINGGREEN","STEELBLUE","TAN","TEAL","THISTLE","TOMATO","TURQUOISE","VIOLET","WHEAT","WHITE","WHITESMOKE","YELLOW","YELLOWGREEN","SSVG","options","unassignedNodes","interactionSelections","svgAssignedAndSizeSet","lastCanvasDrawTimes","enterExitQueue","safeMode","useWorker","getFps","this","maxPixelRatio","canvas","document","createElement","worker","onmessage","e","data","msg","logDrawn","animationFrame","requestAnimationFrame","updateCanvas","raf","updateFps","captureD3On","svg","setupElementsIfSvgExists","addEventListener","propagateMouseEvent","propagateTouchEvent","lastHovered","hoveredElement","dispatchEvent","MouseEvent","duplicateTouchEvent","propagateWheelEvent","replaceNativeRemoveChild","replaceNativeAttribute","replaceNativePathFunctions","replaceNativeCreateElement","replaceNativeAppendChild","replaceD3Attr","replaceNativeSelect","replaceNativeGetComputedStyle","replaceD3Select","replaceD3Remove","setTimeout","log","vdom","svgEl","getElementsByTagName","urlConnector","location","href","indexOf","svgSwitchUrl","svgSwitchComment","createComment","parent","parentElement","nextSibling","next","insertBefore","appendChild","domHandler","getVDom","setCanvasSize","useAttrQueue","queue","sendUpdateToWorker","renderer","updatePropertiesFromQueue","draw","nodeUpdated","width","height","devicePixelRatio","style","offscreen","transferControlToOffscreen","sendToWorker","cmd","visData","ensureNodesMapped","element","isWithinSvg","parentEl","parentNode","d3","originalOn","selection","on","me","el","_parents","children","push","arguments","getReplacement","original","elements","_groups","filter","safeLog","childElements","node","getVisNode","childNodes","getVisNodesFromSelector","getElementFromNode","returnValue","forEach","childNode","childEl","selectAll","select","origFilter","selectorString","firstElement","getNodeFromElement","nodes","selectors","sel","trim","filteredNodes","matchingNodes","filterNodesBySelector","filteredElements","origGetComputedStyle","getComputedStyle","getPropertyValue","propertyName","origQuerySelector","Element","querySelector","globalElementIndex","originalFct","prefix","els","returnVal","getAttributeFromSelector","keys","child","error","queueSetAttributeOnElement","queueSetAttributeOnSelection","origSelectionAttr","attr","origSelectionStyle","originalClassed","classed","className","enableFrontendDesignProperties","prevClassNames","evaluatedValue","__data__","newClassNames","originalTransition","transition","originalText","text","newRemove","getNewRemoveChild","d3Remove","remove","origCreate","createElementNS","newArgs","Array","from","getNewAppendChild","origRemoveChild","skipUpdateSelectors","writable","childGlobalIndex","parentGlobalIndex","removeNodeFromParent","removeChild","origAppend","appended","el2","keepChildren","getNodeDataFromEl","setProperty","styleProp","removeProperty","linkNodeToElement","addNodeToParent","restyleNode","addNode","index","splice","origAppendChild","newAppend","newChild","refChild","origGetTotalLength","SVGPathElement","getTotalLength","getAttribute","origSetAttribute","origSetAttr","setAttribute","origSetAttrNS","setAttributeNS","origGetAttr","evt","type","propagateEvent","createEvent","initEvent","prop","touches","touch","identifier","pageX","pageY","clientX","clientY","WheelEvent","new_event","triggeredElement","x","y","getMousePosition","interactionSel","j","vdomNode","nodeAtPosition","svgChildEl","event","pos","logContents","safeLogCount","safeErrorLog","visNode","cx","cy","parseTransform","sqrt","pow","elX","elY","centerX","centerY","distanceX","abs","distanceY","getTotalTransformation","matchAny","Date","now","shift","timeForTenDrawsMs","fps","enterExit","update","postMessage","CSS_STYLES","ignoreDesign","nodesToRestyle","globalElementIndexCounter","css","VdomManager","display","addChildNodesToVisData","currentNodes","values","attrName","ensureInitialized","set","styleName","cb","onNodeUpdated","applyStyles","moveSharedDataFromQueue","getQueue","clearQueue","getNodeFromIndex","roundedAttrs","tagName","toLowerCase","textContent","attributes","nodeValue","nodeName","kebabCase","obj","propNames","getOwnPropertyNames","propName","clean","styleSheets","sheet","rules","cssRules","rule","selectorText","applyRuleToMatchingNodes","selectorPartsLooseStrict","parentsOfInterest","nodeToBeStyled","getNodeParent","setStyle","longSpecName","checkNode","currentNode","looseIndex","strictIndex","selPart","childIndex","isCssRulePartialMatch","removedClass","removeRuleStylesFromNode","removeNode","restyleIndex","childEls","parentSelector","elementType","getParentNode","parents","pop","totalTransform","addTransforms","sharedData","sharedDataQueue","useSharedArrayFor","indexToNodeMap","cachedListSelections","useBuffer","numNodes","newLength","newByteLength","Int32Array","BYTES_PER_ELEMENT","byteLength","prevData","buffer","createBufferTransferValues","SharedArrayBuffer","BUFFER_PRECISION_FACTOR","storage","addToMap","nodeData","parentNodeIndex","applyParentStyles","removePendingChanges","styleValue","applyStyleToNodeAndChildren","applyCssToNodeAndChildren","id","filtered","attrs","isArray","getSingle","setAttrQueue","attrNameStart","IGNOREDESIGN_ATTRIBUTES","self","ROUNDED_ATTRS","lastSplitPos","lastIndexOf","selectorWithoutLast","lastPart","parentSel","nthChildPosition","selectedNodes","findMatchingChildren","addDirectChildrenIfMatch","matchIndex","selectedNodeSelectors","selParts","findChildrenOfType","matching","cssRuleSelectorPart","newSelPart","searchClassNames","allTrue","searchClassName","indexPart","targetIndex","cutoff","typeName","forceSingle","onDrawn","parentValues","lastFullSecond","countSinceLastFullSecond","circlesByColor","rectsByColor","drawTexts","drawImages","linesByColor","ctx","getContext","save","restore","clearRect","drawLine","drawCircle","drawRect","drawText","drawImage","drawNodeAndChildren","fullSecond","performance","elData","drawClip","parentValuesBackup","applyTransform","clipPathId","clipNode","getNodeById","path","Path2D","clip","drawSingleNode","fill","getFillStyle","stroke","getStrokeStyle","drawFct","handle","strokeStyle","beginPath","fillStyle","lineWidth","getStrokeWidth","moveTo","arc","PI","fillAndStrokeColor","fillColor","strokeColor","sampleData","includes","getAttributeStyleCss","defaultCol","colorToRgba","highestSpec","getCssRuleSpecificityNumber","fillRect","rect","isClip","drawSingle","fontFamily","fontSize","customSize","convertSizeToPx","font","align","textAlign","dx","dy","fillText","image","strokeWidth","lineJoin","addPath","textAnchor","x1","x2","y1","y2","val","lineTo","CanvasWorkerImporter","URL","webkitURL","content","url","blob","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","append","getBlob","Blob","Worker","createObjectURL","encodeURIComponent"],"mappings":"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","file":"ssvg.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SSVG\"] = factory();\n\telse\n\t\troot[\"SSVG\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","export type Transformation = {\n    translateX: number,\n    translateY: number,\n    scaleX: number,\n    scaleY: number,\n    rotate: number,\n    translateBeforeScale: boolean,\n    rotateLast: boolean,\n}\n\nexport default class DrawingUtils {\n    static parseTransform(transform: string|{}): Transformation {\n        const transformObject: Transformation = {\n            translateX: 0,\n            translateY: 0,\n            scaleX: 1,\n            scaleY: 1,\n            rotate: 0,\n            translateBeforeScale: false,\n            rotateLast: false\n        };\n        \n        if (transform) {\n            if(typeof transform !== \"string\") {\n                transformObject.scaleX = transform['k'];\n                transformObject.scaleY = transform['k'];\n                transformObject.translateX = transform['x'];\n                transformObject.translateY = transform['y'];\n                transformObject.translateBeforeScale = true;\n                return transformObject;\n            }\n            let transformString = <string> transform;\n            transformString = transformString.replace(/ /g, '');\n            \n            //let translate  = /translate\\((\\d+),(\\d+)\\)/.exec(transform);\n            const translate = /\\s*translate\\(([-0-9.]+),([-0-9.]+)\\)/.exec(transformString);\n            if (translate) {\n                transformObject.translateX = parseFloat(translate[1]);\n                transformObject.translateY = parseFloat(translate[2]);\n            }\n            else {\n                //console.error('no translate found', transform);\n            }\n            \n            const scale = /\\s*scale\\(([-0-9.]+)(,[-0-9.]+)?\\)/.exec(transformString);\n            if (scale) {\n                transformObject.scaleX = parseFloat(scale[1]);\n                transformObject.scaleY = scale[2] ? parseFloat(scale[2].substr(1)) : parseFloat(scale[1]);\n            }\n            else {\n                //console.error('no scale found', transform);\n            }\n            \n            const rotate = /\\s*rotate\\(([-0-9.]+)\\)/.exec(transformString);\n            if (rotate) {\n                transformObject.rotate = parseFloat(rotate[1]);\n            }\n            else {\n                //console.error('no rotate found', transform);\n            }\n            \n            const translateScale = /\\s*translate\\(([-0-9.]+),([-0-9.]+)\\)scale\\(([-0-9.,]+)\\)/.exec(transformString);\n            if (translateScale) {\n                transformObject.translateBeforeScale = true;\n            }\n\n            const rotateLast = /\\s*rotate\\(([-0-9.,]+)\\)$/.exec(transformString);\n            if (rotateLast) {\n                transformObject.rotateLast = true;\n            }\n            \n            const matrix = /\\s*matrix\\(([-0-9.]+),([-0-9.]+),([-0-9.]+),([-0-9.]+),([-0-9.]+),([-0-9.]+)\\)/.exec(transformString);\n            if(matrix) {\n                transformObject.scaleX = parseFloat(matrix[1]);\n                // 2 is horizontal skewing\n                // 3 is vertical skewing\n                transformObject.scaleY = parseFloat(matrix[4]);\n                transformObject.translateX = parseFloat(matrix[5]);\n                transformObject.translateY = parseFloat(matrix[6]);\n            }\n        }\n        \n        return transformObject;\n    }\n\n    static addTransforms(transformA: Transformation, transformB: Transformation): Transformation {\n        return {\n            translateX: transformA.translateX + transformB.translateX,\n            translateY: transformA.translateY + transformB.translateY,\n            scaleX: transformA.scaleX * transformB.scaleX,\n            scaleY: transformA.scaleY * transformB.scaleY,\n            rotate: transformA.rotate + transformB.rotate,\n            translateBeforeScale: false,\n            rotateLast: false\n        };\n        //TODO: consider translateBeforeScale and rotateLast\n    }\n\n    static convertSizeToPx(size: string|number, fallback = true): number|undefined {\n        const defaultValue = fallback ? 14 : undefined;\n        if(size === undefined) {\n            return defaultValue;\n        }\n        if(typeof size === \"number\") {\n            return size;\n        }\n        if(size.substr(-2) === 'em') {\n            return Math.round(parseFloat(size) * 12);\n        }\n        if(size.substr(-2) === 'px') {\n            return parseInt(size);\n        }\n        if(size.match(/^[0-9]+$/)) {\n            return parseInt(size);\n        }\n        console.warn('size in unsupported format: ', size);\n        return defaultValue;\n    }\n\n    static rgbaCache = {};\n    static colorToRgba(color: string|{r: number, g: number, b: number}|{h: number, s: number, l: number},\n                       opacity: string|number = 1,\n                       defaultColor ='none'): string {\n        if(color === 'none') {\n            return color;\n        }\n        if(!color) {\n            color = defaultColor;\n        }\n        const cacheKey = `${color}-${opacity}`;\n        if(DrawingUtils.rgbaCache[cacheKey]) {\n            return DrawingUtils.rgbaCache[cacheKey];\n        }\n\n        color = DrawingUtils.CssNamedColorToHex(color);\n        if(opacity === 1 && typeof color === 'string') {\n            DrawingUtils.rgbaCache[cacheKey] = color;\n            return color;\n        }\n        let rgba: string;\n        if(typeof color === 'string' && color[0] === '#') {\n            let c; // From https://stackoverflow.com/questions/21646738/convert-hex-to-rgba\n            if(/^#([A-Fa-f0-9]{3}){1,2}$/.test(color)){\n                c = color.substring(1);\n                if(c.length == 3){\n                    c = c[0] + c[0] + c[1] + c[1] + c[2] + c[2];\n                }\n                c = '0x' + c;\n                rgba = 'rgba('+[(c>>16)&255, (c>>8)&255, c&255].join(',')+',' + opacity + ')';\n            } else {\n                throw new Error('Bad Hex');\n            }\n        } else if(typeof color === 'object') {\n            if('r' in color) {\n                rgba = 'rgba(' + color.r + ',' + color.g + ',' + color.b + ',' + opacity + ')';\n            } else if('h' in color) {\n                const rgb = DrawingUtils.hslToRgb(color.h / 360, color.s, color.l);\n                rgba = 'rgba(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ',' + opacity + ')';\n            }\n        } else if(color.substr(0, 4) === 'rgb(') {\n            rgba = color.substr(0, color.length - 1).replace('rgb','rgba') +\n                ', ' + opacity + ')';\n        }\n        DrawingUtils.rgbaCache[cacheKey] = rgba;\n        return rgba;\n    }\n\n    // From https://stackoverflow.com/questions/2353211/hsl-to-rgb-color-conversion\n    static hslToRgb(h, s, l) {\n        var r, g, b;\n\n        if(s == 0){\n            r = g = b = l; // achromatic\n        } else {\n            var hue2rgb = function hue2rgb(p, q, t){\n                if(t < 0) t += 1;\n                if(t > 1) t -= 1;\n                if(t < 1/6) return p + (q - p) * 6 * t;\n                if(t < 1/2) return q;\n                if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;\n                return p;\n            };\n\n            var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n            var p = 2 * l - q;\n            r = hue2rgb(p, q, h + 1/3);\n            g = hue2rgb(p, q, h);\n            b = hue2rgb(p, q, h - 1/3);\n        }\n\n        return {r: Math.round(r * 255), g: Math.round(g * 255), b: Math.round(b * 255)};\n    }\n\n    static CssNamedColorToHex(color: any) {\n        if(typeof color === 'string' && COLOR_HEXES[color.toUpperCase()]) {\n            return COLOR_HEXES[color.toUpperCase()];\n        }\n        return color;\n    }\n\n    /**\n     * Basic implementation to get a sense of specificity. Numbers are completely made up.\n     * Should eventually be more sophisticated, e.g. using https://github.com/keeganstreet/specificity.\n     * @param selector CSS rule as string.\n     */\n    static getCssRuleSpecificityNumber(selector: string) {\n        let specificity = 0;\n\n        selector = selector\n            .replace(/ >/g, '>')\n            .replace(/> /g, '>');\n\n        const parts = [].concat.apply([], selector.split(' ')\n            .map(part => part.split('>')));\n\n        // Rough logic: the more stuff, the more specific. IDs and classes are more specific than other things.\n        for(const part of parts) {\n            specificity += 100;\n            const start = part[0];\n\n            if(start === '#') {\n                specificity += 1000;\n            } else if(start === '.') {\n                // More classes are more specific, but never more specific than an ID.\n                const countClasses = part.split('.').length - 1;\n                specificity += Math.min(900, countClasses * 100);\n            }\n        }\n\n        return specificity;\n    }\n}\n\nconst COLOR_HEXES = {\n    ALICEBLUE: '#F0F8FF',\n    ANTIQUEWHITE: '#FAEBD7',\n    AQUA: '#00FFFF',\n    AQUAMARINE: '#7FFFD4',\n    AZURE: '#F0FFFF',\n    BEIGE: '#F5F5DC',\n    BISQUE: '#FFE4C4',\n    BLACK: '#000000',\n    BLANCHEDALMOND: '#FFEBCD',\n    BLUE: '#0000FF',\n    BLUEVIOLET: '#8A2BE2',\n    BROWN: '#A52A2A',\n    BURLYWOOD: '#DEB887',\n    CADETBLUE: '#5F9EA0',\n    CHARTREUSE: '#7FFF00',\n    CHOCOLATE: '#D2691E',\n    CORAL: '#FF7F50',\n    CORNFLOWERBLUE: '#6495ED',\n    CORNSILK: '#FFF8DC',\n    CRIMSON: '#DC143C',\n    CYAN: '#00FFFF',\n    DARKBLUE: '#00008B',\n    DARKCYAN: '#008B8B',\n    DARKGOLDENROD: '#B8860B',\n    DARKGRAY: '#A9A9A9',\n    DARKGREY: '#A9A9A9',\n    DARKGREEN: '#006400',\n    DARKKHAKI: '#BDB76B',\n    DARKMAGENTA: '#8B008B',\n    DARKOLIVEGREEN: '#556B2F',\n    DARKORANGE: '#FF8C00',\n    DARKORCHID: '#9932CC',\n    DARKRED: '#8B0000',\n    DARKSALMON: '#E9967A',\n    DARKSEAGREEN: '#8FBC8F',\n    DARKSLATEBLUE: '#483D8B',\n    DARKSLATEGRAY: '#2F4F4F',\n    DARKSLATEGREY: '#2F4F4F',\n    DARKTURQUOISE: '#00CED1',\n    DARKVIOLET: '#9400D3',\n    DEEPPINK: '#FF1493',\n    DEEPSKYBLUE: '#00BFFF',\n    DIMGRAY: '#696969',\n    DIMGREY: '#696969',\n    DODGERBLUE: '#1E90FF',\n    FIREBRICK: '#B22222',\n    FLORALWHITE: '#FFFAF0',\n    FORESTGREEN: '#228B22',\n    FUCHSIA: '#FF00FF',\n    GAINSBORO: '#DCDCDC',\n    GHOSTWHITE: '#F8F8FF',\n    GOLD: '#FFD700',\n    GOLDENROD: '#DAA520',\n    GRAY: '#808080',\n    GREY: '#808080',\n    GREEN: '#008000',\n    GREENYELLOW: '#ADFF2F',\n    HONEYDEW: '#F0FFF0',\n    HOTPINK: '#FF69B4',\n    INDIANRED: '#CD5C5C',\n    INDIGO: '#4B0082',\n    IVORY: '#FFFFF0',\n    KHAKI: '#F0E68C',\n    LAVENDER: '#E6E6FA',\n    LAVENDERBLUSH: '#FFF0F5',\n    LAWNGREEN: '#7CFC00',\n    LEMONCHIFFON: '#FFFACD',\n    LIGHTBLUE: '#ADD8E6',\n    LIGHTCORAL: '#F08080',\n    LIGHTCYAN: '#E0FFFF',\n    LIGHTGOLDENRODYELLOW: '#FAFAD2',\n    LIGHTGRAY: '#D3D3D3',\n    LIGHTGREY: '#D3D3D3',\n    LIGHTGREEN: '#90EE90',\n    LIGHTPINK: '#FFB6C1',\n    LIGHTSALMON: '#FFA07A',\n    LIGHTSEAGREEN: '#20B2AA',\n    LIGHTSKYBLUE: '#87CEFA',\n    LIGHTSLATEGRAY: '#778899',\n    LIGHTSLATEGREY: '#778899',\n    LIGHTSTEELBLUE: '#B0C4DE',\n    LIGHTYELLOW: '#FFFFE0',\n    LIME: '#00FF00',\n    LIMEGREEN: '#32CD32',\n    LINEN: '#FAF0E6',\n    MAGENTA: '#FF00FF',\n    MAROON: '#800000',\n    MEDIUMAQUAMARINE: '#66CDAA',\n    MEDIUMBLUE: '#0000CD',\n    MEDIUMORCHID: '#BA55D3',\n    MEDIUMPURPLE: '#9370DB',\n    MEDIUMSEAGREEN: '#3CB371',\n    MEDIUMSLATEBLUE: '#7B68EE',\n    MEDIUMSPRINGGREEN: '#00FA9A',\n    MEDIUMTURQUOISE: '#48D1CC',\n    MEDIUMVIOLETRED: '#C71585',\n    MIDNIGHTBLUE: '#191970',\n    MINTCREAM: '#F5FFFA',\n    MISTYROSE: '#FFE4E1',\n    MOCCASIN: '#FFE4B5',\n    NAVAJOWHITE: '#FFDEAD',\n    NAVY: '#000080',\n    OLDLACE: '#FDF5E6',\n    OLIVE: '#808000',\n    OLIVEDRAB: '#6B8E23',\n    ORANGE: '#FFA500',\n    ORANGERED: '#FF4500',\n    ORCHID: '#DA70D6',\n    PALEGOLDENROD: '#EEE8AA',\n    PALEGREEN: '#98FB98',\n    PALETURQUOISE: '#AFEEEE',\n    PALEVIOLETRED: '#DB7093',\n    PAPAYAWHIP: '#FFEFD5',\n    PEACHPUFF: '#FFDAB9',\n    PERU: '#CD853F',\n    PINK: '#FFC0CB',\n    PLUM: '#DDA0DD',\n    POWDERBLUE: '#B0E0E6',\n    PURPLE: '#800080',\n    REBECCAPURPLE: '#663399',\n    RED: '#FF0000',\n    ROSYBROWN: '#BC8F8F',\n    ROYALBLUE: '#4169E1',\n    SADDLEBROWN: '#8B4513',\n    SALMON: '#FA8072',\n    SANDYBROWN: '#F4A460',\n    SEAGREEN: '#2E8B57',\n    SEASHELL: '#FFF5EE',\n    SIENNA: '#A0522D',\n    SILVER: '#C0C0C0',\n    SKYBLUE: '#87CEEB',\n    SLATEBLUE: '#6A5ACD',\n    SLATEGRAY: '#708090',\n    SLATEGREY: '#708090',\n    SNOW: '#FFFAFA',\n    SPRINGGREEN: '#00FF7F',\n    STEELBLUE: '#4682B4',\n    TAN: '#D2B48C',\n    TEAL: '#008080',\n    THISTLE: '#D8BFD8',\n    TOMATO: '#FF6347',\n    TURQUOISE: '#40E0D0',\n    VIOLET: '#EE82EE',\n    WHEAT: '#F5DEB3',\n    WHITE: '#FFFFFF',\n    WHITESMOKE: '#F5F5F5',\n    YELLOW: '#FFFF00',\n    YELLOWGREEN: '#9ACD32'\n};\n\n","import SSVG from \"./ssvg\";\n\nexport = SSVG;","import {VdomManager} from \"../util/vdom/vdom-manager\";\nimport {VdomNode} from \"../util/vdom/vdom\";\nimport {CanvasWorkerMessage, CanvasUpdateWorkerMessage, CanvasUpdateData} from \"../util/canvas-worker-message\"\nimport Domhandler, {SsvgElement} from \"./domhandler\";\nimport CanvasWorker from \"../canvasworker/canvasworker\";\nimport Canvasrenderer from \"../canvasworker/canvasrenderer\";\nimport DrawingUtils from \"../canvasworker/drawingUtils\";\nimport CanvasWorkerImporter from '../canvasworker';\n\nexport default class SSVG {\n    private unassignedNodes: Node[] = [];\n    private worker: Worker;\n    private domHandler: Domhandler;\n    private vdom: VdomManager;\n    private interactionSelections: SsvgElement[] = [];\n    \n    private renderer: CanvasWorker;\n\n    private svg: (SVGElement & SsvgElement)|undefined;\n    private readonly canvas: HTMLCanvasElement;\n    private svgAssignedAndSizeSet = false;\n    \n    private lastCanvasDrawTimes: number[] = [];\n    \n    private enterExitQueue: CanvasUpdateData[] = [];\n\n    private readonly safeMode: boolean = false;\n    private readonly maxPixelRatio: number|undefined;\n    private readonly useWorker: boolean = true;\n    private readonly getFps: (fps: number) => void = () => {};\n\n    private hoveredElement: Element|undefined;\n    private animationFrame?: number;\n\n    constructor(options?: {\n        safeMode?: boolean,\n        maxPixelRatio?: number,\n        useWorker?: boolean,\n        getFps?: (fps: number) => void,\n        svg?: SVGElement & SsvgElement,\n    }) {\n        if(options) {\n            if(options.safeMode !== undefined) {\n                this.safeMode = options.safeMode;\n            }\n            this.maxPixelRatio = options.maxPixelRatio;\n            if(options.useWorker !== undefined) {\n                this.useWorker = options.useWorker;\n            }\n            if(options.getFps !== undefined) {\n                this.getFps = options.getFps;\n            }\n        }\n\n        this.canvas = document.createElement('canvas');\n        if(!('OffscreenCanvas' in window)) {\n            this.useWorker = false;\n        }\n\n        if(this.useWorker) {\n            this.worker = new CanvasWorkerImporter();\n    \n            this.worker.onmessage = e => {\n                if(e.data && e.data.msg && e.data.msg === 'DRAWN') {\n                    this.logDrawn();\n                    if(!this.animationFrame) {\n                        this.animationFrame = requestAnimationFrame(() => {\n                            this.animationFrame = undefined;\n                            this.updateCanvas()\n                        });\n                    }\n                }\n            };\n            const raf = () => {\n                this.updateFps();\n                requestAnimationFrame(raf);\n            };\n            raf();\n        } else {\n            const raf = () => {\n                this.updateFps();\n                this.logDrawn();\n                this.updateCanvas();\n                requestAnimationFrame(raf);\n            };\n            raf();\n        }\n\n        this.captureD3On();\n        const svg = options && options.svg ? options.svg : undefined;\n        this.setupElementsIfSvgExists(svg);\n        \n        this.canvas.addEventListener('mousedown', e => this.propagateMouseEvent(e));\n        this.canvas.addEventListener('touchstart', e => this.propagateTouchEvent(e));\n        this.canvas.addEventListener('mousemove', e => {\n            const lastHovered = this.hoveredElement;\n            this.hoveredElement = this.propagateMouseEvent(e);\n            if(lastHovered !== this.hoveredElement) {\n                if(lastHovered) {\n                    lastHovered.dispatchEvent(new MouseEvent('mouseout', e));\n                }\n            }\n            this.propagateMouseEvent(e, 'mouseover');\n        });\n        this.canvas.addEventListener('touchmove', e => {\n            const lastHovered = this.hoveredElement;\n            this.hoveredElement = this.propagateTouchEvent(e);\n            if(lastHovered !== this.hoveredElement) {\n                if(lastHovered) {\n                    lastHovered.dispatchEvent(this.duplicateTouchEvent(e, 'mouseout'));\n                }\n            }\n            this.propagateTouchEvent(e, 'mouseover');\n        });\n        this.canvas.addEventListener('mouseup', e => this.propagateMouseEvent(e));\n        this.canvas.addEventListener('touchend', e => this.propagateTouchEvent(e));\n        this.canvas.addEventListener('click', e => this.propagateMouseEvent(e));\n        this.canvas.addEventListener('wheel', e => this.propagateWheelEvent(e));\n\n        this.replaceNativeRemoveChild();\n        this.replaceNativeAttribute();\n        this.replaceNativePathFunctions();\n        this.replaceNativeCreateElement();\n        this.replaceNativeAppendChild();\n        this.replaceD3Attr();\n        this.replaceNativeSelect();\n        this.replaceNativeGetComputedStyle();\n        this.replaceD3Select();\n        this.replaceD3Remove();\n\n        setTimeout(() => {\n            console.log(this.vdom.data);\n        }, 1000);\n    }\n    \n    private setupElementsIfSvgExists(svgEl?: SVGElement & SsvgElement) {\n        if(this.svg) {\n            return true;\n        }\n\n        const svg = !svgEl ? document.getElementsByTagName('svg')[0] : svgEl;\n        \n        if(!svg) {\n            return false;\n        }\n\n        const urlConnector = document.location.href.indexOf('?') === -1 ? '?' : '&';\n        const svgSwitchUrl = document.location.href + urlConnector + 'svg';\n        const svgSwitchComment = document.createComment(' This project uses SSVG.io to render a SVG as Canvas.\\r\\n' +\n            'To inspect the SVG, please open the following URL:\\r\\n' +\n            svgSwitchUrl + '\\r\\n');\n        \n        this.svg = svg as SVGElement & SsvgElement;\n        const parent = this.svg.parentElement;\n\n        if(this.svg.nextSibling) {\n            const next = this.svg.nextSibling;\n            parent.insertBefore(svgSwitchComment, next);\n            parent.insertBefore(this.canvas, next);\n        } else {\n            parent.appendChild(svgSwitchComment);\n            parent.appendChild(this.canvas);\n        }\n\n        this.domHandler = new Domhandler(this.svg, this.useWorker, this.useWorker);\n        this.vdom = this.domHandler.getVDom();\n\n        this.setCanvasSize();\n        \n        return true;\n    }\n    \n    private updateCanvas() {\n        if(!this.svgAssignedAndSizeSet) {\n            return;\n        }\n        if(this.useWorker) {\n            this.domHandler.useAttrQueue(queue => {\n                this.sendUpdateToWorker(queue);\n            });\n        } else {\n            this.domHandler.useAttrQueue(queue => {\n                if(this.renderer.updatePropertiesFromQueue) {\n                    this.renderer.updatePropertiesFromQueue(queue);\n                }\n                this.renderer.draw();\n            }, this.renderer.nodeUpdated);\n        }\n    }\n    \n    private setCanvasSize() {\n        if(!this.svg || !this.vdom.data.width || !this.vdom.data.height) {\n            return;\n        }\n        this.vdom.data.scale = window.devicePixelRatio;\n        if(this.maxPixelRatio !== undefined && this.vdom.data.scale > this.maxPixelRatio) {\n            this.vdom.data.scale = this.maxPixelRatio;\n        }\n    \n        this.canvas.style.width = this.vdom.data.width + 'px';\n        this.canvas.style.height = this.vdom.data.height + 'px';\n        this.canvas.width = this.vdom.data.width * this.vdom.data.scale;\n        this.canvas.height = this.vdom.data.height * this.vdom.data.scale;\n        \n        if(this.useWorker) {\n            const offscreen = (this.canvas as any).transferControlToOffscreen();\n            this.sendToWorker({cmd: 'INIT', data: {\n                    canvas: offscreen,\n                    visData: this.vdom.data,\n                    safeMode: this.safeMode\n                }\n            }, [offscreen]);\n            this.vdom.ensureNodesMapped();\n        } else {\n            this.renderer = new Canvasrenderer(this.vdom, this.canvas, this.safeMode, () => {});\n        }\n        \n        this.svgAssignedAndSizeSet = true;\n    }\n\n    private isWithinSvg(element: Element) {\n        let isWithinSvg = false;\n        let parentEl = element;\n\n        while(parentEl && parentEl.parentNode) {\n            if(parentEl === this.svg) {\n                isWithinSvg = true;\n            }\n            parentEl = <Element> parentEl.parentNode;\n        }\n        return isWithinSvg;\n    }\n    \n    private captureD3On() {\n        if((window as any)['d3']) {\n            const d3 = (window as any)['d3'];\n            const originalOn = d3.selection.prototype.on;\n            const me = this;\n\n            d3.selection.prototype.on = function()\n            {\n                let el = this._parents && this._parents.length ? this._parents[0] : this[0].parentNode;\n                if(el === document.children[0]) {\n                    el = me.svg;\n                }\n                let isWithinSvg = me.isWithinSvg(el);\n\n                if(el && isWithinSvg && me.interactionSelections.indexOf(el) === -1)\n                {\n                    me.interactionSelections.push(el); // This one works for native get/setAttribute\n                    //interactionSelections.push(this); // This one works for d3 .attr.\n                }\n        \n                return originalOn.apply(this, arguments);\n            };\n        }\n    }\n    \n    private replaceD3Select() {\n        if((window as any)['d3']) {\n            const me = this;\n            const d3 = (window as any)['d3'];\n\n            const getReplacement = (original) => {\n                return function(selector: string|(()=>{})) {\n                    if(typeof selector === 'string') {\n                        if(selector === 'body') {\n                            return original.apply(this, arguments);\n                        }\n                        let elements: SsvgElement[];\n                        if(this === d3) {\n                            elements = [me.svg];\n                        } else {\n                            elements = this._groups ? this._groups[0] : this[0];\n                        }\n\n                        if(!elements.filter(e => e).length) {\n                            safeLog('element not found within svg, using normal execution', this, selector);\n                            return original.apply(this, arguments);\n                        }\n\n                        let childElements: SsvgElement[] = [];\n\n                        for(let i = 0; i < elements.length; i++) {\n                            const element = elements[i];\n                            const node = me.domHandler.getVisNode(element);\n\n                            if(!node) {\n                                console.warn('node not found', element);\n                                return original.apply(this, arguments);\n                            }\n\n                            const childNodes = me.vdom.getVisNodesFromSelector(node, selector);\n                            childElements = childElements.concat(childNodes.map(node => {\n                                return me.domHandler.getElementFromNode(node);\n                            }));\n                        }\n\n                        const returnValue = original.apply(this, arguments);\n                        const elementsOutsideSvg: NodeList = returnValue._groups ? returnValue._groups[0]\n                            : returnValue[0];\n                        elementsOutsideSvg.forEach(childNode => {\n                            const childEl = <SsvgElement> <any> childNode;\n                            if(childElements.indexOf(childEl) === -1) {\n                                childElements.push();\n                            }\n                        });\n\n                        if(returnValue._groups) {\n                            returnValue._groups[0] = childElements;\n                        } else {\n                            // Older d3 versions\n                            const parentNode = returnValue[0].parentNode;\n                            returnValue[0] = childElements;\n                            returnValue[0].parentNode = parentNode;\n                        }\n\n                        return returnValue;\n                    }\n\n                    return original.apply(this, arguments);\n                }\n            };\n\n            d3.selection.prototype.selectAll = getReplacement(d3.selection.prototype.selectAll);\n            d3.selectAll = getReplacement(d3.selectAll);\n            d3.selection.prototype.select = getReplacement(d3.selection.prototype.select);\n            d3.select = getReplacement(d3.select);\n\n            const origFilter = d3.selection.prototype.filter;\n            d3.selection.prototype.filter = function(selectorString: string) {\n                const elements = this._groups ? this._groups[0] : this[0];\n                if(typeof selectorString !== 'string') {\n                    return origFilter.apply(this, arguments);\n                }\n                let firstElement = elements[0];\n                let i = 1;\n                while(!firstElement && i < elements.length) {\n                    i++;\n                    firstElement = elements[i];\n                }\n\n                const parentNode = firstElement ? me.domHandler.getNodeFromElement(firstElement.parentNode) : null;\n                const nodes = elements.map(element => me.domHandler.getNodeFromElement(element));\n\n                const selectors = selectorString.split(',').map(sel => sel.trim());\n                const filteredNodes = [];\n\n                for(const selector of selectors) {\n                    const matchingNodes = me.vdom.filterNodesBySelector(parentNode, nodes, selector);\n\n                    for(const node of matchingNodes) {\n                        if(filteredNodes.indexOf(node) === -1) {\n                            filteredNodes.push(node);\n                        }\n                    }\n                }\n\n                const filteredElements = filteredNodes.map(node => me.domHandler.getElementFromNode(node));\n\n                const returnValue = origFilter.apply(this, arguments);\n\n                if(returnValue._groups) {\n                    returnValue._groups[0] = filteredElements;\n                } else {\n                    // Older d3 versions\n                    const parentNode = returnValue[0].parentNode;\n                    returnValue[0] = filteredElements;\n                    returnValue[0].parentNode = parentNode;\n                }\n                return returnValue;\n            }\n        }\n    }\n\n    private replaceNativeGetComputedStyle() {\n        const origGetComputedStyle = window.getComputedStyle;\n        const me = this;\n\n        window.getComputedStyle = function(element: SsvgElement) {\n            if(element && !me.isWithinSvg(element) && (<Window> <any> element) !== window) {\n                return origGetComputedStyle.call(this, element);\n            }\n\n            const node = me.domHandler.getNodeFromElement(element);\n            if(!node) {\n                console.warn('node not found for ', this, element);\n                return origGetComputedStyle.call(this, element);\n            }\n            return {\n                getPropertyValue(propertyName: string): string {\n                    //console.log(propertyName, node, node.style[propertyName]);\n                    return node.style[propertyName];\n                }\n            } as CSSStyleDeclaration;\n        };\n    }\n\n    private replaceNativeSelect() {\n        const origQuerySelector = Element.prototype.querySelector;\n        const me = this;\n\n        Element.prototype.querySelector = function(this: SsvgElement, selector: string) {\n            if(!me.isWithinSvg(this)) {\n                return origQuerySelector.apply(this, arguments);\n            }\n\n            const node = me.domHandler.getVisNode(this);\n            const childNodes = me.vdom.getVisNodesFromSelector(node, selector);\n            if(childNodes.length === 0) {\n                console.warn('could not find selection', this, node, node.globalElementIndex, selector);\n                return null;\n            }\n            return me.domHandler.getElementFromNode(childNodes[0]);\n        };\n    }\n\n    private replaceD3Attr() {\n\n        const me = this;\n\n        function getReplacement(originalFct, prefix = '') {\n            return function(name, value) {\n                \n                if(value === undefined) {\n\n                    if(me.unassignedNodes.indexOf(this) !== -1) {\n                        return originalFct.apply(this, arguments);\n                    } else {\n                        // Dealing with d3 v3.\n                        const els = this._groups ? this._groups[0] : this[0];\n                        if(els[0] && !me.isWithinSvg(els[0])) {\n                            return originalFct.apply(this, arguments);\n                        }\n                        if(els.length > 1) {\n                            const returnVal = [];\n                            for(const el of els) {\n                                returnVal.push(me.domHandler.getAttributeFromSelector(el, name))\n                            }\n                            return returnVal;\n                        } else {\n                            return me.domHandler.getAttributeFromSelector(els[0], name);\n                        }\n                    }\n                } else {\n                    if(name === 'class' || !me.svg) {\n                        return originalFct.apply(this, arguments);\n                    }\n                    // For d3 v4, this would just be this.groups[0]. The rest is for\n                    // earlier versions, where selectAll() returned other values.\n                    let elements = this._groups ? this._groups[0] : this[0];\n\n                    if(typeof elements === 'object' && Object.keys(elements).length === 1 && elements.parentNode) {\n                        const parentElement = elements.parentNode;\n                        let parentNode: VdomNode;\n                        if(parentElement !== document.children[0]) {\n                            parentNode = me.domHandler.getVisNode(parentElement);\n                        } else {\n                            parentNode = me.vdom.data;\n                        }\n\n                        elements = [];\n                        for(const child of parentNode.children) {\n                            elements.push(me.domHandler.getElementFromNode(child));\n                        }\n                    }\n                    if(!elements) {\n                        return originalFct.apply(this, arguments);\n                    }\n                    const filteredElements = [];\n                    try {\n                        for (const element of elements) {\n                            if (element) {\n                                filteredElements.push(element);\n                            }\n                        }\n                    } catch(e) {\n                        console.error(elements, this);\n                        console.error(e);\n                    }\n                    if(filteredElements.length === 1) {\n                        const element = filteredElements[0];\n                        if(!element) {\n                            console.warn('element not found', this, name, value);\n                            return this;\n                        }\n                        if(!me.isWithinSvg(element)) {\n                            return originalFct.apply(this, arguments);\n                        }\n                        me.domHandler.queueSetAttributeOnElement(element, prefix + name, value);\n                    } else {\n                        if(!me.isWithinSvg(elements[0])) {\n                            return originalFct.apply(this, arguments);\n                        }\n                        me.domHandler.queueSetAttributeOnSelection(filteredElements, prefix + name, value);\n                    }\n                    \n                    if(filteredElements[0] === me.svg && (name === 'width' || name === 'height')) {\n                        me.vdom.data[name] = parseInt(value);\n                        me.setCanvasSize();\n                    }\n                \n                    return this;\n                }\n            };\n        }\n    \n        if((window as any)['d3']) {\n            const d3 = (window as any)['d3'];\n\n            const origSelectionAttr = d3.selection.prototype.attr;\n            d3.selection.prototype.attr = getReplacement(origSelectionAttr);\n\n            const origSelectionStyle = d3.selection.prototype.style;\n            d3.selection.prototype.style = getReplacement(origSelectionStyle, 'style;');\n\n            const originalClassed = d3.selection.prototype.classed;\n            d3.selection.prototype.classed = function(className: string,\n                                                      value?: boolean|((data: any, index: number) => boolean)) {\n                if(value !== undefined) {\n                    me.domHandler.enableFrontendDesignProperties();\n                    let elements = this._groups ? this._groups[0] : this[0];\n                    let i = -1;\n                    for(let element of elements) {\n                        i++;\n                        if(element) {\n                            const node = me.domHandler.getNodeFromElement(element);\n                            if(!node) {\n                                console.warn('node not found', element);\n                                continue;\n                            }\n                            const prevClassNames = node.className || '';\n                            const evaluatedValue = typeof value === \"function\" ? value(element.__data__, i) : value;\n                            if(evaluatedValue === true) {\n                                if(prevClassNames.indexOf(className) === -1) {\n                                    let newClassNames = (prevClassNames + ' ' + className).trim();\n\n                                    me.domHandler.queueSetAttributeOnElement(element, 'class', newClassNames);\n                                }\n                            } else if(evaluatedValue === false) {\n                                const containedPreviously = prevClassNames.indexOf(className) !== -1;\n                                if(containedPreviously) {\n                                    const newClassNames = prevClassNames.replace(className, '').replace('  ', ' ');\n                                    me.domHandler.queueSetAttributeOnElement(element, 'class', newClassNames);\n\n                                    if(!node['removedClasses']) {\n                                        node['removedClasses'] = [];\n                                    }\n                                    node['removedClasses'].push(className); // For removing associated styles.\n                                }\n                            }\n                        }\n\n                    }\n                }\n                return originalClassed.apply(this, arguments);\n            };\n\n            const originalTransition = d3.selection.prototype.transition;\n            d3.selection.prototype.transition = function() {\n                me.domHandler.enableFrontendDesignProperties();\n                return originalTransition.apply(this, arguments);\n            };\n\n            const originalText = d3.selection.prototype.text;\n            d3.selection.prototype.text = function(value?: (number|string|((el: HTMLElement) => (number|string)))) {\n                if(value !== undefined) {\n                    let elements = this._groups ? this._groups[0] : this[0];\n                    let i = 0;\n                    for(let element of elements) {\n                        if(element && me.isWithinSvg(element)) {\n                            me.domHandler.queueSetAttributeOnElement(element, 'text', value);\n                        }\n\n                        i++;\n                    }\n                }\n                return originalText.apply(this, arguments);\n            };\n        }\n    }\n\n    private replaceD3Remove() {\n        if(window['d3']) {\n            const d3 = window['d3'];\n            const me = this;\n\n            const newRemove = this.getNewRemoveChild(() => {}, true);\n            const d3Remove = function() {\n                let elements = this._groups ? this._groups[0] : this[0];\n\n                if(elements.length) {\n                    let parentElement: SsvgElement = null;\n                    for(let i = elements.length - 1; i > -1; i--) {\n                        const element = elements[i];\n                        if(element) {\n                            parentElement = element.parentNode;\n                            if(!parentElement) {\n                                console.error('element has no parent node', element);\n                            }\n                            newRemove.call(parentElement, element);\n                        }\n                    }\n                }\n                return this;\n            };\n            d3.selection.prototype.remove = d3Remove;\n            //d3.transition.prototype.remove = d3Remove;\n        }\n    }\n    \n    private replaceNativeCreateElement() {\n        const origCreate = document.createElementNS;\n        const me = this;\n        \n        document.createElementNS = function() {\n            let newArgs = Array.from(arguments);\n            const el = origCreate.apply(this, newArgs);\n            \n            /*el.appendChild = () => {\n                console.log('hi!!', el, arguments);\n                //return el;\n            };*/\n    \n            el.appendChild = me.getNewAppendChild(el.appendChild);\n            \n            me.unassignedNodes.push(el);\n    \n            //console.log(me.unassignedNodes);\n            \n            return el;\n        }\n    }\n\n    private getNewRemoveChild(origRemoveChild: ((<T extends Node>(oldChild: T) => T)|(() => void)),\n        skipUpdateSelectors = false) {\n        const me = this;\n\n        return function<T extends Node>(this: SsvgElement, el: T & SsvgElement) {\n            if(!this) {\n                console.error('context not defined');\n                return el;\n            }\n            if(!me.isWithinSvg(el)) {\n                return origRemoveChild.apply(this, arguments);\n            }\n            const parentNode = me.domHandler.getNodeFromElement(this);\n            const node = me.domHandler.getNodeFromElement(el);\n\n            if(!node) {\n                console.error('node not found', node, el, this, parentNode);\n                return origRemoveChild.apply(this, arguments);\n            }\n\n            // Remove all child elements.\n            /*for(const childNode of node.children) {\n                const childEl = me.domHandler.getElementFromNode(childNode);\n                el.removeChild(childEl);\n            }*/\n\n            // Remove from current parent first.\n            Object.defineProperty(el, 'parentNode', {\n                writable: true,\n                value: undefined\n            });\n\n            //console.log('remove')\n            me.enterExitQueue.push({\n                cmd: 'EXIT',\n                childGlobalIndex: el.globalElementIndex,\n                parentGlobalIndex: parentNode.globalElementIndex\n            });\n\n            me.domHandler.removeNodeFromParent(el, node, parentNode);\n\n            // Fix child indices of all children.\n            if(!skipUpdateSelectors) {\n                if(!parentNode) {\n                    console.error('parent not found', parentNode, this, el);\n                }\n            }\n\n            delete el['selector'];\n\n            return el;\n        };\n    }\n\n    private replaceNativeRemoveChild() {\n        Element.prototype.removeChild = this.getNewRemoveChild(Element.prototype.removeChild);\n    }\n    \n    private getNewAppendChild(origAppend) {\n        const me = this;\n        \n        return function<T extends Node>(this: SsvgElement, el: T & SsvgElement) {\n            if(!me.svgAssignedAndSizeSet) {\n                if(!me.svg && el['tagName'] === 'svg') {\n                    const appended = origAppend.apply(this, arguments);\n                    me.setupElementsIfSvgExists(<SVGElement & SsvgElement> <any> el);\n                    return appended;\n                    \n                } else {\n                    return origAppend.apply(this, arguments);\n                }\n            }\n            \n            if(!me.isWithinSvg(this)) {\n                return origAppend.apply(this, arguments);\n            }\n\n            Object.defineProperty(el, 'ownerSVGElement', {\n                writable: true,\n                value: me.svg\n            });\n            el['appendChild'] = <T extends Node>(el2: T) => {\n                return me.getNewAppendChild(origAppend).call(el, el2);\n            };\n\n            const parentNode = me.domHandler.getNodeFromElement(this);\n            if(!parentNode) {\n                return console.error('parent node not found', this);\n            }\n            let node: VdomNode;\n            let keepChildren = false;\n\n            if(el['parentSelector']) {\n                node = me.domHandler.getVisNode(el);\n\n                me.getNewRemoveChild(() => {}).call(this, el);\n                keepChildren = true; // If the element is being moved around, keep children.\n            } else {\n                node = me.domHandler.getNodeDataFromEl(el);\n            }\n\n            Object.defineProperty(el, 'style', {\n                writable: true,\n                value: {\n                    setProperty: function(styleProp: string, value: string) {\n                        me.domHandler.queueSetAttributeOnElement(el, 'style;' + styleProp, value);\n                    },\n                    getPropertyValue: function(styleProp) {\n                        me.domHandler.enableFrontendDesignProperties();\n                        return node.style[styleProp];\n                    },\n                    removeProperty: function() {\n                        console.log('remove property not yet implemented.');\n                        //TODO implement removeProperty CSS function.\n                    }\n                }\n            });\n\n            Object.defineProperty(el, 'parentNode', {\n                writable: true,\n                value: this\n            });\n    \n            me.domHandler.linkNodeToElement(node, el);\n            me.vdom.addNodeToParent(node, parentNode.globalElementIndex);\n            me.domHandler.restyleNode(node);\n\n            if(me.useWorker) {\n                me.enterExitQueue.push({\n                    cmd: 'ENTER',\n                    node: node,\n                    parentGlobalIndex: parentNode.globalElementIndex,\n                    keepChildren: keepChildren\n                });\n            } else {\n                if(me.renderer.addNode) {\n                    me.renderer.addNode(node);\n                }\n            }\n    \n            if(me.unassignedNodes.indexOf(el) !== -1) {\n                const index = me.unassignedNodes.indexOf(el);\n                me.unassignedNodes.splice(index, 1);\n            }\n    \n            return el;\n        };\n    }\n    \n    private replaceNativeAppendChild() {\n        const origAppendChild = Element.prototype.appendChild;\n        const newAppend = this.getNewAppendChild(origAppendChild);\n    \n        Element.prototype.appendChild = newAppend;\n        Element.prototype.insertBefore = function<T extends Node>(newChild: T, refChild: Node|null) {\n    \n            newAppend.call(this, newChild);\n            \n            return newChild;\n        };\n    }\n\n    private replaceNativePathFunctions() {\n        const me = this;\n        //const origGetPointAtLength = SVGPathElement.prototype.getPointAtLength;\n        const origGetTotalLength = SVGPathElement.prototype.getTotalLength;\n\n        /*SVGPathElement.prototype.getPointAtLength = function() {\n            if(me.isWithinSvg(this)) {\n                const d = this.getAttribute('d');\n                me.origSetAttribute.call(this, 'd', d);\n            }\n            return origGetPointAtLength.apply(this, arguments);\n        };*/\n        SVGPathElement.prototype.getTotalLength = function() {\n            if(me.isWithinSvg(this)) {\n                const d = this.getAttribute('d');\n                me.origSetAttribute.call(this, 'd', d);\n            }\n\n            return origGetTotalLength.apply(this, arguments);\n        };\n    }\n\n    private origSetAttribute;\n\n    private replaceNativeAttribute() {\n        const origSetAttr = Element.prototype.setAttribute;\n        this.origSetAttribute = origSetAttr;\n        const origSetAttrNS = Element.prototype.setAttributeNS;\n        const origGetAttr = Element.prototype.getAttribute;\n        const me = this;\n    \n        Element.prototype.setAttribute = function(this: SsvgElement, name: string, value: any) {\n            if(name === 'easypz' || me.unassignedNodes.indexOf(this) !== -1) {\n                // Update the original SVG\n                origSetAttr.apply(this, arguments);\n                return;\n            }\n            if(name === 'class') {\n                origSetAttr.apply(this, arguments);\n            }\n            if(!me.isWithinSvg(this)) {\n                return origSetAttr.apply(this, arguments);\n            }\n            me.domHandler.queueSetAttributeOnElement(this, name, value);\n        };\n        //TODO: Figure out how to access the element when setting a style property.\n        /*CSSStyleDeclaration.prototype.setProperty = function(name: string, value: any) {\n            safeLog(this, arguments);\n            me.elementHandler.queueSetAttributeOnElement(this, 'style;' + name, value);\n        };*/\n        Element.prototype.setAttributeNS = function(this: SsvgElement, name: string, value: any) {\n            if(name === 'easypz' || me.unassignedNodes.indexOf(this) !== -1) {\n                // Update the original SVG\n                origSetAttrNS.apply(this, arguments);\n                return;\n            }\n            if(name === 'class') {\n                origSetAttrNS.apply(this, arguments);\n            }\n            if(!me.isWithinSvg(this)) {\n                return origSetAttrNS.apply(this, arguments);\n            }\n            me.domHandler.queueSetAttributeOnElement(this, name, value);\n        };\n    \n        Element.prototype.getAttribute = function(this: SsvgElement, name) {\n            if(me.unassignedNodes.indexOf(this) !== -1) {\n                return origGetAttr.apply(this, arguments);\n            } else {\n                try {\n                    return me.domHandler.getAttributeFromSelector(this, name);\n                } catch(e) {\n                    console.error(e);\n                    return origGetAttr.apply(this, arguments);\n                }\n            }\n        };\n    }\n    \n    private propagateMouseEvent(evt: MouseEvent, type?: string) {\n        return this.propagateEvent(new MouseEvent(type? type : evt.type, evt));\n    }\n\n    private duplicateTouchEvent(evt: TouchEvent, type?: string) {\n        const e = document.createEvent('TouchEvent');\n        if(!type) {\n            type = evt.type;\n        }\n        e.initEvent(type, true, false);\n        for(const prop in evt) {\n            if(prop !== 'isTrusted' && evt.hasOwnProperty(prop)) {\n                Object.defineProperty(e, prop, {\n                    writable: true,\n                    value: evt[prop],\n                });\n            }\n        }\n        Object.defineProperty(e, 'type', {\n            writable: true,\n            value: type,\n        });\n        const touches = [];\n        for(let i = 0; i < evt.touches.length; i++) {\n            const touch = evt.touches[i];\n            touches.push({identifier: touch.identifier, pageX: touch.pageX, pageY: touch.pageY,\n                clientX: touch.clientX, clientY: touch.clientY});\n        }\n        Object.defineProperty(e, 'touches', {\n            writable: true,\n            value: touches,\n        });\n        return e;\n    }\n\n    private propagateTouchEvent(evt: TouchEvent, type?: string) {\n        return this.propagateEvent(this.duplicateTouchEvent(evt, type));\n    }\n    \n    private propagateWheelEvent(evt: WheelEvent) {\n        return this.propagateEvent(new WheelEvent(evt.type, evt));\n    }\n    \n    private propagateEvent(new_event: MouseEvent|TouchEvent|WheelEvent): undefined|Element {\n        this.svg.dispatchEvent(new_event); // for EasyPZ\n\n        let triggeredElement: undefined|Element;\n        const {x, y} = SSVG.getMousePosition(new_event);\n\n        for(let interactionSel of this.interactionSelections)\n        {\n            let parentNode = this.domHandler.getVisNode(interactionSel)\n            \n            //let matchingVisParent = selectedNodes[i];\n            let j = 1;\n            \n            if(!parentNode) {\n                //console.error(interactionSel, parentSelector, parentNode);\n            } else {\n                for(let vdomNode of parentNode.children)\n                {\n                    let childNode = this.nodeAtPosition(vdomNode, x - 10, y - 10);\n\n                    if(childNode)\n                    {\n                        const svgEl = this.domHandler.getElementFromNode(vdomNode);\n                        const svgChildEl = this.domHandler.getElementFromNode(childNode);\n\n                        if(svgChildEl) {\n                            Object.defineProperty(new_event, 'target', {\n                                writable: true,\n                                value: svgChildEl\n                            });\n                        }\n\n                        if(svgChildEl) {\n                            triggeredElement = svgChildEl;\n                            svgChildEl.dispatchEvent(new_event);\n                        }\n\n                        if(svgEl !== svgChildEl) {\n                            if(!triggeredElement) {\n                                triggeredElement = svgEl;\n                            }\n                            svgEl.dispatchEvent(new_event);\n                        }\n                    }\n                    j++;\n                }\n            }\n        }\n        return triggeredElement;\n    }\n\n    //TODO move this function somewhere else.\n    private static getMousePosition(event: MouseEvent|TouchEvent) : {x: number, y: number}|null\n    {\n        let pos = {x: 0, y: 0};\n\n        const mouseEvents = ['wheel', 'click', 'mousemove', 'mousedown', 'mouseup', 'dblclick', 'contextmenu',\n            'mouseenter', 'mouseleave', 'mouseout', 'mouseover'];\n        if(mouseEvents.indexOf(event.type) !== -1 && event['clientX']) {\n            pos = {x: event['clientX'], y: event['clientY']};\n        } else if(event.type.substr(0,5) === 'touch') {\n            const touches = event['touches'] ? event['touches'] : [];\n            if(touches.length < 1) return null;\n            pos = {x: touches[0].clientX, y: touches[0].clientY};\n        } else {\n            safeErrorLog('no event pos for event type ', event);\n        }\n\n        return pos;\n    }\n    \n    private nodeAtPosition(visNode: VdomNode, x: number, y: number): false|VdomNode {\n        if (visNode.type === 'circle') {\n            let cx = this.vdom.get(visNode, 'cx') || 0;\n            let cy = this.vdom.get(visNode, 'cy') || 0;\n            if (visNode.transform) {\n                const transform = DrawingUtils.parseTransform(visNode.transform);\n                if (transform.translateX) {\n                    cx += transform.translateX;\n                }\n                if (transform.translateY) {\n                    cy += transform.translateY;\n                }\n            }\n            const distance = Math.sqrt(Math.pow(cx - x, 2) + Math.pow(cy - y, 2));\n            return distance < visNode.r ? visNode : false;\n        } else if(visNode.type === 'rect' || visNode.type === 'image') {\n\n            let elX = this.vdom.get(visNode, 'x') || 0;\n            let elY = this.vdom.get(visNode, 'y') || 0;\n            const width = visNode.width;\n            const height = visNode.height;\n\n            if (visNode.transform) {\n                const transform = DrawingUtils.parseTransform(visNode.transform);\n                if (transform.translateX) {\n                    elX += transform.translateX;\n                }\n                if (transform.translateY) {\n                    elY += transform.translateY;\n                }\n            }\n\n            const centerX = elX + width / 2;\n            const centerY = elY + height / 2;\n\n            const distanceX = Math.abs(centerX - x);\n            const distanceY = Math.abs(centerY - y);\n\n            return distanceX < width / 2 && distanceY < height / 2 ? visNode : false;\n\n        } else if(visNode.type === 'g') {\n\n            const transform = this.domHandler.getTotalTransformation(visNode);\n            if(transform.translateX) {\n                x -= transform.translateX;\n            }\n            if(transform.translateY) {\n                y -= transform.translateY;\n            }\n\n            let matchAny: false|VdomNode = false;\n            for(let i = 0; i < visNode.children.length; i++) {\n                if(this.nodeAtPosition(visNode.children[i], x, y)) {\n                    matchAny = visNode.children[i];\n                }\n            }\n            return matchAny;\n        }\n        return false;\n    }\n    \n    private logDrawn() {\n        this.lastCanvasDrawTimes.push(Date.now());\n        \n        if(this.lastCanvasDrawTimes.length > 100) {\n            this.lastCanvasDrawTimes.shift(); // Remove first item\n        }\n    }\n    \n    private updateFps() {\n        if(this.lastCanvasDrawTimes.length) {\n            const timeForTenDrawsMs = Date.now() - this.lastCanvasDrawTimes[0];\n            const fps = Math.round(this.lastCanvasDrawTimes.length / timeForTenDrawsMs * 1000);\n            this.getFps(fps);\n        }\n    }\n\n    private sendUpdateToWorker(queue) {\n        const msg: CanvasUpdateWorkerMessage = {\n            cmd: 'UPDATE_NODES',\n            data: {\n                enterExit: this.enterExitQueue,\n                update: queue,\n            }\n        };\n\n        this.sendToWorker(msg);\n\n        this.enterExitQueue = [];\n    }\n\n    private sendToWorker(msg: CanvasWorkerMessage, data?: any) {\n        this.worker.postMessage(msg, data);\n        //console.log(roughSizeOfObject(msg));\n    }\n}\n\n\nlet safeLogCount = 0;\nfunction safeLog(...logContents) {\n    \n    if(safeLogCount < 200) {\n        safeLogCount++;\n        console.log(...logContents);\n    }\n}\nfunction safeErrorLog(...logContents) {\n    \n    if(safeLogCount < 200) {\n        safeLogCount++;\n        console.error(...logContents);\n    }\n}\n","import {VDOM, VdomNode, VdomNodeType} from \"../util/vdom/vdom\";\nimport {VdomManager} from \"../util/vdom/vdom-manager\";\nimport DrawingUtils, {Transformation} from \"../canvasworker/drawingUtils\";\nimport drawingUtils from \"../canvasworker/drawingUtils\";\n\nexport const CSS_STYLES = ['stroke', 'stroke-opacity', 'stroke-width', 'stroke-linejoin',\n    'fill', 'fill-opacity', 'font', 'opacity', 'font-family', 'font-size'];\n\nexport default class Domhandler {\n    private readonly vdom: VdomManager;\n    nodes: {[globalElementIndex: number]: VdomNode} = {};\n    elements: {[globalElementIndex: number]: SsvgElement} = {};\n    private nodesToRestyle: VdomNode[] = [];\n    private globalElementIndexCounter = 0;\n\n    constructor(private svg: SVGElement & SsvgElement, useWorker: boolean, private ignoreDesign: boolean) {\n        const visData: VDOM = {\n            type: 'svg',\n            width: parseInt(this.svg.getAttribute('width')),\n            height: parseInt(this.svg.getAttribute('height')),\n            scale: 1,\n            children: [],\n            globalElementIndex: 0,\n            style: {},\n            css: {},\n        };\n\n        this.vdom = new VdomManager(visData, ignoreDesign);\n        this.linkNodeToElement(visData, this.svg);\n        this.svg.style.display = 'none';\n        this.svg['selector'] = 'svg';\n\n        this.addChildNodesToVisData(this.svg.childNodes, this.vdom.data);\n\n        window.setTimeout(() => {\n            // Re-do the styles.\n            this.nodesToRestyle = [];\n            // Can not use this.nodesToRestyle = this.nodesToElements.nodes because this links the object and adding\n            // to this.nodesToRestyle would break the nodesToElements mapping.\n            const currentNodes = Object.values(this.nodes);\n            for(const node of currentNodes) {\n                this.nodesToRestyle.push(node);\n            }\n        }, 100);\n    }\n\n    enableFrontendDesignProperties() {\n        this.ignoreDesign = false;\n        this.vdom.enableFrontendDesignProperties();\n    }\n    \n    getVDom() {\n        return this.vdom;\n    }\n    \n    queueSetAttributeOnElement(element: SsvgElement, attrName: string,\n                               value: (number|string|((el: HTMLElement) => (number|string)))) {\n        //TODO: merge with updatePropertiesFromQueue from VdomManager?\n        //let childIndex = element.childIndex;\n        this.vdom.ensureInitialized(attrName, false);\n\n        const node = this.getNodeFromElement(element);\n\n        const evaluatedValue = typeof value === \"function\" ?\n            value.call(element, element.__data__, element.__data__.index) : value;\n\n        if(!node) {\n            console.error('node not found for ', element);\n            return;\n        }\n        this.vdom.set(node, attrName, evaluatedValue, false);\n\n        if(attrName === \"href\") {\n            safeLog('href not yet supported.');\n            /*\n            try {\n                fetch(location.origin + evaluatedValue, {mode: 'cors'})\n                    .then(resp => resp.blob())\n                    .then(blob => createImageBitmap(blob))\n                    .then(bitmap => {\n                        this.vdom.ensureInitialized('image', false);\n                        this.vdom.set(node, 'image', <string> bitmap, false);\n                    });\n            }\n            catch(e) {console.log(e);}\n            */\n        }\n\n        if(attrName === 'class' || attrName.indexOf('style') !== -1) {\n            // Apply classes immediately so styles can be applied correctly.\n            if(attrName === 'class') {\n                node.className = evaluatedValue;\n                this.nodesToRestyle.push(node);\n            } else {\n                const styleName = attrName.substr(6);\n                if(!node.style) {\n                    console.error('no styles on node ', node);\n                }\n                node.style[styleName] = evaluatedValue;\n            }\n        }\n    }\n\n    queueSetAttributeOnSelection(elements: SsvgElement[], attrName: string, value) {\n        if(!elements.length) return;\n        if(!elements[0]) {\n            //console.error('selection elements not found', elements);\n            return;\n        }\n\n        this.vdom.ensureInitialized(attrName, true, this.globalElementIndexCounter);\n\n        for(let i = 0; i < elements.length; i++) {\n            const svgEl = elements[i];\n\n            const evaluatedValue = typeof value === \"function\" ? value(svgEl.__data__, svgEl.__data__.index) : value;\n\n            this.vdom.set(svgEl, attrName, evaluatedValue);\n\n            //TODO: re-implement.\n            /*if(attrName === \"href\") {\n                try {\n                    fetch(location.origin + evaluatedValue, {mode: 'cors'})\n                    .then(resp => resp.blob())\n                    .then(blob => createImageBitmap(blob))\n                    .then(bitmap => {\n                        //this.checkAttrName(parentSelector, \"image\", useSharedArray, parentNode);\n                        this.setAttrQueue.ensureInitialized(\"image\", false);\n                        this.setAttrQueue[parentSelector][\"image\"][indexOfParent] = bitmap;\n                    });\n                }\n                catch(e) {console.log(e);}\n            }*/\n        }\n\n        if(attrName === 'className' || attrName.indexOf('style') !== -1) {\n            // Apply classes immediately so styles can be applied correctly.\n            for(let i = 0; i < elements.length; i++) {\n                const node = this.getNodeFromElement(elements[i]);\n                const evaluatedValue = typeof value === \"function\" ? value(elements[i].__data__, i) : value;\n\n                if(attrName === 'className') {\n                    node.className = evaluatedValue;\n                    this.nodesToRestyle.push(node);\n                } else {\n                    const styleName = attrName.substr(6);\n                    node.style[styleName] = evaluatedValue;\n                }\n            }\n        }\n    }\n\n    useAttrQueue(cb: (data) => void = () => {}, onNodeUpdated?: (node: VdomNode, attrName: string) => void) {\n        if(this.nodesToRestyle && this.nodesToRestyle.length) {\n            this.applyStyles();\n        }\n\n        this.vdom.moveSharedDataFromQueue();\n        const data = this.vdom.getQueue();\n        this.vdom.updatePropertiesFromQueue(data, onNodeUpdated);\n        cb(data);\n        this.vdom.clearQueue();\n    }\n\n    getAttributeFromSelector(element: SsvgElement, name: string) {\n        const node = this.getNodeFromElement(element);\n        \n        if(!node) {\n            console.error('trying to get attribute for unfit selection', node, element, name);\n            throw Error('element not found');\n        }\n        \n        return node[name];\n    }\n    \n    getVisNode(element: SsvgElement): VdomNode|null {\n        if(element === this.svg) {\n            return this.vdom.data;\n        }\n        return this.vdom.getNodeFromIndex(element.globalElementIndex);\n        /*const selector = this.getElementSelector(element);\n\n        if(selector === null) {\n            return null;\n        }\n        \n        return this.vdom.getVisNodeFromSelector(selector);*/\n    }\n    \n    getNodeDataFromEl(el: HTMLElement): VdomNode {\n        const roundedAttrs = ['cx', 'cy', 'r', 'x', 'y', 'x1', 'x2', 'y1', 'y2', 'width', 'height', 'stroke-width'];\n\n        const node = {\n            type: el.tagName.toLowerCase() as VdomNodeType,\n            className: el.getAttribute('class'),\n            style: {},\n            css: {},\n            children: [],\n            globalElementIndex: -1,\n            text: !el.childNodes || (el.childNodes.length === 1 && !(el.childNodes[0] as HTMLElement).tagName)\n                ? el.textContent : undefined,\n        };\n\n        for(let i = 0; i < el.attributes.length; i++) {\n            let value: string|number = el.attributes[i].nodeValue;\n            if(roundedAttrs.indexOf(el.attributes[i].nodeName) !== -1) {\n                value = parseFloat(value);\n            }\n            node[el.attributes[i].nodeName] = value;\n        }\n        node.style = {};\n\n        for(const styleProp in el.style) {\n            if(el.style.hasOwnProperty(styleProp)) {\n                const val = el.style[styleProp];\n                if(val !== '' && typeof el.style[styleProp] !== 'function') {\n                    const kebabCase = styleProp.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n                    node.style[kebabCase] = el.style[styleProp];\n                }\n            }\n        }\n\n        const clean = obj => {\n            const propNames = Object.getOwnPropertyNames(obj);\n            for (let i = 0; i < propNames.length; i++) {\n                const propName = propNames[i];\n                if (obj[propName] === null || obj[propName] === undefined) {\n                    delete obj[propName];\n                }\n            }\n        };\n        \n        clean(node);\n        \n        return node;\n    }\n\n    private applyStyles() {\n        for (let i = 0; i < document.styleSheets.length; i++) {\n            const sheet = document.styleSheets[i] as any;\n            const rules = (sheet.rules ? sheet.rules : sheet.cssRules) as CSSRuleList;\n        \n            for (let j = 0; j < rules.length; j++) {\n                const rule = rules[j] as any;\n                const selector = rule.selectorText as string;\n                if(!selector) {\n                    continue; // Skip @imports etc.\n                }\n                this.applyRuleToMatchingNodes(selector, rule);\n            }\n        }\n\n        this.nodesToRestyle = [];\n    }\n\n    private applyRuleToMatchingNodes(selectorString: string, rule: {style: {[settingName: string]: string}}): boolean {\n        selectorString = selectorString.trim();\n\n        const selector = selectorString\n            .replace(' >', '>')\n            .replace('> ', '>')\n            .replace('svg>', '');\n        \n        const selectorPartsLooseStrict = selector.split(' ')\n            .map(part => part.split('>'));\n\n        const parentsOfInterest = [];\n        for(const nodeToBeStyled of this.nodesToRestyle) {\n            if(nodeToBeStyled) { // I don't know why, but there are null values in there.\n                let parent = this.getNodeParent(nodeToBeStyled);\n                while(parent && parentsOfInterest.indexOf(parent) === -1) {\n                    parentsOfInterest.push(parent);\n                    parent = this.getNodeParent(parent);\n                }\n            }\n        }\n\n        const setStyle = (styleName: string, rule: {style: {[settingName: string]: string}}, child: VdomNode) => {\n            if(rule.style[styleName]) {\n                const longSpecName = `css;${selectorString};${styleName}`;\n                this.vdom.ensureInitialized(longSpecName);\n\n                this.vdom.set(child, longSpecName, rule.style[styleName]);\n            }\n        };\n\n        const checkNode = (currentNode: VdomNode, looseIndex = 0, strictIndex = 0): boolean => {\n            const selPart = selectorPartsLooseStrict[looseIndex][strictIndex];\n\n            for(let childIndex = 0; childIndex < currentNode.children.length; childIndex++) {\n                const child = currentNode.children[childIndex];\n                if(parentsOfInterest.indexOf(child) === -1 && this.nodesToRestyle.indexOf(child) === -1) {\n                    continue;\n                }\n                let partialMatch = VdomManager.isCssRulePartialMatch(selPart, child, currentNode);\n\n                if(partialMatch) {\n                    if(selectorPartsLooseStrict[looseIndex].length > strictIndex + 1) {\n                        checkNode(child, looseIndex, strictIndex + 1);\n                    } else if(selectorPartsLooseStrict.length > looseIndex + 1) {\n                        checkNode(child, looseIndex + 1, strictIndex);\n                    } else {\n                        if(!child.css[selectorString]) {\n                            for(const styleName of CSS_STYLES) {\n                                setStyle(styleName, rule, child);\n                            }\n                        }\n                    }\n                } else {\n                    if(child['removedClasses']) {\n                        // temporarily add the class, see if it matches this rule, and if so, un-apply its stuff.\n                        for(const removedClass of child['removedClasses']) {\n                            child.className += ' ' + removedClass;\n\n                            let newPartialMatch = VdomManager.isCssRulePartialMatch(selPart, child, currentNode);\n                            if(newPartialMatch) {\n                                this.removeRuleStylesFromNode(selectorString, child);\n                            }\n\n                            child.className = child.className.substr(0, child.className.length -\n                                removedClass.length - 1);\n                        }\n                        setTimeout(() => {\n                            delete child['removedClasses'];\n                        }); // After this frame, reset which classes have been removed.\n                    }\n                    checkNode(child, looseIndex, strictIndex);\n                }\n            }\n            return false;\n        };\n\n        return checkNode(this.vdom.data);\n    }\n\n    removeRuleStylesFromNode(selector: string, child: VdomNode) {\n        if(child.css[selector]) {\n            this.vdom.ensureInitialized(`css;${selector};*`);\n            this.vdom.set(child, `css;${selector};*`, '');\n        }\n    }\n\n    removeNodeFromParent(element: SsvgElement, node: VdomNode, parentNode: VdomNode) {\n        //console.log('removing', node, 'from', parentNode, [...parentNode.children], childIndex, childIndex2);\n        this.vdom.removeNode(node, parentNode);\n\n        this.nodes[node.globalElementIndex] = null;\n        this.elements[element.globalElementIndex] = null;\n\n        const restyleIndex = this.nodesToRestyle.indexOf(node);\n        if(restyleIndex !== -1) {\n            this.nodesToRestyle.splice(restyleIndex, 1);\n        }\n        /*let index = this.nodes.indexOf(node);\n        if(index === -1) {\n            return console.error('node not found', node);\n        }\n\n        this.nodesToElements.nodes.splice(index, 1);\n        this.nodesToElements.elements.splice(index, 1);*/\n        safeLog('deleting from parent', element, node, parentNode);\n    }\n\n    restyleNode(node: VdomNode) {\n        if(!this.nodes[node.globalElementIndex] || this.nodes[node.globalElementIndex] !== node) {\n            console.error(node);\n            throw new Error('restyling incorrect node');\n        }\n        this.nodesToRestyle.push(node);\n    }\n    \n    private addChildNodesToVisData(childEls: SsvgElement[]|NodeList, parentNode: VdomNode): void {\n        const parentEl = this.getElementFromNode(parentNode);\n\n        for(let i  = 0; i < childEls.length; i++) {\n            let el = childEls[i] as SsvgElement;\n\n            try\n            {\n                const node = this.getNodeDataFromEl(el);\n\n                /*el.parentSelector = this.getElementSelector(parentEl);\n                el.selector = this.getElementSelector(el);*/\n                //el.childIndex = parentNode.children.length;\n\n                parentNode.children.push(node);\n                this.linkNodeToElement(node, el);\n                this.nodesToRestyle.push(node);\n                \n                if(el.childNodes)\n                {\n                    this.addChildNodesToVisData(el.childNodes, node);\n                }\n                if(node.type === 'tspan')\n                {\n                    //console.log(node, el, el.childNodes, el.textContent);\n                    //console.log(el.childNodes[0])\n                    //console.log(node, style.textAnchor);\n                }\n                if(node.type === 'text')\n                {\n                    //console.log(node, el, el.childNodes, el.textContent);\n                }\n            }\n            catch(e)\n            {\n                //console.log(e);\n                //console.log(el);\n            }\n        }\n    }\n\n    combineElementSelectors(parentSelector: string, elementType: string, childIndex: number) {\n        return parentSelector + ' > ' + elementType + ':nth-child(' + childIndex + ')';\n    }\n\n    getNodeParent(node: VdomNode): VdomNode|null {\n        if(node === this.vdom.data) {\n            return null;\n        }\n        const el = this.getElementFromNode(node);\n        if(!el) {\n            console.error('can not find element for node ', node);\n            return null;\n        }\n        const parentEl = el.parentNode as SsvgElement;\n        return this.getNodeFromElement(parentEl);\n    }\n\n    linkNodeToElement(node: VdomNode, element: SsvgElement) {\n        node.globalElementIndex = this.globalElementIndexCounter;\n        element.globalElementIndex = this.globalElementIndexCounter;\n        this.globalElementIndexCounter++;\n\n        this.nodes[node.globalElementIndex] = node;\n        this.elements[node.globalElementIndex] = element;\n\n        this.vdom.addNode(node);\n    }\n\n    getElementFromNode(node: VdomNode): SsvgElement {\n        if(node === this.vdom.data) {\n            return this.svg;\n        }\n        return this.elements[node.globalElementIndex];\n    }\n\n    getNodeFromElement(element: SsvgElement): VdomNode {\n        if(element === this.svg) {\n            return this.vdom.data;\n        }\n        return this.vdom.getNodeFromIndex(element.globalElementIndex);\n    }\n\n    getParentNode(node: VdomNode): VdomNode|null {\n        const element = this.getElementFromNode(node);\n        const parentElement = element.parentNode as SsvgElement;\n        return this.getNodeFromElement(parentElement);\n    }\n\n    getTotalTransformation(node: VdomNode): Transformation {\n        let parent = this.getParentNode(node);\n        const parents = [node];\n\n        while(parent) {\n            parents.push(parent);\n            parent = this.getParentNode(parent);\n        }\n\n        parent = parents.pop();\n        let totalTransform: Transformation = {\n            translateX: 0,\n            translateY: 0,\n            scaleX: 0,\n            scaleY: 0,\n            rotate: 0,\n            translateBeforeScale: false,\n            rotateLast: false,\n        };\n\n        while(parent) {\n            const transform = DrawingUtils.parseTransform(parent.transform);\n            totalTransform = DrawingUtils.addTransforms(totalTransform, transform);\n            parent = parents.pop();\n        }\n\n        return totalTransform;\n    }\n}\n\nlet safeLogCount = 0;\nfunction safeLog(...logContents) {\n    \n    if(safeLogCount < 50) {\n        safeLogCount++;\n        console.log(...logContents);\n    }\n}\nfunction safeErrorLog(...logContents) {\n    \n    if(safeLogCount < 50) {\n        safeLogCount++;\n        console.error(...logContents);\n    }\n}\n\nexport type SsvgElement = HTMLElement & {\n    __data__: any,\n    globalElementIndex: number,\n};\n","import DrawingUtils from \"../../canvasworker/drawingUtils\";\nimport SetPropertyQueueData, {AttrValues} from \"./set-property-queue-data\";\nimport {VDOM, VdomNode} from \"./vdom\";\nimport {SsvgElement} from \"../../frontend/domhandler\";\n\nexport class VdomManager {\n    private sharedData: {[attrName: string]: Int32Array} = {};\n    private sharedDataQueue: {[attrName: string]: Int32Array} = {};\n    private queue: SetPropertyQueueData = {};\n    private useSharedArrayFor = ['cx', 'cy', 'x1', 'x2', 'y1', 'y2', 'x', 'y'];\n    private static IGNOREDESIGN_ATTRIBUTES = ['fill', 'stroke', 'opacity'];\n    private indexToNodeMap: {[index: number]: VdomNode} = {};\n    private static BUFFER_PRECISION_FACTOR = 10;\n    \n    constructor(public data: VDOM, private ignoreDesign: boolean) {\n        this.ensureNodesMapped();\n    }\n\n    ensureInitialized(attrName: string, useBuffer = true, numNodes?: number) {\n        if(attrName === 'class') {\n            attrName = 'className';\n        }\n\n        if(!useBuffer || this.useSharedArrayFor.indexOf(attrName) === -1) {\n            if(!this.queue[attrName]) {\n                this.queue[attrName] = {};\n            }\n        } else {\n            const newLength = numNodes < 500 ? 1000 : numNodes * 2;\n\n            if(!this.sharedData[attrName]) {\n                let prevData: AttrValues;\n\n                // If values have been previously set without a buffer, transfer them.\n                if(this.queue[attrName] && !(this.queue[attrName] instanceof SharedArrayBuffer)) {\n                    prevData = <AttrValues> this.queue[attrName];\n                }\n\n                const {buffer, values} = this.createBufferTransferValues(newLength, prevData);\n                const queue = this.createBufferTransferValues(newLength, prevData);\n\n                this.queue[attrName] = buffer;\n                this.sharedData[attrName] = values;\n                this.sharedDataQueue[attrName] = queue.values;\n            } else {\n                const newByteLength = Int32Array.BYTES_PER_ELEMENT * newLength;\n                if(this.sharedData[attrName].byteLength / newByteLength < 0.8) {\n                    // Need to allocate more space\n                    const prevData = this.sharedData[attrName];\n                    const {buffer, values} = this.createBufferTransferValues(newLength, prevData);\n                    const queue = this.createBufferTransferValues(newLength, prevData);\n                    this.queue[attrName] = buffer;\n                    this.sharedData[attrName] = values;\n                    this.sharedDataQueue[attrName] = queue.values;\n                }\n            }\n        }\n    }\n\n    createBufferTransferValues(length: number, prevData?: AttrValues) {\n        const buffer = new SharedArrayBuffer(Int32Array.BYTES_PER_ELEMENT * length);\n        const values = new Int32Array(buffer);\n\n        // If values have been previously set without a buffer, transfer them.\n        if(prevData) {\n            for(const index in prevData) {\n                if(prevData.hasOwnProperty(index)) {\n                    let value = prevData[index];\n                    if(typeof value === 'string') {\n                        value = parseFloat(value);\n                    }\n                    values[index] = value * VdomManager.BUFFER_PRECISION_FACTOR;\n                }\n            }\n        }\n\n        return {buffer, values};\n    }\n\n    set(element: VdomNode|SsvgElement, attrName: string, value: string|number, useBuffer = true) {\n        if(attrName === 'class') {\n            attrName = 'className';\n        }\n        if(element.globalElementIndex === undefined) {\n            console.error('No index', element);\n            throw new Error('Element has no index');\n        }\n        const index = element.globalElementIndex;\n        const storage = useBuffer && this.useSharedArrayFor.indexOf(attrName) !== -1 ? 'shared' : 'raw';\n        try {\n            if(storage === 'shared') {\n                if(typeof value === 'string') {\n                    value = parseFloat(value);\n                }\n                value *= VdomManager.BUFFER_PRECISION_FACTOR;\n                if(value === 0) {\n                    value = 133713371337; // magical constant\n                }\n                /*if(attrName === 'x1' && index === 2) {\n                    const diff = Math.abs(this.sharedData[attrName][index] - value);\n                    const fct = diff > 50 ? safeErrorLog : safeLog;\n                    fct(diff, element, element.globalElementIndex, attrName, this.sharedData[attrName][index], value);\n                }*/\n                /*if(this.sharedData[attrName][index] && Math.abs(this.sharedData[attrName][index] - value) > 50) {\n                    safeErrorLog('big difference', Math.abs(this.sharedData[attrName][index] - value), element, element.globalElementIndex, attrName, this.sharedData[attrName][index], value);\n                }*/\n                this.sharedDataQueue[attrName][index] = value;\n            } else {\n                this.queue[attrName][index] = value;\n                if(this.sharedDataQueue[attrName] && this.sharedDataQueue[attrName][index]) {\n                    // un-set.\n                    this.sharedDataQueue[attrName][index] = 0;\n                }\n            }\n        }\n        catch(e) {\n            console.error(e);\n            console.log(this.queue, this.sharedData, storage, attrName, element, index);\n        }\n    }\n\n    removePendingChanges(node: VdomNode) {\n        const index = node.globalElementIndex;\n        for(const attrName in this.queue) {\n            if(this.queue.hasOwnProperty(attrName)) {\n                delete this.queue[attrName][index];\n            }\n        }\n        for(const attrName in this.sharedDataQueue) {\n            if(this.sharedDataQueue.hasOwnProperty(attrName)) {\n                this.sharedDataQueue[attrName][index] = 0;\n            }\n        }\n    }\n\n    ensureNodesMapped() {\n        const addToMap = (node: VdomNode) => {\n            if(node.globalElementIndex === undefined) {\n                console.error('no element index', node);\n            }\n            this.indexToNodeMap[node.globalElementIndex] = node;\n            for(const child of node.children) {\n                addToMap(child);\n            }\n        };\n        addToMap(this.data);\n    }\n\n    enableFrontendDesignProperties() {\n        this.ignoreDesign = false;\n    }\n\n    addNodeToParent(nodeData: VdomNode, parentNodeIndex: number) {\n        if(nodeData.type !== 'svg') {\n            const parentNode = this.getNodeFromIndex(parentNodeIndex);\n            if(!parentNode) {\n                console.error('could not add node without parent', parentNodeIndex, nodeData,\n                    Object.keys(this.indexToNodeMap));\n                new Error('parent not found');\n                return;\n            }\n            this.applyParentStyles(parentNode, nodeData);\n            parentNode.children.push(nodeData);\n        }\n    }\n\n    addNode(node: VdomNode) {\n        this.indexToNodeMap[node.globalElementIndex] = node;\n    }\n\n    removeNode(node: VdomNode, parent: VdomNode) {\n        delete this.indexToNodeMap[node.globalElementIndex];\n        const childIndex = parent.children.indexOf(node);\n\n        parent.children.splice(childIndex, 1);\n        this.cachedListSelections = {}; //TODO only remove relevant cache.\n\n        this.removePendingChanges(node);\n    }\n\n    applyParentStyles(parentNode: VdomNode, childNode: VdomNode) {\n        for(const style in parentNode.style) {\n            if(!childNode.style[style]) {\n                childNode.style[style] = parentNode.style[style];\n            }\n        }\n    }\n\n    applyStyleToNodeAndChildren(node: VdomNode, styleName: string, styleValue: string,\n                                onNodeUpdated: (node: VdomNode, attrName: string) => void) {\n        node.style[styleName] = styleValue;\n        onNodeUpdated(node, styleName);\n\n        if(node.children) {\n            for(let child of node.children) {\n                this.applyStyleToNodeAndChildren(child, styleName, styleValue, onNodeUpdated);\n            }\n        }\n    }\n\n    applyCssToNodeAndChildren(node: VdomNode, selector: string, styleName: string, value: string,\n                              onNodeUpdated: (node: VdomNode, attrName: string) => void) {\n        if(styleName === '*' && !value) {\n            delete node.css[selector];\n        } else {\n            if(!node.css[selector]) {\n                node.css[selector] = {};\n            }\n            node.css[selector][styleName] = value;\n        }\n        onNodeUpdated(node, styleName);\n\n        if(node.children) {\n            for(let child of node.children) {\n                this.applyCssToNodeAndChildren(child, selector, styleName, value, onNodeUpdated);\n            }\n        }\n    }\n\n    getNodeFromIndex(index: number): VdomNode {\n        return this.indexToNodeMap[index];\n    }\n\n    getNodeById(id: string): VdomNode {\n        const filtered = Object.values(this.indexToNodeMap).filter(node => node.id === id);\n        if(!filtered || filtered.length > 1) {\n            safeLog('multiple nodes with this id!', Object.values(this.indexToNodeMap)\n                .filter(node => node.id).map(node => node.id), id);\n            safeLog(filtered.length, filtered);\n        }\n        return !filtered || filtered.length !== 1 ? null : filtered[0];\n    }\n\n    private static ROUNDED_ATTRS = ['cx', 'cy'];\n\n    get(node: VdomNode, attrs: string|string[]) {\n        if(Array.isArray(attrs)) {\n            return attrs.map(attrName => this.getSingle(node, attrName));\n        } else {\n            return this.getSingle(node, attrs);\n        }\n    }\n\n    private getSingle(node: VdomNode, attrName: string) {\n        if(this.sharedData[attrName] && this.sharedData[attrName][node.globalElementIndex]) {\n            const value = this.sharedData[attrName][node.globalElementIndex];\n            if(value === 133713371337) {\n                return 0;\n            }\n            return value / VdomManager.BUFFER_PRECISION_FACTOR;\n        } else {\n            return node[attrName];\n        }\n    }\n\n    getQueue() {\n        return this.queue;\n    }\n\n    clearQueue() {\n        this.queue = {};\n    }\n\n    moveSharedDataFromQueue() {\n        for(let attrName in this.sharedDataQueue) {\n            for(let i = 0; i < this.sharedDataQueue[attrName].length; i++) {\n                this.sharedData[attrName][i] = this.sharedDataQueue[attrName][i];\n            }\n        }\n    }\n\n    updatePropertiesFromQueue(setAttrQueue: SetPropertyQueueData,\n                              onNodeUpdated: (node: VdomNode, attrName: string) => void = () => {}) {\n        for(let attrName in setAttrQueue) {\n            if(!setAttrQueue.hasOwnProperty(attrName)) {\n                continue;\n            }\n            const attrNameStart = attrName.substr(0, 'style;'.length);\n            if(this.ignoreDesign && (attrNameStart === 'style;' ||\n                VdomManager.IGNOREDESIGN_ATTRIBUTES.indexOf(attrName) !== -1)) {\n                continue;\n            }\n\n            let values: AttrValues|Int32Array;\n\n            if('SharedArrayBuffer' in self &&\n                setAttrQueue[attrName] instanceof SharedArrayBuffer) {\n                this.sharedData[attrName] = new Int32Array(<ArrayBuffer> setAttrQueue[attrName]);\n            } else {\n                values = setAttrQueue[attrName] as string[];\n\n                for(let childIndex in values) {\n                    if(!values.hasOwnProperty(childIndex)) {\n                        continue;\n                    }\n                    const index = parseInt(childIndex);\n                    const childNode = this.getNodeFromIndex(index);\n                    if(!childNode) {\n                        console.error('node not found at index', index)\n                        continue;\n                    }\n                    let value: string|number = values[childIndex];\n                    if(attrNameStart === 'style;') {\n                        const styleName = attrName.substr('style;'.length);\n                        this.applyStyleToNodeAndChildren(childNode, styleName, <string> value, onNodeUpdated);\n                    } else if(attrName.substr(0, 4) === 'css;') {\n                        const [selector, styleName] = attrName.substr(4).split(';');\n                        this.applyCssToNodeAndChildren(childNode, selector, styleName, <string> value, onNodeUpdated);\n                    } else {\n                        if(VdomManager.ROUNDED_ATTRS.indexOf(attrName) !== -1) {\n                            if(typeof value === 'string') {\n                                value = parseFloat(value);\n                            }\n                            value = Math.round(value);\n                        }\n\n                        childNode[attrName] = value;\n                        onNodeUpdated(childNode, attrName);\n                    }\n                }\n            }\n        }\n    }\n    \n    private cachedListSelections: {[selector: string]: {[index: number]: VdomNode}} = {};\n    public getVisNodeFromSelector(selector: string): VdomNode|null {\n        const lastSplitPos = selector.lastIndexOf('>');\n        const selectorWithoutLast = selector.substr(0, lastSplitPos);\n        const lastPart = selector.substr(lastSplitPos + 1);\n        const parentSel = selectorWithoutLast ? this.cachedListSelections[selectorWithoutLast] : null;\n        let index = -1;\n        const nthChildPosition = lastPart.indexOf(':nth-child(');\n        if(nthChildPosition !== -1) {\n            index = parseInt(lastPart.substr(nthChildPosition + 11)); // length of ':nth-child('\n            if(parentSel && parentSel[index]) {\n                return parentSel[index];\n            }\n        }\n        \n        const selectedNodes: VdomNode[] = [];\n        this.findMatchingChildren(this.data, selector, 0, selectedNodes);\n        \n        if(selectedNodes && selectedNodes.length === 1) {\n            const el = selectedNodes[0];\n            if(index !== -1) {\n                if(!this.cachedListSelections[selectorWithoutLast]) {\n                    this.cachedListSelections[selectorWithoutLast] = {};\n                }\n                this.cachedListSelections[selectorWithoutLast][index] = el;\n            }\n            return el;\n        }\n        return null;\n    }\n    \n    public getVisNodesFromSelector(visNode: VdomNode, selector: string) {\n        const selectedNodes = [];\n        this.findMatchingChildren(visNode, selector, 0, selectedNodes);\n        return selectedNodes;\n    }\n\n    private findChildrenOfType(visNode: VdomNode, type: string, selectedNodes: VdomNode[]) {\n        const addDirectChildrenIfMatch = (node: VdomNode) => {\n            for(const child of node.children) {\n                if(child.type === type) {\n                    selectedNodes.push(child);\n                }\n                if(node.children.length !== 0) {\n                    addDirectChildrenIfMatch(child);\n                }\n            }\n        };\n        addDirectChildrenIfMatch(visNode);\n    }\n\n    public filterNodesBySelector(parentNode: VdomNode, nodes: VdomNode[], selector: string) {\n        return nodes.filter(node => VdomManager.isCssRulePartialMatch(selector, node, parentNode));\n    }\n    \n    private findMatchingChildren(visNode: VdomNode, selector: string, matchIndex: number, selectedNodes: VdomNode[],\n                                 selectedNodeSelectors: string[] = []) {\n        if(!selector && selector !== '') {\n            console.error(visNode, selector, matchIndex, selectedNodes, selectedNodeSelectors);\n            throw Error('undefined selector');\n        }\n\n        let selParts = selector.split('>').map(s => s.trim());\n        let selPart = selParts[matchIndex];\n        \n        if(matchIndex === 0 && selPart === 'svg') {\n            matchIndex++;\n            selPart = selParts[matchIndex];\n            if(matchIndex === selParts.length) {\n                selectedNodes.push(visNode);\n                selectedNodeSelectors.push(selector);\n                return;\n            }\n        }\n\n        if(selector.match(/^[a-z]+$/)) {\n            return this.findChildrenOfType(visNode, selector, selectedNodes);\n        }\n        \n        for(let i = 0; i < visNode.children.length; i++) {\n            let node = visNode.children[i];\n            let matching = false;\n            \n            if(VdomManager.isCssRulePartialMatch(selPart, node, visNode)) {\n                if(matchIndex === selParts.length - 1) {\n                    selectedNodes.push(node);\n                    selectedNodeSelectors.push(selector);\n                } else {\n                    matching = true;\n                }\n            }\n            \n            if(node.children && (matching || selParts.length < 2) && matchIndex + 1 < selParts.length) {\n                this.findMatchingChildren(node, selector, matchIndex + 1, selectedNodes, selectedNodeSelectors);\n            }\n        }\n    }\n\n    public static isCssRulePartialMatch(cssRuleSelectorPart: string, node: VdomNode, parentNode: VdomNode): boolean {\n        if(cssRuleSelectorPart.substr(0, 5) === ':not(') {\n            const newSelPart = cssRuleSelectorPart.substr(0, cssRuleSelectorPart.length - 1).substr(5);\n            return !VdomManager.isCssRulePartialMatch(newSelPart, node, parentNode);\n        }\n        if(cssRuleSelectorPart[0] === '.') { // Example: .className or .classnameA.classnameB\n            const searchClassNames = cssRuleSelectorPart.split('.');\n            searchClassNames.shift(); // remove empty first string.\n            if(node.className) {\n                let allTrue = true;\n                for(const searchClassName of searchClassNames) {\n                    if(node.className.split(' ').indexOf(searchClassName) === -1) {\n                        allTrue = false;\n                    }\n                }\n                return allTrue;\n            }\n        } else if(cssRuleSelectorPart[0] === '#') { // Example: #id\n            if(cssRuleSelectorPart.substr(1) === node.id) {\n                return true;\n            }\n        } else if(cssRuleSelectorPart.match(/^[a-z]+$/)) { // Example: rect\n            if(cssRuleSelectorPart === node.type) {\n                return true;\n            }\n        } else if(cssRuleSelectorPart.indexOf(':nth-child(') !== -1) {\n            let type = 'any';\n            let indexPart = cssRuleSelectorPart;\n\n            if(cssRuleSelectorPart[0] !== ':') {\n                type = cssRuleSelectorPart.substr(0, cssRuleSelectorPart.indexOf(':'));\n                indexPart = cssRuleSelectorPart.substr(cssRuleSelectorPart.indexOf(':'));\n            }\n\n            const targetIndex = parseInt(indexPart.substr(':nth-child('.length));\n            const index = parentNode.children.indexOf(node);\n\n            return (index === targetIndex - 1 && (type === 'any' || node.type === type));\n        }\n        else if(cssRuleSelectorPart.indexOf('.') !== -1) { // Example: rect.className\n            const cutoff = cssRuleSelectorPart.indexOf('.');\n            const typeName = cssRuleSelectorPart.substr(0, cutoff);\n            const className = cssRuleSelectorPart.substr(cutoff + 1);\n            if(typeName === node.type && node.className && node.className.split(' ').indexOf(className) !== -1) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\nlet safeLogCount = 0;\nfunction safeLog(...logContents) {\n    if(safeLogCount < 400) {\n        safeLogCount++;\n        console.log(...logContents);\n    }\n}\nfunction safeErrorLog(...logContents) {\n    if(safeLogCount < 400) {\n        safeLogCount++;\n        console.error(...logContents);\n    }\n}\n","import {VdomNode} from \"../util/vdom/vdom\";\nimport {VdomManager} from \"../util/vdom/vdom-manager\";\nimport DrawingUtils from \"./drawingUtils\";\nimport CanvasWorker from \"./canvasworker\";\n\ntype DrawMode = 'start'|'normal'|'end'|'forcesingle';\n\nexport default class Canvasrenderer implements CanvasWorker {\n    \n    private ctx: CanvasRenderingContext2D;\n    private parentValues: {[prop: string]: string|number} = {};\n    \n    constructor(private vdom: VdomManager, private canvas: HTMLCanvasElement,\n                private forceSingle = false, private onDrawn = () => {}) {\n        const ctx = canvas.getContext('2d');\n        if(!ctx) throw new Error('could not create canvas context');\n        \n        this.ctx = ctx;\n        this.ctx.scale(this.vdom.data.scale, this.vdom.data.scale);\n        this.ctx.save();\n        \n        this.draw();\n        \n        setTimeout(() => {\n            console.log(this.forceSingle, this.vdom.data);\n            this.draw();\n        }, 1000);\n    }\n    \n    private lastFullSecond = 0;\n    private countSinceLastFullSecond = 0;\n    \n    draw() {\n        const ctx = this.ctx;\n        \n        ctx.restore();\n        ctx.save();\n        \n        //ctx.fillStyle = '#fff';\n        //ctx.fillRect(0, 0, this.vdom.data.width, this.vdom.data.height);\n        ctx.clearRect(0, 0, this.vdom.data.width, this.vdom.data.height);\n    \n        //this.lastDrawn = null;\n        this.drawLine(null, 'start');\n        this.drawCircle(null, 'start');\n        this.drawRect(null, 'start');\n        this.drawText(null, 'start');\n        this.drawImage(null, 'start');\n\n        this.drawNodeAndChildren(this.vdom.data, this.forceSingle);\n\n        this.drawLine(null, 'end');\n        this.drawCircle(null, 'end');\n        this.drawRect(null, 'end');\n        this.drawText(null, 'end');\n        this.drawImage(null, 'end');\n        \n        this.onDrawn();\n    \n        const fullSecond = Math.round(performance.now() / 1000);\n        if(fullSecond !== this.lastFullSecond) {\n            this.lastFullSecond = fullSecond;\n            //console.log(this.countSinceLastFullSecond);\n            this.countSinceLastFullSecond = 0;\n        }\n        this.countSinceLastFullSecond++;\n    }\n    \n    private drawNodeAndChildren(elData: VdomNode, forceSingle: boolean, drawClip?: Path2D) {\n        if(elData.type === 'clippath' && !drawClip) {\n            return;\n        }\n\n        const ctx = this.ctx;\n        const parentValuesBackup = {...this.parentValues};\n\n        if(!drawClip) {\n            ctx.save();\n        }\n\n        const hasTransformed = this.applyTransform(elData.transform);\n\n        if(elData.transform || drawClip) {\n            forceSingle = true;\n        }\n\n        if(elData['clip-path']) {\n            if(elData['clip-path'].substr(0, 5) === 'url(#') {\n                const clipPathId = elData['clip-path'].substr(5, elData['clip-path'].length - 6);\n                const clipNode = this.vdom.getNodeById(clipPathId);\n                forceSingle = true;\n\n                if(!clipNode) {\n                    //safeErrorLog('clip node not found', elData['clip-path'], clipPathId, this.vdom.data)\n                } else {\n                    const path = new Path2D();\n                    this.drawNodeAndChildren(clipNode, forceSingle, path);\n                    ctx.clip(path);\n                }\n            } else {\n                safeErrorLog('clip path format not supported:', elData['clip-path']);\n            }\n        }\n\n        if(!elData.style.display || elData.style.display !== 'none') {\n            if(!forceSingle) {\n                this.drawSingleNode(elData, 'normal', drawClip);\n            } else {\n                this.drawSingleNode(elData, 'forcesingle', drawClip);\n            }\n        }\n\n        const fill = this.getFillStyle(elData, 'undefined');\n        if(fill !== 'undefined') {\n            this.parentValues['fill'] = fill;\n        }\n        const stroke = this.getStrokeStyle(elData, 'undefined');\n        if(stroke !== 'undefined') {\n            this.parentValues['stroke'] = stroke;\n        }\n        this.parentValues['opacity'] = elData.opacity;\n\n        if(elData.children) {\n            for(let i = 0; i < elData.children.length; i++) {\n                this.drawNodeAndChildren(elData.children[i], forceSingle, drawClip);\n            }\n        }\n\n        if(!drawClip) {\n            //safeLog('restoring ctx', elData);\n            ctx.restore();\n            this.parentValues = parentValuesBackup;\n        }\n\n        if(hasTransformed) {\n            //ctx.restore();\n        }\n    }\n    \n    private drawSingleNode(elData: VdomNode, mode: DrawMode = 'normal', path?: Path2D) {\n        const type: string = elData.type;\n        const drawFct = this['draw' + type.substr(0,1).toUpperCase() + type.substr(1)];\n        if(!drawFct) {\n            return console.error('no draw function yet for ', type);\n        }\n        drawFct.call(this, elData, mode, path);\n    }\n\n    private drawClippath(elData: VdomNode) {\n        //safeLog('clippaths can not be rendered yet.')\n    }\n\n    private drawSvg() {}\n    private drawTitle() {}\n    private drawG() {}\n    \n    private circlesByColor: {[color: string]: VdomNode[]} = {};\n    private drawCircle(elData: VdomNode, mode: DrawMode = 'normal', path?: Path2D) {\n        if(mode === 'normal') {\n            let fill = this.getFillStyle(elData, '#000');\n            const stroke = this.getStrokeStyle(elData);\n            const handle = fill + ';' + stroke;\n            if(!this.circlesByColor[handle]) {\n                this.circlesByColor[handle] = [];\n            }\n            this.circlesByColor[handle].push(elData);\n        }\n        if(mode === 'start') {\n            this.circlesByColor = {};\n            return;\n        }\n        if(mode === 'end') {\n            for(let fillAndStrokeColor in this.circlesByColor) {\n                if(this.circlesByColor.hasOwnProperty(fillAndStrokeColor)) {\n                    const split = fillAndStrokeColor.split(';');\n                    const fillColor = split[0];\n                    const strokeColor = split[1];\n\n                    this.ctx.fillStyle = fillColor;\n                    let sampleData = this.circlesByColor[fillAndStrokeColor][0];\n                    const lineWidth = this.getStrokeWidth(sampleData);\n                    this.ctx.lineWidth = lineWidth !== undefined ? lineWidth : 1;\n                    this.ctx.strokeStyle = strokeColor;\n\n                    this.ctx.beginPath();\n                    for(let elData of this.circlesByColor[fillAndStrokeColor]) {\n                        // Round values so that paths are connected correctly and there are no rendering glitches\n                        const cx = Math.round(this.vdom.get(elData, 'cx')) || 0;\n                        const cy = Math.round(this.vdom.get(elData, 'cy')) || 0;\n                        const r = Math.round(this.vdom.get(elData, 'r'));\n                        this.ctx.save();\n                        this.applyTransform(elData.transform);\n                        this.ctx.moveTo(cx + r, cy);\n                        this.ctx.arc(cx, cy, r, 0, 2 * Math.PI);\n                        this.ctx.restore();\n                        //this.ctx.restore();\n                    }\n\n                    if(fillColor !== 'none'){\n                        this.ctx.fill();\n                    }\n\n                    if(strokeColor && strokeColor !== 'none') {\n                        this.ctx.stroke();\n                    }\n                }\n            }\n            return;\n        }\n        if(mode === 'forcesingle') {\n            let fill = this.getFillStyle(elData, '#000');\n            const strokeStyle = this.getStrokeStyle(elData);\n\n            const cx = this.vdom.get(elData, 'cx') || 0;\n            const cy = this.vdom.get(elData, 'cy') || 0;\n\n            this.ctx.beginPath();\n            this.ctx.fillStyle = fill;\n            this.ctx.strokeStyle = strokeStyle;\n            this.ctx.lineWidth = this.getStrokeWidth(elData);\n            this.ctx.moveTo(cx + elData.r, cy);\n            const context = path ? path : this.ctx;\n            context.arc(cx, cy, elData.r, 0, 2 * Math.PI);\n            if(fill !== 'none' && !path){\n                this.ctx.fill();\n            }\n\n            if(strokeStyle && strokeStyle !== 'none' && !path) {\n                this.ctx.stroke();\n            }\n        }\n    }\n\n    nodeUpdated(node: VdomNode, attr: string) {\n        if(attr === '*' || attr.includes('fill') || attr.includes('opacity')) {\n            delete node['fill-cache'];\n        }\n        if(attr === '*' || attr.includes('stroke') || attr.includes('opacity')) {\n            delete node['stroke-cache'];\n        }\n    }\n\n    private getFillStyle(node: VdomNode, defaultColor = 'none'): string {\n        if(node['fill-cache']) {\n            return node['fill-cache'];\n        }\n        let fill = this.getAttributeStyleCss(node, 'fill');\n        let opacity = this.getAttributeStyleCss(node, 'opacity') || 1;\n        const fillOpacity = this.getAttributeStyleCss(node, 'fill-opacity') || 1;\n        opacity *= fillOpacity;\n\n        let defaultCol = '';\n        if(this.parentValues['fill']) {\n            defaultCol = this.parentValues['fill'] as string;\n        }\n        if(this.parentValues['style;fill']) {\n            defaultCol = this.parentValues['style;fill'] as string;\n        }\n        if(!this.parentValues['fill'] && !this.parentValues['style;fill']) {\n            defaultCol = defaultColor;\n        }\n\n        fill = DrawingUtils.colorToRgba(fill, opacity, defaultCol);\n        node['fill-cache'] = fill;\n        return fill;\n    }\n\n    private getAttributeStyleCss(node: VdomNode, style: string) {\n        if(node.style[style]) {\n            return node.style[style];\n        } else {\n            let value = node[style];\n\n            let highestSpec = -1;\n            for(const selector in node.css) {\n                if(node.css[selector][style]) {\n                    const specificity = DrawingUtils.getCssRuleSpecificityNumber(selector);\n                    if(specificity > highestSpec) {\n                        value = node.css[selector][style];\n                        highestSpec = specificity;\n                    }\n                }\n            }\n            return value;\n        }\n    }\n\n    private getStrokeStyle(node: VdomNode, defaultColor = 'none'): string {\n        if(node['stroke-cache']) {\n            return node['stroke-cache'];\n        }\n        const stroke = this.getAttributeStyleCss(node, 'stroke');\n        let opacity = this.getAttributeStyleCss(node, 'opacity') || 1;\n        const fillOpacity = this.getAttributeStyleCss(node, 'stroke-opacity') || 1;\n        opacity *= fillOpacity;\n\n        if(stroke !== undefined) {\n            node['stroke-cache'] = DrawingUtils.colorToRgba(stroke, opacity);\n        } else {\n            node['stroke-cache'] = defaultColor;\n        }\n        return node['stroke-cache'];\n    }\n\n    private getStrokeWidth(node: VdomNode) {\n        const width = this.getAttributeStyleCss(node, 'stroke-width');\n        return width === undefined ? undefined : parseFloat(width);\n    }\n\n    private rectsByColor = {};\n\n    private drawRect(elData: VdomNode, mode: DrawMode = 'normal', path?: Path2D) {\n        if(mode === 'normal') {\n            let fill = this.getFillStyle(elData, '#000');\n            const stroke = this.getStrokeStyle(elData);\n            const handle = fill + ';' + stroke;\n            if(!this.rectsByColor[handle]) {\n                this.rectsByColor[handle] = [];\n            }\n            this.rectsByColor[handle].push(elData);\n        }\n        if(mode === 'start') {\n            this.rectsByColor = {};\n            return;\n        }\n        if(mode === 'end') {\n            for(let fillAndStrokeColor in this.rectsByColor) {\n                if(this.rectsByColor.hasOwnProperty(fillAndStrokeColor)) {\n                    const split = fillAndStrokeColor.split(';');\n                    const fillColor = split[0];\n                    const strokeColor = split[1];\n                    this.ctx.fillStyle = fillColor;\n\n                    let sampleData = this.rectsByColor[fillAndStrokeColor][0];\n                    const lineWidth = this.getStrokeWidth(sampleData);\n                    this.ctx.lineWidth = lineWidth !== undefined ? lineWidth : 1;\n                    this.ctx.strokeStyle = strokeColor;\n\n                    this.ctx.beginPath();\n                    for(let elData of this.rectsByColor[fillAndStrokeColor]) {\n                        // Round values so that paths are connected correctly and there are no rendering glitches\n                        const x = Math.round(this.vdom.get(elData, 'x')) || 0;\n                        const y = Math.round(this.vdom.get(elData, 'y')) || 0;\n                        this.ctx.save();\n                        this.applyTransform(elData.transform);\n                        this.ctx.moveTo(x, y);\n                        this.ctx.rect(x, y, elData.width, elData.height);\n                        this.ctx.restore();\n                        //this.ctx.restore();\n                    }\n                    if(fillColor !== 'none'){\n                        this.ctx.fill();\n                    }\n\n                    if(strokeColor && strokeColor !== 'none') {\n                        this.ctx.stroke();\n                    }\n                }\n            }\n            return;\n        }\n        if(mode === 'forcesingle') {\n            let fill = this.getFillStyle(elData, '#000');\n            const stroke = this.getStrokeStyle(elData);\n\n            const x = this.vdom.get(elData, 'x') || 0;\n            const y = this.vdom.get(elData, 'y') || 0;\n\n            if(fill && fill !== 'none' && !path) {\n                this.ctx.fillStyle = fill;\n                this.ctx.fillRect(x, y, elData.width, elData.height);\n            }\n            if(path) {\n                path.rect(x, y, elData.width, elData.height);\n            }\n\n            if(stroke !== 'none' && !path) {\n                this.ctx.strokeStyle = stroke;\n                this.ctx.beginPath();\n                this.ctx.rect(x, y, elData.width, elData.height);\n                this.ctx.stroke();\n            }\n        }\n    }\n\n    private drawTexts: VdomNode[] = [];\n\n    private drawText(node: VdomNode, mode: DrawMode = 'normal', isClip = false) {\n        const drawSingle = (elData: VdomNode) => {\n            if(elData.text === '') {\n                return;\n            }\n            let fontFamily = this.getAttributeStyleCss(elData, 'font-family') || 'Times New Roman';\n\n            let fontSize = '16px';\n            const customSize = this.getAttributeStyleCss(elData, 'font-size');\n            if(customSize) {\n                fontSize = DrawingUtils.convertSizeToPx(customSize) + 'px';\n            }\n            let font = this.getAttributeStyleCss(elData, 'font');\n            if(!font) {\n                font = fontSize + ' ' + fontFamily;\n            }\n            let align = this.getAttributeStyleCss(elData, 'text-anchor');\n            if(align) {\n                if(align === 'middle') {\n                    align = 'center';\n                }\n                this.ctx.textAlign = align;\n            }\n            let fill = this.getAttributeStyleCss(elData, 'fill');\n            if(!fill) fill = '#000';\n            this.ctx.font = font;\n            this.ctx.fillStyle = fill;\n            let x = this.vdom.get(elData, 'x') || 0;\n            let y = this.vdom.get(elData, 'y') || 0;\n            let dx = DrawingUtils.convertSizeToPx(elData.dx, false) || 0;\n            let dy = DrawingUtils.convertSizeToPx(elData.dy, false) || 0;\n            this.ctx.fillText(elData.text, x + dx, y + dy);\n        };\n        if(mode === 'start') {\n            this.drawTexts = [];\n            return;\n        }\n        if(mode === 'normal') {\n            this.drawTexts.push(node);\n            return;\n        }\n        if(mode === 'forcesingle') {\n            return drawSingle(node);\n        }\n        if(mode === 'end') {\n            for(const currentNode of this.drawTexts) {\n                drawSingle(currentNode);\n            }\n            return;\n        }\n    }\n\n    private drawImages: VdomNode[] = [];\n\n    private drawImage(node: VdomNode, mode: DrawMode = 'normal') {\n        const drawSingle = (elData: VdomNode) => {\n            if(elData.href === '') {\n                return;\n            }\n            let fill = elData['fill'] ? elData['fill'] : elData.style['fill'];\n            if(!fill) fill = '#000';\n            this.ctx.fillStyle = fill;\n            let x = this.vdom.get(elData, 'x') || 0;\n            let y = this.vdom.get(elData, 'y') || 0;\n            let width = elData.width || 0;\n            let height = elData.height || 0;\n            if(elData.image) {\n                try {\n                    this.ctx.drawImage(elData.image, x, y, width, height);\n                } catch(e) {\n                    console.log(e);\n                }\n            }\n        };\n        if(mode === 'start') {\n            this.drawImages = [];\n            return;\n        }\n        if(mode === 'normal') {\n            this.drawImages.push(node);\n            return;\n        }\n        if(mode === 'forcesingle') {\n            return drawSingle(node);\n        }\n        if(mode === 'end') {\n            for(const currentNode of this.drawImages) {\n                drawSingle(currentNode);\n            }\n            return;\n        }\n    }\n\n    private drawPath(elData: VdomNode, mode: DrawMode = 'normal', path?: Path2D) {\n        if(mode !== 'normal' && mode !== 'forcesingle') return;\n\n        const fill = this.getFillStyle(elData, '#000');\n        const stroke = this.getStrokeStyle(elData);\n        const strokeWidth = this.getStrokeWidth(elData);\n\n        let p = new Path2D(elData.d);\n        this.ctx.fillStyle = fill;\n        if(stroke !== undefined && stroke !== 'none') {\n            if(strokeWidth !== undefined) {\n                this.ctx.lineWidth = strokeWidth;\n            }\n            this.ctx.strokeStyle = stroke;\n\n            const lineJoin = this.getAttributeStyleCss(elData, 'stroke-linejoin')\n\n            if(lineJoin) {\n                if(lineJoin === 'bevel' || lineJoin === 'round' || lineJoin === 'miter') {\n                    this.ctx.lineJoin = lineJoin;\n                } else {\n                    console.error('unknown line join value:', lineJoin)\n                }\n            }\n            if(!path) {\n                this.ctx.stroke(p);\n            }\n        }\n\n        if(fill && fill !== 'none' && !path) {\n            this.ctx.fill(p);\n        }\n        if(path) {\n            path.addPath(p);\n        }\n    }\n    \n    private drawTspan(elData: VdomNode, mode: DrawMode = 'normal') {\n        if(mode !== 'normal' && mode !== 'forcesingle') return;\n        \n        this.ctx.font = \"10px Arial\";\n        this.ctx.fillStyle = \"#000000\";\n        const textAlign = <CanvasTextAlign> (elData.style.textAnchor === \"middle\" ? \"center\" : elData.style.textAnchor);\n        this.ctx.textAlign = textAlign;\n        this.ctx.fillText(elData.text, this.vdom.get(elData, 'x'), this.vdom.get(elData, 'y'));\n    }\n\n    private drawTextpath(elData: VdomNode) {\n        console.warn('no draw function yet for textpath');\n    }\n\n    private linesByColor: {[color: string]: VdomNode[]} = {};\n    private drawLine(elData, mode: DrawMode = 'normal') {\n        if(this.vdom.data.scale > 1) {\n            //mode = 'forcesingle';\n            // In my tests, drawing a long connected path is very slow for high DPI devices.\n        }\n        if(mode === 'normal') {\n            const stroke = this.getStrokeStyle(elData);\n            const width = this.getStrokeWidth(elData);\n            if(stroke === 'none' || width === 0) {\n                return;\n            }\n            const selector = `${stroke};${width}`;\n            if(!this.linesByColor[selector]) {\n                this.linesByColor[selector] = [];\n            }\n            this.linesByColor[selector].push(elData);\n        }\n        if(mode === 'start') {\n            this.linesByColor = {};\n            return;\n        }\n        if(mode === 'end') {\n            //safeLog(Object.keys(this.linesByColor), this.linesByColor);\n            for(let selector in this.linesByColor) {\n                if(this.linesByColor.hasOwnProperty(selector)) {\n                    const split = selector.split(';');\n                    const strokeColor = split[0];\n                    const width = split[1];\n\n                    this.ctx.strokeStyle = strokeColor;\n                    this.ctx.lineWidth = parseFloat(width);\n\n                    this.ctx.beginPath();\n                    for(let elData of this.linesByColor[selector]) {\n                        if(elData.transform) {\n                            this.ctx.save();\n                            this.applyTransform(elData.transform);\n                        }\n\n                        const [x1, x2, y1, y2] = this.vdom.get(elData, ['x1', 'x2', 'y1', 'y2'])\n                            .map(val => Math.round(val) || 0);\n\n                        /*const dist = Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));\n                        if(dist > 50) {\n                            safeLog(elData, dist, x1, x2, y1, y2);\n                        }*/\n\n                        this.ctx.moveTo(x1, y1);\n                        this.ctx.lineTo(x2, y2);\n\n                        if(elData.transform) {\n                            //this.ctx.restore();\n                            this.ctx.restore();\n                        }\n                    }\n\n                    this.ctx.stroke();\n                }\n            }\n            return;\n        }\n        if(mode === 'forcesingle') {\n            this.ctx.beginPath();\n\n            const [x1, x2, y1, y2] = this.vdom.get(elData, ['x1', 'x2', 'y1', 'y2'])\n                .map(val => Math.round(val) || 0);\n\n            this.ctx.moveTo(x1, y1);\n            this.ctx.lineTo(x2, y2);\n\n            this.ctx.strokeStyle = this.getStrokeStyle(elData);\n            this.ctx.lineWidth = this.getStrokeWidth(elData);\n            //safeLog(stroke, this.ctx.strokeStyle);\n            this.ctx.stroke();\n        }\n    }\n\n    private drawDefs(node: VdomNode) {\n        //TODO figure out.\n    }\n\n    private drawMarker(node: VdomNode) {\n        //TODO figure out.\n    }\n    \n    private applyTransform(transformString: string) {\n        const transform = transformString ? DrawingUtils.parseTransform(transformString) : null;\n        if(transform) {\n            if(!transform.rotateLast) {\n                this.ctx.rotate(transform.rotate * Math.PI / 180);\n            }\n\n            const x = transform.translateBeforeScale ? transform.translateX : transform.translateX * transform.scaleX;\n            const y = transform.translateBeforeScale ? transform.translateY : transform.translateY * transform.scaleY;\n            this.ctx.transform(transform.scaleX, 0, 0, transform.scaleY, x, y);\n\n            if(transform.rotateLast) {\n                this.ctx.rotate(transform.rotate * Math.PI / 180);\n            }\n\n            return true;\n        }\n        return false;\n    }\n}\n\n\nlet safeLogCount = 0;\nfunction safeLog(...logContents) {\n    \n    if(safeLogCount < 300) {\n        safeLogCount++;\n        console.log(...logContents);\n    }\n}\nfunction safeErrorLog(...logContents) {\n    \n    if(safeLogCount < 50) {\n        safeLogCount++;\n        console.error(...logContents);\n    }\n}\n","import './custom';\nimport CanvasWorkerImporter = require('worker-loader?inline=true!./canvasworker');\n\nexport default CanvasWorkerImporter;","module.exports = function() {\n  return require(\"!!/home/micha/WebstormProjects/ssvg/node_modules/worker-loader/dist/workers/InlineWorker.js\")(\"!function(t){var e={};function s(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,s),i.l=!0,i.exports}s.m=t,s.c=e,s.d=function(t,e,r){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},s.r=function(t){\\\"undefined\\\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:\\\"Module\\\"}),Object.defineProperty(t,\\\"__esModule\\\",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&\\\"object\\\"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(s.r(r),Object.defineProperty(r,\\\"default\\\",{enumerable:!0,value:t}),2&e&&\\\"string\\\"!=typeof t)for(var i in t)s.d(r,i,function(e){return t[e]}.bind(null,i));return r},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,\\\"a\\\",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p=\\\"\\\",s(s.s=0)}([function(t,e,s){\\\"use strict\\\";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,\\\"__esModule\\\",{value:!0});const i=s(1),n=r(s(2));let o;const a=self;let l;a.onmessage=function(t){const e=t.data;if(e&&e.cmd)switch(e.cmd){case\\\"INIT\\\":l=new i.VdomManager(e.data.visData,!1);const t=!!e.data.safeMode;o=new n.default(l,e.data.canvas,t,()=>{a.postMessage({msg:\\\"DRAWN\\\"})});break;case\\\"UPDATE_NODES\\\":const s=e;for(let t of s.data.enterExit)if(\\\"ENTER\\\"===t.cmd){const e=t.node;t.keepChildren||(e.children=[]),l.addNode(e),l.addNodeToParent(e,t.parentGlobalIndex),o.addNode&&o.addNode(e)}else if(\\\"EXIT\\\"===t.cmd){const e=l.getNodeFromIndex(t.childGlobalIndex),s=l.getNodeFromIndex(t.parentGlobalIndex);l.removeNode(e,s)}o.updatePropertiesFromQueue?o.updatePropertiesFromQueue(s.data.update):l.updatePropertiesFromQueue(s.data.update,o.nodeUpdated),o.draw();break;default:console.error(\\\"did not find command \\\",e.cmd)}}},function(t,e,s){\\\"use strict\\\";Object.defineProperty(e,\\\"__esModule\\\",{value:!0});class r{constructor(t,e){this.data=t,this.ignoreDesign=e,this.sharedData={},this.sharedDataQueue={},this.queue={},this.useSharedArrayFor=[\\\"cx\\\",\\\"cy\\\",\\\"x1\\\",\\\"x2\\\",\\\"y1\\\",\\\"y2\\\",\\\"x\\\",\\\"y\\\"],this.indexToNodeMap={},this.cachedListSelections={},this.ensureNodesMapped()}ensureInitialized(t,e=!0,s){if(\\\"class\\\"===t&&(t=\\\"className\\\"),e&&-1!==this.useSharedArrayFor.indexOf(t)){const e=s<500?1e3:2*s;if(this.sharedData[t]){const s=Int32Array.BYTES_PER_ELEMENT*e;if(this.sharedData[t].byteLength/s<.8){const s=this.sharedData[t],{buffer:r,values:i}=this.createBufferTransferValues(e,s),n=this.createBufferTransferValues(e,s);this.queue[t]=r,this.sharedData[t]=i,this.sharedDataQueue[t]=n.values}}else{let s;!this.queue[t]||this.queue[t]instanceof SharedArrayBuffer||(s=this.queue[t]);const{buffer:r,values:i}=this.createBufferTransferValues(e,s),n=this.createBufferTransferValues(e,s);this.queue[t]=r,this.sharedData[t]=i,this.sharedDataQueue[t]=n.values}}else this.queue[t]||(this.queue[t]={})}createBufferTransferValues(t,e){const s=new SharedArrayBuffer(Int32Array.BYTES_PER_ELEMENT*t),i=new Int32Array(s);if(e)for(const t in e)if(e.hasOwnProperty(t)){let s=e[t];\\\"string\\\"==typeof s&&(s=parseFloat(s)),i[t]=s*r.BUFFER_PRECISION_FACTOR}return{buffer:s,values:i}}set(t,e,s,i=!0){if(\\\"class\\\"===e&&(e=\\\"className\\\"),void 0===t.globalElementIndex)throw console.error(\\\"No index\\\",t),new Error(\\\"Element has no index\\\");const n=t.globalElementIndex,o=i&&-1!==this.useSharedArrayFor.indexOf(e)?\\\"shared\\\":\\\"raw\\\";try{\\\"shared\\\"===o?(\\\"string\\\"==typeof s&&(s=parseFloat(s)),0===(s*=r.BUFFER_PRECISION_FACTOR)&&(s=133713371337),this.sharedDataQueue[e][n]=s):(this.queue[e][n]=s,this.sharedDataQueue[e]&&this.sharedDataQueue[e][n]&&(this.sharedDataQueue[e][n]=0))}catch(s){console.error(s),console.log(this.queue,this.sharedData,o,e,t,n)}}removePendingChanges(t){const e=t.globalElementIndex;for(const t in this.queue)this.queue.hasOwnProperty(t)&&delete this.queue[t][e];for(const t in this.sharedDataQueue)this.sharedDataQueue.hasOwnProperty(t)&&(this.sharedDataQueue[t][e]=0)}ensureNodesMapped(){const t=e=>{void 0===e.globalElementIndex&&console.error(\\\"no element index\\\",e),this.indexToNodeMap[e.globalElementIndex]=e;for(const s of e.children)t(s)};t(this.data)}enableFrontendDesignProperties(){this.ignoreDesign=!1}addNodeToParent(t,e){if(\\\"svg\\\"!==t.type){const s=this.getNodeFromIndex(e);if(!s)return console.error(\\\"could not add node without parent\\\",e,t,Object.keys(this.indexToNodeMap)),void new Error(\\\"parent not found\\\");this.applyParentStyles(s,t),s.children.push(t)}}addNode(t){this.indexToNodeMap[t.globalElementIndex]=t}removeNode(t,e){delete this.indexToNodeMap[t.globalElementIndex];const s=e.children.indexOf(t);e.children.splice(s,1),this.cachedListSelections={},this.removePendingChanges(t)}applyParentStyles(t,e){for(const s in t.style)e.style[s]||(e.style[s]=t.style[s])}applyStyleToNodeAndChildren(t,e,s,r){if(t.style[e]=s,r(t,e),t.children)for(let i of t.children)this.applyStyleToNodeAndChildren(i,e,s,r)}applyCssToNodeAndChildren(t,e,s,r,i){if(\\\"*\\\"!==s||r?(t.css[e]||(t.css[e]={}),t.css[e][s]=r):delete t.css[e],i(t,s),t.children)for(let n of t.children)this.applyCssToNodeAndChildren(n,e,s,r,i)}getNodeFromIndex(t){return this.indexToNodeMap[t]}getNodeById(t){const e=Object.values(this.indexToNodeMap).filter(e=>e.id===t);return(!e||e.length>1)&&(n(\\\"multiple nodes with this id!\\\",Object.values(this.indexToNodeMap).filter(t=>t.id).map(t=>t.id),t),n(e.length,e)),e&&1===e.length?e[0]:null}get(t,e){return Array.isArray(e)?e.map(e=>this.getSingle(t,e)):this.getSingle(t,e)}getSingle(t,e){if(this.sharedData[e]&&this.sharedData[e][t.globalElementIndex]){const s=this.sharedData[e][t.globalElementIndex];return 133713371337===s?0:s/r.BUFFER_PRECISION_FACTOR}return t[e]}getQueue(){return this.queue}clearQueue(){this.queue={}}moveSharedDataFromQueue(){for(let t in this.sharedDataQueue)for(let e=0;e<this.sharedDataQueue[t].length;e++)this.sharedData[t][e]=this.sharedDataQueue[t][e]}updatePropertiesFromQueue(t,e=(()=>{})){for(let s in t){if(!t.hasOwnProperty(s))continue;const i=s.substr(0,\\\"style;\\\".length);if(this.ignoreDesign&&(\\\"style;\\\"===i||-1!==r.IGNOREDESIGN_ATTRIBUTES.indexOf(s)))continue;let n;if(\\\"SharedArrayBuffer\\\"in self&&t[s]instanceof SharedArrayBuffer)this.sharedData[s]=new Int32Array(t[s]);else{n=t[s];for(let t in n){if(!n.hasOwnProperty(t))continue;const o=parseInt(t),a=this.getNodeFromIndex(o);if(!a){console.error(\\\"node not found at index\\\",o);continue}let l=n[t];if(\\\"style;\\\"===i){const t=s.substr(\\\"style;\\\".length);this.applyStyleToNodeAndChildren(a,t,l,e)}else if(\\\"css;\\\"===s.substr(0,4)){const[t,r]=s.substr(4).split(\\\";\\\");this.applyCssToNodeAndChildren(a,t,r,l,e)}else-1!==r.ROUNDED_ATTRS.indexOf(s)&&(\\\"string\\\"==typeof l&&(l=parseFloat(l)),l=Math.round(l)),a[s]=l,e(a,s)}}}}getVisNodeFromSelector(t){const e=t.lastIndexOf(\\\">\\\"),s=t.substr(0,e),r=t.substr(e+1),i=s?this.cachedListSelections[s]:null;let n=-1;const o=r.indexOf(\\\":nth-child(\\\");if(-1!==o&&(n=parseInt(r.substr(o+11)),i&&i[n]))return i[n];const a=[];if(this.findMatchingChildren(this.data,t,0,a),a&&1===a.length){const t=a[0];return-1!==n&&(this.cachedListSelections[s]||(this.cachedListSelections[s]={}),this.cachedListSelections[s][n]=t),t}return null}getVisNodesFromSelector(t,e){const s=[];return this.findMatchingChildren(t,e,0,s),s}findChildrenOfType(t,e,s){const r=t=>{for(const i of t.children)i.type===e&&s.push(i),0!==t.children.length&&r(i)};r(t)}filterNodesBySelector(t,e,s){return e.filter(e=>r.isCssRulePartialMatch(s,e,t))}findMatchingChildren(t,e,s,i,n=[]){if(!e&&\\\"\\\"!==e)throw console.error(t,e,s,i,n),Error(\\\"undefined selector\\\");let o=e.split(\\\">\\\").map(t=>t.trim()),a=o[s];if(0===s&&\\\"svg\\\"===a&&(a=o[++s],s===o.length))return i.push(t),void n.push(e);if(e.match(/^[a-z]+$/))return this.findChildrenOfType(t,e,i);for(let l=0;l<t.children.length;l++){let h=t.children[l],c=!1;r.isCssRulePartialMatch(a,h,t)&&(s===o.length-1?(i.push(h),n.push(e)):c=!0),h.children&&(c||o.length<2)&&s+1<o.length&&this.findMatchingChildren(h,e,s+1,i,n)}}static isCssRulePartialMatch(t,e,s){if(\\\":not(\\\"===t.substr(0,5)){const i=t.substr(0,t.length-1).substr(5);return!r.isCssRulePartialMatch(i,e,s)}if(\\\".\\\"===t[0]){const s=t.split(\\\".\\\");if(s.shift(),e.className){let t=!0;for(const r of s)-1===e.className.split(\\\" \\\").indexOf(r)&&(t=!1);return t}}else if(\\\"#\\\"===t[0]){if(t.substr(1)===e.id)return!0}else if(t.match(/^[a-z]+$/)){if(t===e.type)return!0}else{if(-1!==t.indexOf(\\\":nth-child(\\\")){let r=\\\"any\\\",i=t;\\\":\\\"!==t[0]&&(r=t.substr(0,t.indexOf(\\\":\\\")),i=t.substr(t.indexOf(\\\":\\\")));const n=parseInt(i.substr(\\\":nth-child(\\\".length));return s.children.indexOf(e)===n-1&&(\\\"any\\\"===r||e.type===r)}if(-1!==t.indexOf(\\\".\\\")){const s=t.indexOf(\\\".\\\"),r=t.substr(0,s),i=t.substr(s+1);if(r===e.type&&e.className&&-1!==e.className.split(\\\" \\\").indexOf(i))return!0}}return!1}}e.VdomManager=r,r.IGNOREDESIGN_ATTRIBUTES=[\\\"fill\\\",\\\"stroke\\\",\\\"opacity\\\"],r.BUFFER_PRECISION_FACTOR=10,r.ROUNDED_ATTRS=[\\\"cx\\\",\\\"cy\\\"];let i=0;function n(...t){i<400&&(i++,console.log(...t))}},function(t,e,s){\\\"use strict\\\";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,\\\"__esModule\\\",{value:!0});const i=r(s(3));e.default=class{constructor(t,e,s=!1,r=(()=>{})){this.vdom=t,this.canvas=e,this.forceSingle=s,this.onDrawn=r,this.parentValues={},this.lastFullSecond=0,this.countSinceLastFullSecond=0,this.circlesByColor={},this.rectsByColor={},this.drawTexts=[],this.drawImages=[],this.linesByColor={};const i=e.getContext(\\\"2d\\\");if(!i)throw new Error(\\\"could not create canvas context\\\");this.ctx=i,this.ctx.scale(this.vdom.data.scale,this.vdom.data.scale),this.ctx.save(),this.draw(),setTimeout(()=>{console.log(this.forceSingle,this.vdom.data),this.draw()},1e3)}draw(){const t=this.ctx;t.restore(),t.save(),t.clearRect(0,0,this.vdom.data.width,this.vdom.data.height),this.drawLine(null,\\\"start\\\"),this.drawCircle(null,\\\"start\\\"),this.drawRect(null,\\\"start\\\"),this.drawText(null,\\\"start\\\"),this.drawImage(null,\\\"start\\\"),this.drawNodeAndChildren(this.vdom.data,this.forceSingle),this.drawLine(null,\\\"end\\\"),this.drawCircle(null,\\\"end\\\"),this.drawRect(null,\\\"end\\\"),this.drawText(null,\\\"end\\\"),this.drawImage(null,\\\"end\\\"),this.onDrawn();const e=Math.round(performance.now()/1e3);e!==this.lastFullSecond&&(this.lastFullSecond=e,this.countSinceLastFullSecond=0),this.countSinceLastFullSecond++}drawNodeAndChildren(t,e,s){if(\\\"clippath\\\"===t.type&&!s)return;const r=this.ctx,i=Object.assign({},this.parentValues);s||r.save();this.applyTransform(t.transform);if((t.transform||s)&&(e=!0),t[\\\"clip-path\\\"])if(\\\"url(#\\\"===t[\\\"clip-path\\\"].substr(0,5)){const s=t[\\\"clip-path\\\"].substr(5,t[\\\"clip-path\\\"].length-6),i=this.vdom.getNodeById(s);if(e=!0,i){const t=new Path2D;this.drawNodeAndChildren(i,e,t),r.clip(t)}else;}else!function(...t){n<50&&(n++,console.error(...t))}(\\\"clip path format not supported:\\\",t[\\\"clip-path\\\"]);t.style.display&&\\\"none\\\"===t.style.display||(e?this.drawSingleNode(t,\\\"forcesingle\\\",s):this.drawSingleNode(t,\\\"normal\\\",s));const o=this.getFillStyle(t,\\\"undefined\\\");\\\"undefined\\\"!==o&&(this.parentValues.fill=o);const a=this.getStrokeStyle(t,\\\"undefined\\\");if(\\\"undefined\\\"!==a&&(this.parentValues.stroke=a),this.parentValues.opacity=t.opacity,t.children)for(let r=0;r<t.children.length;r++)this.drawNodeAndChildren(t.children[r],e,s);s||(r.restore(),this.parentValues=i)}drawSingleNode(t,e=\\\"normal\\\",s){const r=t.type,i=this[\\\"draw\\\"+r.substr(0,1).toUpperCase()+r.substr(1)];if(!i)return console.error(\\\"no draw function yet for \\\",r);i.call(this,t,e,s)}drawClippath(t){}drawSvg(){}drawTitle(){}drawG(){}drawCircle(t,e=\\\"normal\\\",s){if(\\\"normal\\\"===e){const e=this.getFillStyle(t,\\\"#000\\\")+\\\";\\\"+this.getStrokeStyle(t);this.circlesByColor[e]||(this.circlesByColor[e]=[]),this.circlesByColor[e].push(t)}if(\\\"start\\\"!==e){if(\\\"end\\\"!==e){if(\\\"forcesingle\\\"===e){let e=this.getFillStyle(t,\\\"#000\\\");const r=this.getStrokeStyle(t),i=this.vdom.get(t,\\\"cx\\\")||0,n=this.vdom.get(t,\\\"cy\\\")||0;this.ctx.beginPath(),this.ctx.fillStyle=e,this.ctx.strokeStyle=r,this.ctx.lineWidth=this.getStrokeWidth(t),this.ctx.moveTo(i+t.r,n),(s||this.ctx).arc(i,n,t.r,0,2*Math.PI),\\\"none\\\"===e||s||this.ctx.fill(),r&&\\\"none\\\"!==r&&!s&&this.ctx.stroke()}}else for(let t in this.circlesByColor)if(this.circlesByColor.hasOwnProperty(t)){const e=t.split(\\\";\\\"),s=e[0],r=e[1];this.ctx.fillStyle=s;let i=this.circlesByColor[t][0];const n=this.getStrokeWidth(i);this.ctx.lineWidth=void 0!==n?n:1,this.ctx.strokeStyle=r,this.ctx.beginPath();for(let e of this.circlesByColor[t]){const t=Math.round(this.vdom.get(e,\\\"cx\\\"))||0,s=Math.round(this.vdom.get(e,\\\"cy\\\"))||0,r=Math.round(this.vdom.get(e,\\\"r\\\"));this.ctx.save(),this.applyTransform(e.transform),this.ctx.moveTo(t+r,s),this.ctx.arc(t,s,r,0,2*Math.PI),this.ctx.restore()}\\\"none\\\"!==s&&this.ctx.fill(),r&&\\\"none\\\"!==r&&this.ctx.stroke()}}else this.circlesByColor={}}nodeUpdated(t,e){(\\\"*\\\"===e||e.includes(\\\"fill\\\")||e.includes(\\\"opacity\\\"))&&delete t[\\\"fill-cache\\\"],(\\\"*\\\"===e||e.includes(\\\"stroke\\\")||e.includes(\\\"opacity\\\"))&&delete t[\\\"stroke-cache\\\"]}getFillStyle(t,e=\\\"none\\\"){if(t[\\\"fill-cache\\\"])return t[\\\"fill-cache\\\"];let s=this.getAttributeStyleCss(t,\\\"fill\\\"),r=this.getAttributeStyleCss(t,\\\"opacity\\\")||1;r*=this.getAttributeStyleCss(t,\\\"fill-opacity\\\")||1;let n=\\\"\\\";return this.parentValues.fill&&(n=this.parentValues.fill),this.parentValues[\\\"style;fill\\\"]&&(n=this.parentValues[\\\"style;fill\\\"]),this.parentValues.fill||this.parentValues[\\\"style;fill\\\"]||(n=e),s=i.default.colorToRgba(s,r,n),t[\\\"fill-cache\\\"]=s,s}getAttributeStyleCss(t,e){if(t.style[e])return t.style[e];{let s=t[e],r=-1;for(const n in t.css)if(t.css[n][e]){const o=i.default.getCssRuleSpecificityNumber(n);o>r&&(s=t.css[n][e],r=o)}return s}}getStrokeStyle(t,e=\\\"none\\\"){if(t[\\\"stroke-cache\\\"])return t[\\\"stroke-cache\\\"];const s=this.getAttributeStyleCss(t,\\\"stroke\\\");let r=this.getAttributeStyleCss(t,\\\"opacity\\\")||1;return r*=this.getAttributeStyleCss(t,\\\"stroke-opacity\\\")||1,t[\\\"stroke-cache\\\"]=void 0!==s?i.default.colorToRgba(s,r):e,t[\\\"stroke-cache\\\"]}getStrokeWidth(t){const e=this.getAttributeStyleCss(t,\\\"stroke-width\\\");return void 0===e?void 0:parseFloat(e)}drawRect(t,e=\\\"normal\\\",s){if(\\\"normal\\\"===e){const e=this.getFillStyle(t,\\\"#000\\\")+\\\";\\\"+this.getStrokeStyle(t);this.rectsByColor[e]||(this.rectsByColor[e]=[]),this.rectsByColor[e].push(t)}if(\\\"start\\\"!==e){if(\\\"end\\\"!==e){if(\\\"forcesingle\\\"===e){let e=this.getFillStyle(t,\\\"#000\\\");const r=this.getStrokeStyle(t),i=this.vdom.get(t,\\\"x\\\")||0,n=this.vdom.get(t,\\\"y\\\")||0;e&&\\\"none\\\"!==e&&!s&&(this.ctx.fillStyle=e,this.ctx.fillRect(i,n,t.width,t.height)),s&&s.rect(i,n,t.width,t.height),\\\"none\\\"===r||s||(this.ctx.strokeStyle=r,this.ctx.beginPath(),this.ctx.rect(i,n,t.width,t.height),this.ctx.stroke())}}else for(let t in this.rectsByColor)if(this.rectsByColor.hasOwnProperty(t)){const e=t.split(\\\";\\\"),s=e[0],r=e[1];this.ctx.fillStyle=s;let i=this.rectsByColor[t][0];const n=this.getStrokeWidth(i);this.ctx.lineWidth=void 0!==n?n:1,this.ctx.strokeStyle=r,this.ctx.beginPath();for(let e of this.rectsByColor[t]){const t=Math.round(this.vdom.get(e,\\\"x\\\"))||0,s=Math.round(this.vdom.get(e,\\\"y\\\"))||0;this.ctx.save(),this.applyTransform(e.transform),this.ctx.moveTo(t,s),this.ctx.rect(t,s,e.width,e.height),this.ctx.restore()}\\\"none\\\"!==s&&this.ctx.fill(),r&&\\\"none\\\"!==r&&this.ctx.stroke()}}else this.rectsByColor={}}drawText(t,e=\\\"normal\\\",s=!1){const r=t=>{if(\\\"\\\"===t.text)return;let e=this.getAttributeStyleCss(t,\\\"font-family\\\")||\\\"Times New Roman\\\",s=\\\"16px\\\";const r=this.getAttributeStyleCss(t,\\\"font-size\\\");r&&(s=i.default.convertSizeToPx(r)+\\\"px\\\");let n=this.getAttributeStyleCss(t,\\\"font\\\");n||(n=s+\\\" \\\"+e);let o=this.getAttributeStyleCss(t,\\\"text-anchor\\\");o&&(\\\"middle\\\"===o&&(o=\\\"center\\\"),this.ctx.textAlign=o);let a=this.getAttributeStyleCss(t,\\\"fill\\\");a||(a=\\\"#000\\\"),this.ctx.font=n,this.ctx.fillStyle=a;let l=this.vdom.get(t,\\\"x\\\")||0,h=this.vdom.get(t,\\\"y\\\")||0,c=i.default.convertSizeToPx(t.dx,!1)||0,d=i.default.convertSizeToPx(t.dy,!1)||0;this.ctx.fillText(t.text,l+c,h+d)};if(\\\"start\\\"!==e)if(\\\"normal\\\"!==e){if(\\\"forcesingle\\\"===e)return r(t);if(\\\"end\\\"!==e);else for(const t of this.drawTexts)r(t)}else this.drawTexts.push(t);else this.drawTexts=[]}drawImage(t,e=\\\"normal\\\"){const s=t=>{if(\\\"\\\"===t.href)return;let e=t.fill?t.fill:t.style.fill;e||(e=\\\"#000\\\"),this.ctx.fillStyle=e;let s=this.vdom.get(t,\\\"x\\\")||0,r=this.vdom.get(t,\\\"y\\\")||0,i=t.width||0,n=t.height||0;if(t.image)try{this.ctx.drawImage(t.image,s,r,i,n)}catch(t){console.log(t)}};if(\\\"start\\\"!==e)if(\\\"normal\\\"!==e){if(\\\"forcesingle\\\"===e)return s(t);if(\\\"end\\\"!==e);else for(const t of this.drawImages)s(t)}else this.drawImages.push(t);else this.drawImages=[]}drawPath(t,e=\\\"normal\\\",s){if(\\\"normal\\\"!==e&&\\\"forcesingle\\\"!==e)return;const r=this.getFillStyle(t,\\\"#000\\\"),i=this.getStrokeStyle(t),n=this.getStrokeWidth(t);let o=new Path2D(t.d);if(this.ctx.fillStyle=r,void 0!==i&&\\\"none\\\"!==i){void 0!==n&&(this.ctx.lineWidth=n),this.ctx.strokeStyle=i;const e=this.getAttributeStyleCss(t,\\\"stroke-linejoin\\\");e&&(\\\"bevel\\\"===e||\\\"round\\\"===e||\\\"miter\\\"===e?this.ctx.lineJoin=e:console.error(\\\"unknown line join value:\\\",e)),s||this.ctx.stroke(o)}r&&\\\"none\\\"!==r&&!s&&this.ctx.fill(o),s&&s.addPath(o)}drawTspan(t,e=\\\"normal\\\"){if(\\\"normal\\\"!==e&&\\\"forcesingle\\\"!==e)return;this.ctx.font=\\\"10px Arial\\\",this.ctx.fillStyle=\\\"#000000\\\";const s=\\\"middle\\\"===t.style.textAnchor?\\\"center\\\":t.style.textAnchor;this.ctx.textAlign=s,this.ctx.fillText(t.text,this.vdom.get(t,\\\"x\\\"),this.vdom.get(t,\\\"y\\\"))}drawTextpath(t){console.warn(\\\"no draw function yet for textpath\\\")}drawLine(t,e=\\\"normal\\\"){if(this.vdom.data.scale,\\\"normal\\\"===e){const e=this.getStrokeStyle(t),s=this.getStrokeWidth(t);if(\\\"none\\\"===e||0===s)return;const r=`${e};${s}`;this.linesByColor[r]||(this.linesByColor[r]=[]),this.linesByColor[r].push(t)}if(\\\"start\\\"!==e){if(\\\"end\\\"!==e){if(\\\"forcesingle\\\"===e){this.ctx.beginPath();const[e,s,r,i]=this.vdom.get(t,[\\\"x1\\\",\\\"x2\\\",\\\"y1\\\",\\\"y2\\\"]).map(t=>Math.round(t)||0);this.ctx.moveTo(e,r),this.ctx.lineTo(s,i),this.ctx.strokeStyle=this.getStrokeStyle(t),this.ctx.lineWidth=this.getStrokeWidth(t),this.ctx.stroke()}}else for(let t in this.linesByColor)if(this.linesByColor.hasOwnProperty(t)){const e=t.split(\\\";\\\"),s=e[0],r=e[1];this.ctx.strokeStyle=s,this.ctx.lineWidth=parseFloat(r),this.ctx.beginPath();for(let e of this.linesByColor[t]){e.transform&&(this.ctx.save(),this.applyTransform(e.transform));const[t,s,r,i]=this.vdom.get(e,[\\\"x1\\\",\\\"x2\\\",\\\"y1\\\",\\\"y2\\\"]).map(t=>Math.round(t)||0);this.ctx.moveTo(t,r),this.ctx.lineTo(s,i),e.transform&&this.ctx.restore()}this.ctx.stroke()}}else this.linesByColor={}}drawDefs(t){}drawMarker(t){}applyTransform(t){const e=t?i.default.parseTransform(t):null;if(e){e.rotateLast||this.ctx.rotate(e.rotate*Math.PI/180);const t=e.translateBeforeScale?e.translateX:e.translateX*e.scaleX,s=e.translateBeforeScale?e.translateY:e.translateY*e.scaleY;return this.ctx.transform(e.scaleX,0,0,e.scaleY,t,s),e.rotateLast&&this.ctx.rotate(e.rotate*Math.PI/180),!0}return!1}};let n=0},function(t,e,s){\\\"use strict\\\";Object.defineProperty(e,\\\"__esModule\\\",{value:!0});class r{static parseTransform(t){const e={translateX:0,translateY:0,scaleX:1,scaleY:1,rotate:0,translateBeforeScale:!1,rotateLast:!1};if(t){if(\\\"string\\\"!=typeof t)return e.scaleX=t.k,e.scaleY=t.k,e.translateX=t.x,e.translateY=t.y,e.translateBeforeScale=!0,e;let s=t;s=s.replace(/ /g,\\\"\\\");const r=/\\\\s*translate\\\\(([-0-9.]+),([-0-9.]+)\\\\)/.exec(s);r&&(e.translateX=parseFloat(r[1]),e.translateY=parseFloat(r[2]));const i=/\\\\s*scale\\\\(([-0-9.]+)(,[-0-9.]+)?\\\\)/.exec(s);i&&(e.scaleX=parseFloat(i[1]),e.scaleY=i[2]?parseFloat(i[2].substr(1)):parseFloat(i[1]));const n=/\\\\s*rotate\\\\(([-0-9.]+)\\\\)/.exec(s);n&&(e.rotate=parseFloat(n[1])),/\\\\s*translate\\\\(([-0-9.]+),([-0-9.]+)\\\\)scale\\\\(([-0-9.,]+)\\\\)/.exec(s)&&(e.translateBeforeScale=!0),/\\\\s*rotate\\\\(([-0-9.,]+)\\\\)$/.exec(s)&&(e.rotateLast=!0);const o=/\\\\s*matrix\\\\(([-0-9.]+),([-0-9.]+),([-0-9.]+),([-0-9.]+),([-0-9.]+),([-0-9.]+)\\\\)/.exec(s);o&&(e.scaleX=parseFloat(o[1]),e.scaleY=parseFloat(o[4]),e.translateX=parseFloat(o[5]),e.translateY=parseFloat(o[6]))}return e}static addTransforms(t,e){return{translateX:t.translateX+e.translateX,translateY:t.translateY+e.translateY,scaleX:t.scaleX*e.scaleX,scaleY:t.scaleY*e.scaleY,rotate:t.rotate+e.rotate,translateBeforeScale:!1,rotateLast:!1}}static convertSizeToPx(t,e=!0){const s=e?14:void 0;return void 0===t?s:\\\"number\\\"==typeof t?t:\\\"em\\\"===t.substr(-2)?Math.round(12*parseFloat(t)):\\\"px\\\"===t.substr(-2)?parseInt(t):t.match(/^[0-9]+$/)?parseInt(t):(console.warn(\\\"size in unsupported format: \\\",t),s)}static colorToRgba(t,e=1,s=\\\"none\\\"){if(\\\"none\\\"===t)return t;t||(t=s);const i=`${t}-${e}`;if(r.rgbaCache[i])return r.rgbaCache[i];if(t=r.CssNamedColorToHex(t),1===e&&\\\"string\\\"==typeof t)return r.rgbaCache[i]=t,t;let n;if(\\\"string\\\"==typeof t&&\\\"#\\\"===t[0]){let s;if(!/^#([A-Fa-f0-9]{3}){1,2}$/.test(t))throw new Error(\\\"Bad Hex\\\");s=t.substring(1),3==s.length&&(s=s[0]+s[0]+s[1]+s[1]+s[2]+s[2]),s=\\\"0x\\\"+s,n=\\\"rgba(\\\"+[s>>16&255,s>>8&255,255&s].join(\\\",\\\")+\\\",\\\"+e+\\\")\\\"}else if(\\\"object\\\"==typeof t){if(\\\"r\\\"in t)n=\\\"rgba(\\\"+t.r+\\\",\\\"+t.g+\\\",\\\"+t.b+\\\",\\\"+e+\\\")\\\";else if(\\\"h\\\"in t){const s=r.hslToRgb(t.h/360,t.s,t.l);n=\\\"rgba(\\\"+s.r+\\\",\\\"+s.g+\\\",\\\"+s.b+\\\",\\\"+e+\\\")\\\"}}else\\\"rgb(\\\"===t.substr(0,4)&&(n=t.substr(0,t.length-1).replace(\\\"rgb\\\",\\\"rgba\\\")+\\\", \\\"+e+\\\")\\\");return r.rgbaCache[i]=n,n}static hslToRgb(t,e,s){var r,i,n;if(0==e)r=i=n=s;else{var o=function(t,e,s){return s<0&&(s+=1),s>1&&(s-=1),s<1/6?t+6*(e-t)*s:s<.5?e:s<2/3?t+(e-t)*(2/3-s)*6:t},a=s<.5?s*(1+e):s+e-s*e,l=2*s-a;r=o(l,a,t+1/3),i=o(l,a,t),n=o(l,a,t-1/3)}return{r:Math.round(255*r),g:Math.round(255*i),b:Math.round(255*n)}}static CssNamedColorToHex(t){return\\\"string\\\"==typeof t&&i[t.toUpperCase()]?i[t.toUpperCase()]:t}static getCssRuleSpecificityNumber(t){let e=0;t=t.replace(/ >/g,\\\">\\\").replace(/> /g,\\\">\\\");const s=[].concat.apply([],t.split(\\\" \\\").map(t=>t.split(\\\">\\\")));for(const t of s){e+=100;const s=t[0];if(\\\"#\\\"===s)e+=1e3;else if(\\\".\\\"===s){const s=t.split(\\\".\\\").length-1;e+=Math.min(900,100*s)}}return e}}e.default=r,r.rgbaCache={};const i={ALICEBLUE:\\\"#F0F8FF\\\",ANTIQUEWHITE:\\\"#FAEBD7\\\",AQUA:\\\"#00FFFF\\\",AQUAMARINE:\\\"#7FFFD4\\\",AZURE:\\\"#F0FFFF\\\",BEIGE:\\\"#F5F5DC\\\",BISQUE:\\\"#FFE4C4\\\",BLACK:\\\"#000000\\\",BLANCHEDALMOND:\\\"#FFEBCD\\\",BLUE:\\\"#0000FF\\\",BLUEVIOLET:\\\"#8A2BE2\\\",BROWN:\\\"#A52A2A\\\",BURLYWOOD:\\\"#DEB887\\\",CADETBLUE:\\\"#5F9EA0\\\",CHARTREUSE:\\\"#7FFF00\\\",CHOCOLATE:\\\"#D2691E\\\",CORAL:\\\"#FF7F50\\\",CORNFLOWERBLUE:\\\"#6495ED\\\",CORNSILK:\\\"#FFF8DC\\\",CRIMSON:\\\"#DC143C\\\",CYAN:\\\"#00FFFF\\\",DARKBLUE:\\\"#00008B\\\",DARKCYAN:\\\"#008B8B\\\",DARKGOLDENROD:\\\"#B8860B\\\",DARKGRAY:\\\"#A9A9A9\\\",DARKGREY:\\\"#A9A9A9\\\",DARKGREEN:\\\"#006400\\\",DARKKHAKI:\\\"#BDB76B\\\",DARKMAGENTA:\\\"#8B008B\\\",DARKOLIVEGREEN:\\\"#556B2F\\\",DARKORANGE:\\\"#FF8C00\\\",DARKORCHID:\\\"#9932CC\\\",DARKRED:\\\"#8B0000\\\",DARKSALMON:\\\"#E9967A\\\",DARKSEAGREEN:\\\"#8FBC8F\\\",DARKSLATEBLUE:\\\"#483D8B\\\",DARKSLATEGRAY:\\\"#2F4F4F\\\",DARKSLATEGREY:\\\"#2F4F4F\\\",DARKTURQUOISE:\\\"#00CED1\\\",DARKVIOLET:\\\"#9400D3\\\",DEEPPINK:\\\"#FF1493\\\",DEEPSKYBLUE:\\\"#00BFFF\\\",DIMGRAY:\\\"#696969\\\",DIMGREY:\\\"#696969\\\",DODGERBLUE:\\\"#1E90FF\\\",FIREBRICK:\\\"#B22222\\\",FLORALWHITE:\\\"#FFFAF0\\\",FORESTGREEN:\\\"#228B22\\\",FUCHSIA:\\\"#FF00FF\\\",GAINSBORO:\\\"#DCDCDC\\\",GHOSTWHITE:\\\"#F8F8FF\\\",GOLD:\\\"#FFD700\\\",GOLDENROD:\\\"#DAA520\\\",GRAY:\\\"#808080\\\",GREY:\\\"#808080\\\",GREEN:\\\"#008000\\\",GREENYELLOW:\\\"#ADFF2F\\\",HONEYDEW:\\\"#F0FFF0\\\",HOTPINK:\\\"#FF69B4\\\",INDIANRED:\\\"#CD5C5C\\\",INDIGO:\\\"#4B0082\\\",IVORY:\\\"#FFFFF0\\\",KHAKI:\\\"#F0E68C\\\",LAVENDER:\\\"#E6E6FA\\\",LAVENDERBLUSH:\\\"#FFF0F5\\\",LAWNGREEN:\\\"#7CFC00\\\",LEMONCHIFFON:\\\"#FFFACD\\\",LIGHTBLUE:\\\"#ADD8E6\\\",LIGHTCORAL:\\\"#F08080\\\",LIGHTCYAN:\\\"#E0FFFF\\\",LIGHTGOLDENRODYELLOW:\\\"#FAFAD2\\\",LIGHTGRAY:\\\"#D3D3D3\\\",LIGHTGREY:\\\"#D3D3D3\\\",LIGHTGREEN:\\\"#90EE90\\\",LIGHTPINK:\\\"#FFB6C1\\\",LIGHTSALMON:\\\"#FFA07A\\\",LIGHTSEAGREEN:\\\"#20B2AA\\\",LIGHTSKYBLUE:\\\"#87CEFA\\\",LIGHTSLATEGRAY:\\\"#778899\\\",LIGHTSLATEGREY:\\\"#778899\\\",LIGHTSTEELBLUE:\\\"#B0C4DE\\\",LIGHTYELLOW:\\\"#FFFFE0\\\",LIME:\\\"#00FF00\\\",LIMEGREEN:\\\"#32CD32\\\",LINEN:\\\"#FAF0E6\\\",MAGENTA:\\\"#FF00FF\\\",MAROON:\\\"#800000\\\",MEDIUMAQUAMARINE:\\\"#66CDAA\\\",MEDIUMBLUE:\\\"#0000CD\\\",MEDIUMORCHID:\\\"#BA55D3\\\",MEDIUMPURPLE:\\\"#9370DB\\\",MEDIUMSEAGREEN:\\\"#3CB371\\\",MEDIUMSLATEBLUE:\\\"#7B68EE\\\",MEDIUMSPRINGGREEN:\\\"#00FA9A\\\",MEDIUMTURQUOISE:\\\"#48D1CC\\\",MEDIUMVIOLETRED:\\\"#C71585\\\",MIDNIGHTBLUE:\\\"#191970\\\",MINTCREAM:\\\"#F5FFFA\\\",MISTYROSE:\\\"#FFE4E1\\\",MOCCASIN:\\\"#FFE4B5\\\",NAVAJOWHITE:\\\"#FFDEAD\\\",NAVY:\\\"#000080\\\",OLDLACE:\\\"#FDF5E6\\\",OLIVE:\\\"#808000\\\",OLIVEDRAB:\\\"#6B8E23\\\",ORANGE:\\\"#FFA500\\\",ORANGERED:\\\"#FF4500\\\",ORCHID:\\\"#DA70D6\\\",PALEGOLDENROD:\\\"#EEE8AA\\\",PALEGREEN:\\\"#98FB98\\\",PALETURQUOISE:\\\"#AFEEEE\\\",PALEVIOLETRED:\\\"#DB7093\\\",PAPAYAWHIP:\\\"#FFEFD5\\\",PEACHPUFF:\\\"#FFDAB9\\\",PERU:\\\"#CD853F\\\",PINK:\\\"#FFC0CB\\\",PLUM:\\\"#DDA0DD\\\",POWDERBLUE:\\\"#B0E0E6\\\",PURPLE:\\\"#800080\\\",REBECCAPURPLE:\\\"#663399\\\",RED:\\\"#FF0000\\\",ROSYBROWN:\\\"#BC8F8F\\\",ROYALBLUE:\\\"#4169E1\\\",SADDLEBROWN:\\\"#8B4513\\\",SALMON:\\\"#FA8072\\\",SANDYBROWN:\\\"#F4A460\\\",SEAGREEN:\\\"#2E8B57\\\",SEASHELL:\\\"#FFF5EE\\\",SIENNA:\\\"#A0522D\\\",SILVER:\\\"#C0C0C0\\\",SKYBLUE:\\\"#87CEEB\\\",SLATEBLUE:\\\"#6A5ACD\\\",SLATEGRAY:\\\"#708090\\\",SLATEGREY:\\\"#708090\\\",SNOW:\\\"#FFFAFA\\\",SPRINGGREEN:\\\"#00FF7F\\\",STEELBLUE:\\\"#4682B4\\\",TAN:\\\"#D2B48C\\\",TEAL:\\\"#008080\\\",THISTLE:\\\"#D8BFD8\\\",TOMATO:\\\"#FF6347\\\",TURQUOISE:\\\"#40E0D0\\\",VIOLET:\\\"#EE82EE\\\",WHEAT:\\\"#F5DEB3\\\",WHITE:\\\"#FFFFFF\\\",WHITESMOKE:\\\"#F5F5F5\\\",YELLOW:\\\"#FFFF00\\\",YELLOWGREEN:\\\"#9ACD32\\\"}}]);\\n//# sourceMappingURL=2dda38a2ceb805d06a29.worker.js.map\", __webpack_public_path__ + \"2dda38a2ceb805d06a29.worker.js\");\n};","'use strict';\n\n// http://stackoverflow.com/questions/10343913/how-to-create-a-web-worker-from-a-string\n\nvar URL = window.URL || window.webkitURL;\n\nmodule.exports = function (content, url) {\n  try {\n    try {\n      var blob;\n\n      try {\n        // BlobBuilder = Deprecated, but widely implemented\n        var BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;\n\n        blob = new BlobBuilder();\n\n        blob.append(content);\n\n        blob = blob.getBlob();\n      } catch (e) {\n        // The proposed API\n        blob = new Blob([content]);\n      }\n\n      return new Worker(URL.createObjectURL(blob));\n    } catch (e) {\n      return new Worker('data:application/javascript,' + encodeURIComponent(content));\n    }\n  } catch (e) {\n    if (!url) {\n      throw Error('Inline worker is not supported');\n    }\n\n    return new Worker(url);\n  }\n};"],"sourceRoot":""}