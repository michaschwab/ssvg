{"version":3,"sources":["webpack://SSVG/webpack/universalModuleDefinition","webpack://SSVG/webpack/bootstrap","webpack://SSVG/./canvasworker/drawingUtils.ts","webpack://SSVG/./node_modules/worker-loader/dist/workers/InlineWorker.js","webpack://SSVG/./frontend/exporter.ts","webpack://SSVG/./frontend/ssvg.ts","webpack://SSVG/./frontend/domhandler.ts","webpack://SSVG/./util/vdom/vdom-manager.ts","webpack://SSVG/./frontend/attrs.ts","webpack://SSVG/./canvasworker/canvasrenderer.ts","webpack://SSVG/./canvasworker/index.ts","webpack://SSVG/./canvasworker/canvasworker.ts","webpack://SSVG/./syncworker/index.ts","webpack://SSVG/./syncworker/syncworker.ts","webpack://SSVG/./frontend/interactionhandler.ts","webpack://SSVG/./frontend/redirector.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","DrawingUtils","[object Object]","transform","transformObject","translateX","translateY","scaleX","scaleY","rotate","translateBeforeScale","rotateLast","transformString","replace","translate","exec","parseFloat","scale","substr","matrix","transformA","transformB","size","fallback","defaultValue","undefined","Math","round","parseInt","match","console","warn","color","opacity","defaultColor","cacheKey","rgbaCache","CssNamedColorToHex","rgba","test","Error","substring","length","join","g","b","rgb","hslToRgb","h","hue2rgb","q","COLOR_HEXES","toUpperCase","selector","specificity","parts","concat","apply","split","map","part","start","countClasses","min","default","ALICEBLUE","ANTIQUEWHITE","AQUA","AQUAMARINE","AZURE","BEIGE","BISQUE","BLACK","BLANCHEDALMOND","BLUE","BLUEVIOLET","BROWN","BURLYWOOD","CADETBLUE","CHARTREUSE","CHOCOLATE","CORAL","CORNFLOWERBLUE","CORNSILK","CRIMSON","CYAN","DARKBLUE","DARKCYAN","DARKGOLDENROD","DARKGRAY","DARKGREY","DARKGREEN","DARKKHAKI","DARKMAGENTA","DARKOLIVEGREEN","DARKORANGE","DARKORCHID","DARKRED","DARKSALMON","DARKSEAGREEN","DARKSLATEBLUE","DARKSLATEGRAY","DARKSLATEGREY","DARKTURQUOISE","DARKVIOLET","DEEPPINK","DEEPSKYBLUE","DIMGRAY","DIMGREY","DODGERBLUE","FIREBRICK","FLORALWHITE","FORESTGREEN","FUCHSIA","GAINSBORO","GHOSTWHITE","GOLD","GOLDENROD","GRAY","GREY","GREEN","GREENYELLOW","HONEYDEW","HOTPINK","INDIANRED","INDIGO","IVORY","KHAKI","LAVENDER","LAVENDERBLUSH","LAWNGREEN","LEMONCHIFFON","LIGHTBLUE","LIGHTCORAL","LIGHTCYAN","LIGHTGOLDENRODYELLOW","LIGHTGRAY","LIGHTGREY","LIGHTGREEN","LIGHTPINK","LIGHTSALMON","LIGHTSEAGREEN","LIGHTSKYBLUE","LIGHTSLATEGRAY","LIGHTSLATEGREY","LIGHTSTEELBLUE","LIGHTYELLOW","LIME","LIMEGREEN","LINEN","MAGENTA","MAROON","MEDIUMAQUAMARINE","MEDIUMBLUE","MEDIUMORCHID","MEDIUMPURPLE","MEDIUMSEAGREEN","MEDIUMSLATEBLUE","MEDIUMSPRINGGREEN","MEDIUMTURQUOISE","MEDIUMVIOLETRED","MIDNIGHTBLUE","MINTCREAM","MISTYROSE","MOCCASIN","NAVAJOWHITE","NAVY","OLDLACE","OLIVE","OLIVEDRAB","ORANGE","ORANGERED","ORCHID","PALEGOLDENROD","PALEGREEN","PALETURQUOISE","PALEVIOLETRED","PAPAYAWHIP","PEACHPUFF","PERU","PINK","PLUM","POWDERBLUE","PURPLE","REBECCAPURPLE","RED","ROSYBROWN","ROYALBLUE","SADDLEBROWN","SALMON","SANDYBROWN","SEAGREEN","SEASHELL","SIENNA","SILVER","SKYBLUE","SLATEBLUE","SLATEGRAY","SLATEGREY","SNOW","SPRINGGREEN","STEELBLUE","TAN","TEAL","THISTLE","TOMATO","TURQUOISE","VIOLET","WHEAT","WHITE","WHITESMOKE","YELLOW","YELLOWGREEN","URL","webkitURL","content","url","blob","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","append","getBlob","e","Blob","Worker","createObjectURL","encodeURIComponent","ssvg_1","domhandler_1","canvasrenderer_1","__importDefault","canvasworker_1","syncworker_1","interactionhandler_1","redirector_1","options","this","svgAssignedAndSizeSet","lastCanvasDrawTimes","enterExitQueue","safeMode","useWorker","getFps","maxPixelRatio","canvas","document","createElement","worker","syncWorker","onmessage","data","msg","logDrawn","raf","updateFps","updateCanvas","requestAnimationFrame","svg","setupElementsIfSvgExists","interactions","Interactionhandler","domHandler","vdom","setupListeners","redirector","Redirector","setCanvasSize","addNode","removeNode","setTimeout","log","svgEl","getElementsByTagName","urlConnector","location","href","indexOf","svgSwitchUrl","svgSwitchComment","createComment","parent","parentElement","nextSibling","next","insertBefore","appendChild","Domhandler","getVDom","hasChanges","nodeUpdated","node","attr","renderer","applyStyles","transferBufferQueueDataToSynced","queue","getQueue","clearQueue","updatePropertiesFromQueue","sendUpdateToWorker","draw","width","height","devicePixelRatio","style","offscreen","transferControlToOffscreen","channel","MessageChannel","postMessage","cmd","visData","port","port2","port1","ensureNodesMapped","parentNode","keepChildren","push","parentGlobalIndex","globalElementIndex","childGlobalIndex","Date","now","shift","timeForTenDrawsMs","fps","enterExit","update","vdom_manager_1","drawingUtils_1","attrs_1","ignoreDesign","nodes","elements","nodesToRestyle","maxGlobalElementIndex","removedNodeIndices","type","getAttribute","children","css","VdomManager","linkNodeToElement","display","addChildNodesToVisData","childNodes","enableFrontendDesignProperties","element","attrName","ensureInitialized","getNodeFromElement","index","evaluatedValue","__data__","set","logContents","safeLogCount","safeLog","className","styleName","error","getNodeFromIndex","el","tagName","toLowerCase","id","text","textContent","RELEVANT_ATTRS","hasAttribute","ROUNDED_ATTRS","copyStylesFromElement","styleProp","CSS_STYLES","kebabCase","styleSheets","sheet","rules","cssRules","j","rule","selectorText","applyRuleToMatchingNodes","selectorString","selectorPartsLooseStrict","trim","relevantIds","nodeToBeStyled","getNodeParent","relevantIdMap","setStyle","child","longSpecName","checkNode","currentNode","looseIndex","strictIndex","selPart","childIndex","isCssRulePartialMatch","removedClass","removeRuleStylesFromNode","restyleIndex","splice","childEls","getNodeDataFromEl","parentSelector","elementType","getElementFromNode","parentEl","getNewElementIndex","isWithinSvg","getParentNode","parents","pop","totalTransform","parseTransform","addTransforms","isRenderer","sharedRenderData","values","buffers","syncedSharedData","sharedDataQueue","useSharedArrayFor","indexToNodeMap","changed","cachedListSelections","self","useBuffer","numNodes","newLength","newByteLength","Int32Array","BYTES_PER_ELEMENT","byteLength","buffer","createBufferTransferValues","prevData","SharedArrayBuffer","prevBufferVals","BUFFER_PRECISION_FACTOR","storage","addToMap","nodeData","parentNodeIndex","keys","removePendingChanges","styleValue","onNodeUpdated","applyStyleToNodeAndChildren","applyCssToNodeAndChildren","filtered","filter","attrs","Array","isArray","getSingle","setAttrQueue","attrNameStart","IGNOREDESIGN_ATTRIBUTES","childNode","lastSplitPos","lastIndexOf","selectorWithoutLast","lastPart","parentSel","nthChildPosition","selectedNodes","findMatchingChildren","visNode","addDirectChildrenIfMatch","matchIndex","selectedNodeSelectors","selParts","findChildrenOfType","matching","cssRuleSelectorPart","newSelPart","searchClassNames","allTrue","searchClassName","indexPart","targetIndex","cutoff","typeName","rect","circle","path","title","tspan","image","clippath","line","ROUNDED_ATTRS_ARR","forceSingle","onDrawn","parentValues","lastFullSecond","countSinceLastFullSecond","circlesByColor","rectsByColor","drawTexts","drawImages","linesByColor","ctx","getContext","save","restore","clearRect","drawLine","drawCircle","drawRect","drawText","drawImage","drawNodeAndChildren","fullSecond","performance","elData","drawClip","parentValuesBackup","assign","saveRestoreContext","applyTransform","clipPathId","clipNode","getNodeById","Path2D","clip","safeErrorLog","drawSingleNode","fill","stroke","drawFct","handle","getFillStyle","getStrokeStyle","strokeStyle","cx","cy","beginPath","fillStyle","lineWidth","getStrokeWidth","moveTo","arc","PI","fillAndStrokeColor","fillColor","strokeColor","sampleData","includes","getAttributeStyleCss","defaultCol","colorToRgba","highestSpec","getCssRuleSpecificityNumber","x","y","fillRect","isClip","drawSingle","fontFamily","fontSize","customSize","convertSizeToPx","font","align","textAlign","dx","dy","fillText","strokeWidth","lineJoin","addPath","textAnchor","x1","x2","y1","y2","val","lineTo","CanvasWorkerImporter","SyncWorkerImporter","interactionSelections","addEventListener","propagateMouseEvent","propagateTouchEvent","lastHovered","hoveredElement","dispatchEvent","MouseEvent","duplicateTouchEvent","propagateWheelEvent","evt","propagateEvent","createEvent","initEvent","prop","writable","touches","touch","identifier","pageX","pageY","clientX","clientY","WheelEvent","new_event","triggeredElement","getMousePosition","interactionSel","getVisNode","nodeAtPosition","childElement","event","pos","sqrt","pow","elX","elY","centerX","centerY","distanceX","abs","distanceY","getTotalTransformation","matchAny","onSvgSizeSet","onAddNode","onRemoveNode","onSvgAppended","svgIsAssignedAndSizeSet","unassignedNodes","captureD3On","replaceNativeRemoveChild","replaceNativeAttribute","replaceNativePathFunctions","replaceNativeCreateElement","replaceNativeAppendChild","replaceD3Attr","replaceNativeSelect","replaceNativeGetComputedStyle","replaceD3Select","replaceD3Remove","d3","originalOn","selection","on","me","_parents","arguments","getReplacement","original","_groups","childElements","getVisNodesFromSelector","returnValue","forEach","childEl","selectAll","select","origFilter","firstElement","selectors","sel","filteredNodes","matchingNodes","filterNodesBySelector","filteredElements","origGetComputedStyle","getComputedStyle","getPropertyValue","propertyName","origQuerySelector","Element","querySelector","originalFct","prefix","els","returnVal","getAttributeFromSelector","queueSetAttributeOnElement","queueSetAttributeOnSelection","origSelectionAttr","origSelectionStyle","originalClassed","classed","prevClassNames","newClassNames","originalTransition","transition","originalText","newRemove","getNewRemoveChild","d3Remove","remove","origCreate","createElementNS","newArgs","from","getNewAppendChild","origRemoveChild","skipUpdateSelectors","removeChild","origAppend","appended","el2","setProperty","removeProperty","addNodeToParent","restyleNode","origAppendChild","newAppend","newChild","refChild","origGetTotalLength","SVGPathElement","getTotalLength","origSetAttribute","setAttribute","getNewSetAttr","origSetAttr","setAttributeNS","origGetAttr"],"mappings":"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","file":"ssvg.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SSVG\"] = factory();\n\telse\n\t\troot[\"SSVG\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","export type Transformation = {\n    translateX: number,\n    translateY: number,\n    scaleX: number,\n    scaleY: number,\n    rotate: number,\n    translateBeforeScale: boolean,\n    rotateLast: boolean,\n}\n\nexport default class DrawingUtils {\n    static parseTransform(transform: string|{}): Transformation {\n        const transformObject: Transformation = {\n            translateX: 0,\n            translateY: 0,\n            scaleX: 1,\n            scaleY: 1,\n            rotate: 0,\n            translateBeforeScale: false,\n            rotateLast: false\n        };\n        \n        if (transform) {\n            if(typeof transform !== \"string\") {\n                transformObject.scaleX = transform['k'];\n                transformObject.scaleY = transform['k'];\n                transformObject.translateX = transform['x'];\n                transformObject.translateY = transform['y'];\n                transformObject.translateBeforeScale = true;\n                return transformObject;\n            }\n            let transformString = <string> transform;\n            transformString = transformString.replace(/ /g, '');\n            \n            //let translate  = /translate\\((\\d+),(\\d+)\\)/.exec(transform);\n            const translate = /\\s*translate\\(([-0-9.]+),([-0-9.]+)\\)/.exec(transformString);\n            if (translate) {\n                transformObject.translateX = parseFloat(translate[1]);\n                transformObject.translateY = parseFloat(translate[2]);\n            }\n            else {\n                //console.error('no translate found', transform);\n            }\n            \n            const scale = /\\s*scale\\(([-0-9.]+)(,[-0-9.]+)?\\)/.exec(transformString);\n            if (scale) {\n                transformObject.scaleX = parseFloat(scale[1]);\n                transformObject.scaleY = scale[2] ? parseFloat(scale[2].substr(1)) : parseFloat(scale[1]);\n            }\n            else {\n                //console.error('no scale found', transform);\n            }\n            \n            const rotate = /\\s*rotate\\(([-0-9.]+)\\)/.exec(transformString);\n            if (rotate) {\n                transformObject.rotate = parseFloat(rotate[1]);\n            }\n            else {\n                //console.error('no rotate found', transform);\n            }\n            \n            const translateScale = /\\s*translate\\(([-0-9.]+),([-0-9.]+)\\)scale\\(([-0-9.,]+)\\)/.exec(transformString);\n            if (translateScale) {\n                transformObject.translateBeforeScale = true;\n            }\n\n            const rotateLast = /\\s*rotate\\(([-0-9.,]+)\\)$/.exec(transformString);\n            if (rotateLast) {\n                transformObject.rotateLast = true;\n            }\n            \n            const matrix = /\\s*matrix\\(([-0-9.]+),([-0-9.]+),([-0-9.]+),([-0-9.]+),([-0-9.]+),([-0-9.]+)\\)/.exec(transformString);\n            if(matrix) {\n                transformObject.scaleX = parseFloat(matrix[1]);\n                // 2 is horizontal skewing\n                // 3 is vertical skewing\n                transformObject.scaleY = parseFloat(matrix[4]);\n                transformObject.translateX = parseFloat(matrix[5]);\n                transformObject.translateY = parseFloat(matrix[6]);\n            }\n        }\n        \n        return transformObject;\n    }\n\n    static addTransforms(transformA: Transformation, transformB: Transformation): Transformation {\n        return {\n            translateX: transformA.translateX + transformB.translateX,\n            translateY: transformA.translateY + transformB.translateY,\n            scaleX: transformA.scaleX * transformB.scaleX,\n            scaleY: transformA.scaleY * transformB.scaleY,\n            rotate: transformA.rotate + transformB.rotate,\n            translateBeforeScale: false,\n            rotateLast: false\n        };\n        //TODO: consider translateBeforeScale and rotateLast\n    }\n\n    static convertSizeToPx(size: string|number, fallback = true): number|undefined {\n        const defaultValue = fallback ? 14 : undefined;\n        if(size === undefined) {\n            return defaultValue;\n        }\n        if(typeof size === \"number\") {\n            return size;\n        }\n        if(size.substr(-2) === 'em') {\n            return Math.round(parseFloat(size) * 12);\n        }\n        if(size.substr(-2) === 'px') {\n            return parseInt(size);\n        }\n        if(size.match(/^[0-9]+$/)) {\n            return parseInt(size);\n        }\n        console.warn('size in unsupported format: ', size);\n        return defaultValue;\n    }\n\n    static rgbaCache = {};\n    static colorToRgba(color: string|{r: number, g: number, b: number}|{h: number, s: number, l: number},\n                       opacity: string|number = 1,\n                       defaultColor ='none'): string {\n        if(color === 'none') {\n            return color;\n        }\n        if(!color) {\n            color = defaultColor;\n        }\n        const cacheKey = `${color}-${opacity}`;\n        if(DrawingUtils.rgbaCache[cacheKey]) {\n            return DrawingUtils.rgbaCache[cacheKey];\n        }\n\n        color = DrawingUtils.CssNamedColorToHex(color);\n        if(opacity === 1 && typeof color === 'string') {\n            DrawingUtils.rgbaCache[cacheKey] = color;\n            return color;\n        }\n        let rgba: string;\n        if(typeof color === 'string' && color[0] === '#') {\n            let c; // From https://stackoverflow.com/questions/21646738/convert-hex-to-rgba\n            if(/^#([A-Fa-f0-9]{3}){1,2}$/.test(color)){\n                c = color.substring(1);\n                if(c.length == 3){\n                    c = c[0] + c[0] + c[1] + c[1] + c[2] + c[2];\n                }\n                c = '0x' + c;\n                rgba = 'rgba('+[(c>>16)&255, (c>>8)&255, c&255].join(',')+',' + opacity + ')';\n            } else {\n                throw new Error('Bad Hex');\n            }\n        } else if(typeof color === 'object') {\n            if('r' in color) {\n                rgba = 'rgba(' + color.r + ',' + color.g + ',' + color.b + ',' + opacity + ')';\n            } else if('h' in color) {\n                const rgb = DrawingUtils.hslToRgb(color.h / 360, color.s, color.l);\n                rgba = 'rgba(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ',' + opacity + ')';\n            }\n        } else if(color.substr(0, 4) === 'rgb(') {\n            rgba = color.substr(0, color.length - 1).replace('rgb','rgba') +\n                ', ' + opacity + ')';\n        }\n        DrawingUtils.rgbaCache[cacheKey] = rgba;\n        return rgba;\n    }\n\n    // From https://stackoverflow.com/questions/2353211/hsl-to-rgb-color-conversion\n    static hslToRgb(h, s, l) {\n        var r, g, b;\n\n        if(s == 0){\n            r = g = b = l; // achromatic\n        } else {\n            var hue2rgb = function hue2rgb(p, q, t){\n                if(t < 0) t += 1;\n                if(t > 1) t -= 1;\n                if(t < 1/6) return p + (q - p) * 6 * t;\n                if(t < 1/2) return q;\n                if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;\n                return p;\n            };\n\n            var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n            var p = 2 * l - q;\n            r = hue2rgb(p, q, h + 1/3);\n            g = hue2rgb(p, q, h);\n            b = hue2rgb(p, q, h - 1/3);\n        }\n\n        return {r: Math.round(r * 255), g: Math.round(g * 255), b: Math.round(b * 255)};\n    }\n\n    static CssNamedColorToHex(color: any) {\n        if(typeof color === 'string' && COLOR_HEXES[color.toUpperCase()]) {\n            return COLOR_HEXES[color.toUpperCase()];\n        }\n        return color;\n    }\n\n    /**\n     * Basic implementation to get a sense of specificity. Numbers are completely made up.\n     * Should eventually be more sophisticated, e.g. using https://github.com/keeganstreet/specificity.\n     * @param selector CSS rule as string.\n     */\n    static getCssRuleSpecificityNumber(selector: string) {\n        let specificity = 0;\n\n        selector = selector\n            .replace(/ >/g, '>')\n            .replace(/> /g, '>');\n\n        const parts = [].concat.apply([], selector.split(' ')\n            .map(part => part.split('>')));\n\n        // Rough logic: the more stuff, the more specific. IDs and classes are more specific than other things.\n        for(const part of parts) {\n            specificity += 100;\n            const start = part[0];\n\n            if(start === '#') {\n                specificity += 1000;\n            } else if(start === '.') {\n                // More classes are more specific, but never more specific than an ID.\n                const countClasses = part.split('.').length - 1;\n                specificity += Math.min(900, countClasses * 100);\n            }\n        }\n\n        return specificity;\n    }\n}\n\nconst COLOR_HEXES = {\n    ALICEBLUE: '#F0F8FF',\n    ANTIQUEWHITE: '#FAEBD7',\n    AQUA: '#00FFFF',\n    AQUAMARINE: '#7FFFD4',\n    AZURE: '#F0FFFF',\n    BEIGE: '#F5F5DC',\n    BISQUE: '#FFE4C4',\n    BLACK: '#000000',\n    BLANCHEDALMOND: '#FFEBCD',\n    BLUE: '#0000FF',\n    BLUEVIOLET: '#8A2BE2',\n    BROWN: '#A52A2A',\n    BURLYWOOD: '#DEB887',\n    CADETBLUE: '#5F9EA0',\n    CHARTREUSE: '#7FFF00',\n    CHOCOLATE: '#D2691E',\n    CORAL: '#FF7F50',\n    CORNFLOWERBLUE: '#6495ED',\n    CORNSILK: '#FFF8DC',\n    CRIMSON: '#DC143C',\n    CYAN: '#00FFFF',\n    DARKBLUE: '#00008B',\n    DARKCYAN: '#008B8B',\n    DARKGOLDENROD: '#B8860B',\n    DARKGRAY: '#A9A9A9',\n    DARKGREY: '#A9A9A9',\n    DARKGREEN: '#006400',\n    DARKKHAKI: '#BDB76B',\n    DARKMAGENTA: '#8B008B',\n    DARKOLIVEGREEN: '#556B2F',\n    DARKORANGE: '#FF8C00',\n    DARKORCHID: '#9932CC',\n    DARKRED: '#8B0000',\n    DARKSALMON: '#E9967A',\n    DARKSEAGREEN: '#8FBC8F',\n    DARKSLATEBLUE: '#483D8B',\n    DARKSLATEGRAY: '#2F4F4F',\n    DARKSLATEGREY: '#2F4F4F',\n    DARKTURQUOISE: '#00CED1',\n    DARKVIOLET: '#9400D3',\n    DEEPPINK: '#FF1493',\n    DEEPSKYBLUE: '#00BFFF',\n    DIMGRAY: '#696969',\n    DIMGREY: '#696969',\n    DODGERBLUE: '#1E90FF',\n    FIREBRICK: '#B22222',\n    FLORALWHITE: '#FFFAF0',\n    FORESTGREEN: '#228B22',\n    FUCHSIA: '#FF00FF',\n    GAINSBORO: '#DCDCDC',\n    GHOSTWHITE: '#F8F8FF',\n    GOLD: '#FFD700',\n    GOLDENROD: '#DAA520',\n    GRAY: '#808080',\n    GREY: '#808080',\n    GREEN: '#008000',\n    GREENYELLOW: '#ADFF2F',\n    HONEYDEW: '#F0FFF0',\n    HOTPINK: '#FF69B4',\n    INDIANRED: '#CD5C5C',\n    INDIGO: '#4B0082',\n    IVORY: '#FFFFF0',\n    KHAKI: '#F0E68C',\n    LAVENDER: '#E6E6FA',\n    LAVENDERBLUSH: '#FFF0F5',\n    LAWNGREEN: '#7CFC00',\n    LEMONCHIFFON: '#FFFACD',\n    LIGHTBLUE: '#ADD8E6',\n    LIGHTCORAL: '#F08080',\n    LIGHTCYAN: '#E0FFFF',\n    LIGHTGOLDENRODYELLOW: '#FAFAD2',\n    LIGHTGRAY: '#D3D3D3',\n    LIGHTGREY: '#D3D3D3',\n    LIGHTGREEN: '#90EE90',\n    LIGHTPINK: '#FFB6C1',\n    LIGHTSALMON: '#FFA07A',\n    LIGHTSEAGREEN: '#20B2AA',\n    LIGHTSKYBLUE: '#87CEFA',\n    LIGHTSLATEGRAY: '#778899',\n    LIGHTSLATEGREY: '#778899',\n    LIGHTSTEELBLUE: '#B0C4DE',\n    LIGHTYELLOW: '#FFFFE0',\n    LIME: '#00FF00',\n    LIMEGREEN: '#32CD32',\n    LINEN: '#FAF0E6',\n    MAGENTA: '#FF00FF',\n    MAROON: '#800000',\n    MEDIUMAQUAMARINE: '#66CDAA',\n    MEDIUMBLUE: '#0000CD',\n    MEDIUMORCHID: '#BA55D3',\n    MEDIUMPURPLE: '#9370DB',\n    MEDIUMSEAGREEN: '#3CB371',\n    MEDIUMSLATEBLUE: '#7B68EE',\n    MEDIUMSPRINGGREEN: '#00FA9A',\n    MEDIUMTURQUOISE: '#48D1CC',\n    MEDIUMVIOLETRED: '#C71585',\n    MIDNIGHTBLUE: '#191970',\n    MINTCREAM: '#F5FFFA',\n    MISTYROSE: '#FFE4E1',\n    MOCCASIN: '#FFE4B5',\n    NAVAJOWHITE: '#FFDEAD',\n    NAVY: '#000080',\n    OLDLACE: '#FDF5E6',\n    OLIVE: '#808000',\n    OLIVEDRAB: '#6B8E23',\n    ORANGE: '#FFA500',\n    ORANGERED: '#FF4500',\n    ORCHID: '#DA70D6',\n    PALEGOLDENROD: '#EEE8AA',\n    PALEGREEN: '#98FB98',\n    PALETURQUOISE: '#AFEEEE',\n    PALEVIOLETRED: '#DB7093',\n    PAPAYAWHIP: '#FFEFD5',\n    PEACHPUFF: '#FFDAB9',\n    PERU: '#CD853F',\n    PINK: '#FFC0CB',\n    PLUM: '#DDA0DD',\n    POWDERBLUE: '#B0E0E6',\n    PURPLE: '#800080',\n    REBECCAPURPLE: '#663399',\n    RED: '#FF0000',\n    ROSYBROWN: '#BC8F8F',\n    ROYALBLUE: '#4169E1',\n    SADDLEBROWN: '#8B4513',\n    SALMON: '#FA8072',\n    SANDYBROWN: '#F4A460',\n    SEAGREEN: '#2E8B57',\n    SEASHELL: '#FFF5EE',\n    SIENNA: '#A0522D',\n    SILVER: '#C0C0C0',\n    SKYBLUE: '#87CEEB',\n    SLATEBLUE: '#6A5ACD',\n    SLATEGRAY: '#708090',\n    SLATEGREY: '#708090',\n    SNOW: '#FFFAFA',\n    SPRINGGREEN: '#00FF7F',\n    STEELBLUE: '#4682B4',\n    TAN: '#D2B48C',\n    TEAL: '#008080',\n    THISTLE: '#D8BFD8',\n    TOMATO: '#FF6347',\n    TURQUOISE: '#40E0D0',\n    VIOLET: '#EE82EE',\n    WHEAT: '#F5DEB3',\n    WHITE: '#FFFFFF',\n    WHITESMOKE: '#F5F5F5',\n    YELLOW: '#FFFF00',\n    YELLOWGREEN: '#9ACD32'\n};\n\n","'use strict';\n\n// http://stackoverflow.com/questions/10343913/how-to-create-a-web-worker-from-a-string\n\nvar URL = window.URL || window.webkitURL;\n\nmodule.exports = function (content, url) {\n  try {\n    try {\n      var blob;\n\n      try {\n        // BlobBuilder = Deprecated, but widely implemented\n        var BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;\n\n        blob = new BlobBuilder();\n\n        blob.append(content);\n\n        blob = blob.getBlob();\n      } catch (e) {\n        // The proposed API\n        blob = new Blob([content]);\n      }\n\n      return new Worker(URL.createObjectURL(blob));\n    } catch (e) {\n      return new Worker('data:application/javascript,' + encodeURIComponent(content));\n    }\n  } catch (e) {\n    if (!url) {\n      throw Error('Inline worker is not supported');\n    }\n\n    return new Worker(url);\n  }\n};","import SSVG from \"./ssvg\";\n\nexport = SSVG;","import {VdomManager} from \"../util/vdom/vdom-manager\";\nimport {CanvasUpdateWorkerMessage, CanvasUpdateData} from \"../util/canvas-worker-message\";\nimport {Domhandler, SsvgElement} from \"./domhandler\";\nimport CanvasWorker from \"../canvasworker/canvasworker\";\nimport Canvasrenderer from \"../canvasworker/canvasrenderer\";\nimport CanvasWorkerImporter from '../canvasworker';\n// @ts-ignore\nimport SyncWorkerImporter from '../syncworker';\nimport {Interactionhandler} from \"./interactionhandler\";\nimport {Redirector} from \"./redirector\";\nimport {VdomNode} from \"../util/vdom/vdom\";\n\nexport default class SSVG {\n    private worker: Worker;\n    private syncWorker: Worker;\n    private domHandler: Domhandler;\n    private vdom: VdomManager;\n    private interactions: Interactionhandler;\n    private renderer: CanvasWorker;\n    private redirector: Redirector;\n\n    private svg: (SVGElement & SsvgElement)|undefined;\n    private readonly canvas: HTMLCanvasElement;\n    private svgAssignedAndSizeSet = false;\n    \n    private lastCanvasDrawTimes: number[] = [];\n    \n    private enterExitQueue: CanvasUpdateData[] = [];\n\n    private readonly safeMode: boolean = false;\n    private readonly maxPixelRatio: number|undefined;\n    private readonly useWorker: boolean = true;\n    private readonly getFps: (fps: number) => void = () => {};\n\n    constructor(options?: {\n        safeMode?: boolean,\n        maxPixelRatio?: number,\n        useWorker?: boolean,\n        getFps?: (fps: number) => void,\n        svg?: SVGElement & SsvgElement,\n    }) {\n        if(options) {\n            if(options.safeMode !== undefined) {\n                this.safeMode = options.safeMode;\n            }\n            this.maxPixelRatio = options.maxPixelRatio;\n            if(options.useWorker !== undefined) {\n                this.useWorker = options.useWorker;\n            }\n            if(options.getFps !== undefined) {\n                this.getFps = options.getFps;\n            }\n        }\n\n        this.canvas = document.createElement('canvas');\n        if(!('OffscreenCanvas' in window)) {\n            this.useWorker = false;\n        }\n\n        if(this.useWorker) {\n            this.worker = new CanvasWorkerImporter();\n            this.syncWorker = new SyncWorkerImporter();\n    \n            this.worker.onmessage = e => {\n                if(e.data && e.data.msg && e.data.msg === 'DRAWN') {\n                    this.logDrawn();\n                    //this.updateCanvas();\n                }\n            };\n            const raf = () => {\n                this.updateFps();\n                this.updateCanvas();\n                requestAnimationFrame(raf);\n            };\n            raf();\n        } else {\n            const raf = () => {\n                this.updateFps();\n                this.logDrawn();\n                this.updateCanvas();\n                requestAnimationFrame(raf);\n            };\n            raf();\n        }\n\n        const svg = options && options.svg ? options.svg : undefined;\n        this.setupElementsIfSvgExists(svg);\n        \n        this.interactions = new Interactionhandler(this.canvas, this.svg, this.domHandler, this.vdom);\n        this.interactions.setupListeners();\n\n        this.redirector = new Redirector(this.svg, this.domHandler, this.vdom, this.interactions,\n            this.setCanvasSize.bind(this), this.addNode.bind(this), this.removeNode.bind(this),\n            () => this.svgAssignedAndSizeSet, this.setupElementsIfSvgExists.bind(this));\n\n        setTimeout(() => {\n            console.log(this.vdom.data);\n        }, 1000);\n    }\n    \n    private setupElementsIfSvgExists(svgEl?: SVGElement & SsvgElement) {\n        if(this.svg) {\n            return true;\n        }\n\n        const svg = !svgEl ? document.getElementsByTagName('svg')[0] : svgEl;\n        \n        if(!svg) {\n            return false;\n        }\n\n        const urlConnector = document.location.href.indexOf('?') === -1 ? '?' : '&';\n        const svgSwitchUrl = document.location.href + urlConnector + 'svg';\n        const svgSwitchComment = document.createComment(' This project uses SSVG.io to render a SVG as Canvas.\\r\\n' +\n            'To inspect the SVG, please open the following URL:\\r\\n' +\n            svgSwitchUrl + '\\r\\n');\n        \n        this.svg = svg as SVGElement & SsvgElement;\n        const parent = this.svg.parentElement;\n\n        if(this.svg.nextSibling) {\n            const next = this.svg.nextSibling;\n            parent.insertBefore(svgSwitchComment, next);\n            parent.insertBefore(this.canvas, next);\n        } else {\n            parent.appendChild(svgSwitchComment);\n            parent.appendChild(this.canvas);\n        }\n\n        this.domHandler = new Domhandler(this.svg, this.useWorker, this.useWorker);\n        this.vdom = this.domHandler.getVDom();\n\n        this.setCanvasSize();\n        \n        return true;\n    }\n\n    private updateCanvas() {\n        if(!this.svgAssignedAndSizeSet) {\n            return;\n        }\n\n        if(!this.vdom.hasChanges() && !this.domHandler.hasChanges()) {\n            return;\n        }\n\n        const nodeUpdated = this.useWorker ? undefined : (node, attr) =>\n            this.renderer.nodeUpdated(node, attr);\n        this.domHandler.applyStyles();\n\n        this.vdom.transferBufferQueueDataToSynced();\n        const queue = this.vdom.getQueue();\n        this.vdom.clearQueue();\n        this.vdom.updatePropertiesFromQueue(queue, nodeUpdated);\n\n        if(this.useWorker) {\n            this.sendUpdateToWorker(queue);\n        } else {\n            if(this.renderer.updatePropertiesFromQueue) {\n                this.renderer.updatePropertiesFromQueue(queue);\n            }\n            this.renderer.draw();\n        }\n    }\n    \n    private setCanvasSize() {\n        if(!this.svg || !this.vdom.data.width || !this.vdom.data.height) {\n            return;\n        }\n        this.vdom.data.scale = window.devicePixelRatio;\n        if(this.maxPixelRatio !== undefined && this.vdom.data.scale > this.maxPixelRatio) {\n            this.vdom.data.scale = this.maxPixelRatio;\n        }\n    \n        this.canvas.style.width = this.vdom.data.width + 'px';\n        this.canvas.style.height = this.vdom.data.height + 'px';\n        this.canvas.width = this.vdom.data.width * this.vdom.data.scale;\n        this.canvas.height = this.vdom.data.height * this.vdom.data.scale;\n        \n        if(this.useWorker) {\n            const offscreen = (this.canvas as any).transferControlToOffscreen();\n            const channel = new MessageChannel();\n            this.worker.postMessage({cmd: 'INIT', data: {\n                    canvas: offscreen,\n                    visData: this.vdom.data,\n                    safeMode: this.safeMode,\n                    port: channel.port2\n                }\n            }, [offscreen, channel.port2]);\n            this.syncWorker.postMessage({cmd: 'INIT', data: {\n                    visData: this.vdom.data,\n                    safeMode: this.safeMode,\n                    port: channel.port1\n                }\n            }, [channel.port1]);\n\n            this.vdom.ensureNodesMapped();\n        } else {\n            this.renderer = new Canvasrenderer(this.vdom, this.canvas, this.safeMode, () => {});\n        }\n        \n        this.svgAssignedAndSizeSet = true;\n    }\n\n    addNode(node: VdomNode, parentNode: VdomNode, keepChildren: boolean) {\n        if(this.useWorker) {\n            this.enterExitQueue.push({\n                cmd: 'ENTER',\n                node: node,\n                parentGlobalIndex: parentNode.globalElementIndex,\n                keepChildren: keepChildren\n            });\n        } else {\n            if(this.renderer.addNode) {\n                this.renderer.addNode(node);\n            }\n        }\n    }\n\n    removeNode(node: VdomNode, parentNode: VdomNode) {\n        this.enterExitQueue.push({\n            cmd: 'EXIT',\n            childGlobalIndex: node.globalElementIndex,\n            parentGlobalIndex: parentNode.globalElementIndex\n        });\n    }\n    \n    private logDrawn() {\n        this.lastCanvasDrawTimes.push(Date.now());\n        \n        if(this.lastCanvasDrawTimes.length > 20) {\n            this.lastCanvasDrawTimes.shift(); // Remove first item\n        }\n    }\n    \n    private updateFps() {\n        if(this.lastCanvasDrawTimes.length) {\n            const timeForTenDrawsMs = Date.now() - this.lastCanvasDrawTimes[0];\n            const fps = Math.round(this.lastCanvasDrawTimes.length / timeForTenDrawsMs * 1000);\n            this.getFps(fps);\n        }\n    }\n\n    private sendUpdateToWorker(queue) {\n        const msg: CanvasUpdateWorkerMessage = {\n            cmd: 'UPDATE_NODES',\n            data: {\n                enterExit: this.enterExitQueue,\n                update: queue,\n            }\n        };\n\n        this.syncWorker.postMessage(msg);\n        //this.worker.postMessage(msg);\n        this.enterExitQueue = [];\n    }\n}\n\n\nlet safeLogCount = 0;\nfunction safeLog(...logContents) {\n    \n    if(safeLogCount < 200) {\n        safeLogCount++;\n        console.log(...logContents);\n    }\n}\nfunction safeErrorLog(...logContents) {\n    \n    if(safeLogCount < 200) {\n        safeLogCount++;\n        console.error(...logContents);\n    }\n}\n","import {VDOM, VdomNode, VdomNodeType} from \"../util/vdom/vdom\";\nimport {VdomManager} from \"../util/vdom/vdom-manager\";\nimport DrawingUtils, {Transformation} from \"../canvasworker/drawingUtils\";\nimport {CSS_STYLES, RELEVANT_ATTRS, ROUNDED_ATTRS} from \"./attrs\";\n\nexport class Domhandler {\n    private readonly vdom: VdomManager;\n    nodes: {[globalElementIndex: number]: VdomNode} = {};\n    elements: {[globalElementIndex: number]: SsvgElement} = {};\n    private nodesToRestyle: VdomNode[] = [];\n    private maxGlobalElementIndex = 0;\n    private removedNodeIndices: number[] = [];\n\n    constructor(private svg: SVGElement & SsvgElement, useWorker: boolean, private ignoreDesign: boolean) {\n        const visData: VDOM = {\n            type: 'svg',\n            width: parseInt(this.svg.getAttribute('width')),\n            height: parseInt(this.svg.getAttribute('height')),\n            scale: 1,\n            children: [],\n            globalElementIndex: 0,\n            style: {},\n            css: {},\n        };\n\n        this.vdom = new VdomManager(visData, ignoreDesign, false);\n        this.linkNodeToElement(visData, this.svg);\n        this.svg.style.display = 'none';\n        this.svg['selector'] = 'svg';\n\n        this.addChildNodesToVisData(this.svg.childNodes, this.vdom.data);\n    }\n\n    hasChanges() {\n        return this.nodesToRestyle.length > 0;\n    }\n\n    enableFrontendDesignProperties() {\n        this.ignoreDesign = false;\n        this.vdom.enableFrontendDesignProperties();\n    }\n    \n    getVDom() {\n        return this.vdom;\n    }\n    \n    queueSetAttributeOnElement(element: SsvgElement, attrName: string,\n                               value: (number|string|((el: HTMLElement) => (number|string)))) {\n        //TODO: merge with updatePropertiesFromQueue from VdomManager?\n        this.vdom.ensureInitialized(attrName, false);\n\n        const node = this.getNodeFromElement(element);\n\n        const parentIndices = this.getNodeFromElement(element.parentNode as SsvgElement)\n            .children.map(n => n.globalElementIndex);\n        const index = parentIndices.indexOf(node.globalElementIndex);\n        const evaluatedValue = typeof value === \"function\" ?\n            value.call(element, element.__data__, index) : value;\n\n        if(!node) {\n            console.error('node not found for ', element);\n            return;\n        }\n        this.vdom.set(node, attrName, evaluatedValue, false);\n\n        if(attrName === \"href\") {\n            safeLog('href not yet supported.');\n            /*\n            try {\n                fetch(location.origin + evaluatedValue, {mode: 'cors'})\n                    .then(resp => resp.blob())\n                    .then(blob => createImageBitmap(blob))\n                    .then(bitmap => {\n                        this.vdom.ensureInitialized('image', false);\n                        this.vdom.set(node, 'image', <string> bitmap, false);\n                    });\n            }\n            catch(e) {console.log(e);}\n            */\n        }\n\n        if(attrName === 'class' || attrName.indexOf('style') !== -1) {\n            // Apply classes immediately so styles can be applied correctly.\n            if(attrName === 'class') {\n                node.className = evaluatedValue;\n                this.nodesToRestyle.push(node);\n            } else {\n                const styleName = attrName.substr(6);\n                if(!node.style) {\n                    console.error('no styles on node ', node);\n                }\n                node.style[styleName] = evaluatedValue;\n            }\n        }\n    }\n\n    queueSetAttributeOnSelection(elements: SsvgElement[], attrName: string, value) {\n        if(!elements.length) return;\n        if(!elements[0]) {\n            //console.error('selection elements not found', elements);\n            return;\n        }\n\n        this.vdom.ensureInitialized(attrName, true, this.maxGlobalElementIndex);\n\n        for(let i = 0; i < elements.length; i++) {\n            const element = elements[i];\n            const evaluatedValue = typeof value === \"function\"\n                ? value(element.__data__, i) : value;\n\n            this.vdom.set(element, attrName, evaluatedValue);\n\n            //TODO: re-implement.\n            /*if(attrName === \"href\") {\n                try {\n                    fetch(location.origin + evaluatedValue, {mode: 'cors'})\n                    .then(resp => resp.blob())\n                    .then(blob => createImageBitmap(blob))\n                    .then(bitmap => {\n                        //this.checkAttrName(parentSelector, \"image\", useSharedArray, parentNode);\n                        this.setAttrQueue.ensureInitialized(\"image\", false);\n                        this.setAttrQueue[parentSelector][\"image\"][indexOfParent] = bitmap;\n                    });\n                }\n                catch(e) {console.log(e);}\n            }*/\n        }\n\n        if(attrName === 'className' || attrName.indexOf('style') !== -1) {\n            // Apply classes immediately so styles can be applied correctly.\n            for(let i = 0; i < elements.length; i++) {\n                const element = elements[i];\n                const node = this.getNodeFromElement(element);\n                const evaluatedValue = typeof value === \"function\" ? value(element.__data__, i) : value;\n\n                if(attrName === 'className') {\n                    node.className = evaluatedValue;\n                    this.nodesToRestyle.push(node);\n                } else {\n                    const styleName = attrName.substr(6);\n                    node.style[styleName] = evaluatedValue;\n                }\n            }\n        }\n    }\n\n    getAttributeFromSelector(element: SsvgElement, name: string) {\n        const node = this.getNodeFromElement(element);\n        \n        if(!node) {\n            console.error('trying to get attribute for unfit selection', node, element, name);\n            throw Error('element not found');\n        }\n        \n        return node[name];\n    }\n    \n    getVisNode(element: SsvgElement): VdomNode|null {\n        if(element === this.svg) {\n            return this.vdom.data;\n        }\n        return this.vdom.getNodeFromIndex(element.globalElementIndex);\n    }\n    \n    getNodeDataFromEl(el: HTMLElement): VdomNode {\n        const type = el.tagName.toLowerCase() as VdomNodeType;\n        const node = {\n            type,\n            className: el.getAttribute('class'),\n            transform: el.getAttribute('transform'),\n            id: el.getAttribute('id'),\n            style: {},\n            css: {},\n            children: [],\n            globalElementIndex: -1,\n            text: !el.childNodes || (el.childNodes.length === 1 && !(el.childNodes[0] as HTMLElement).tagName)\n                ? el.textContent : undefined,\n        };\n\n        for(const attr of RELEVANT_ATTRS[type]) {\n            if(el.hasAttribute(attr)) {\n                const value = el.getAttribute(attr);\n                node[attr] = ROUNDED_ATTRS[attr] ? parseFloat(value) : value;\n            }\n        }\n\n        this.copyStylesFromElement(el, node);\n\n        /*const clean = obj => {\n            const propNames = Object.getOwnPropertyNames(obj);\n            for (let i = 0; i < propNames.length; i++) {\n                const propName = propNames[i];\n                if (obj[propName] === null || obj[propName] === undefined) {\n                    delete obj[propName];\n                }\n            }\n        };\n        \n        clean(node);*/\n        \n        return node;\n    }\n\n    copyStylesFromElement(el: HTMLElement, node: VdomNode) {\n        for(const styleProp of CSS_STYLES) {\n            if(el.style.hasOwnProperty(styleProp)) {\n                const val = el.style[styleProp];\n                if(val && typeof el.style[styleProp] !== 'function') {\n                    const kebabCase = styleProp.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n                    node.style[kebabCase] = el.style[styleProp];\n                }\n            }\n        }\n    }\n\n    applyStyles() {\n        if(!this.nodesToRestyle || !this.nodesToRestyle.length) {\n            return;\n        }\n\n        for (let i = 0; i < document.styleSheets.length; i++) {\n            const sheet = document.styleSheets[i] as any;\n            const rules = (sheet.rules ? sheet.rules : sheet.cssRules) as CSSRuleList;\n        \n            for (let j = 0; j < rules.length; j++) {\n                const rule = rules[j] as any;\n                const selector = rule.selectorText as string;\n                if(!selector) {\n                    continue; // Skip @imports etc.\n                }\n                this.applyRuleToMatchingNodes(selector, rule);\n            }\n        }\n\n        this.nodesToRestyle = [];\n    }\n\n    private applyRuleToMatchingNodes(selectorString: string, rule: {style: {[settingName: string]: string}}): boolean {\n        selectorString = selectorString.trim();\n\n        const selector = selectorString\n            .replace(' >', '>')\n            .replace('> ', '>')\n            .replace('svg>', '');\n        \n        const selectorPartsLooseStrict = selector.split(' ')\n            .map(part => part.split('>'));\n\n        // Find all relevant element IDs.\n        const relevantIds = this.nodesToRestyle.map(n => n.globalElementIndex);\n        for(const nodeToBeStyled of this.nodesToRestyle) {\n            if(nodeToBeStyled) { // I don't know why, but there are null values in there.\n                let parent = this.getNodeParent(nodeToBeStyled);\n                while(parent && relevantIds.indexOf(parent.globalElementIndex) === -1) {\n                    relevantIds.push(parent.globalElementIndex);\n                    parent = this.getNodeParent(parent);\n                }\n            }\n        }\n        const relevantIdMap: {[globalElementIndex: number]: true} = {};\n        for(const index of relevantIds) {\n            relevantIdMap[index] = true;\n        }\n\n        const setStyle = (styleName: string, rule: {style: {[settingName: string]: string}}, child: VdomNode) => {\n            if(rule.style[styleName]) {\n                const longSpecName = `css;${selectorString};${styleName}`;\n                this.vdom.ensureInitialized(longSpecName);\n\n                this.vdom.set(child, longSpecName, rule.style[styleName]);\n            }\n        };\n\n        const checkNode = (currentNode: VdomNode, looseIndex = 0, strictIndex = 0): boolean => {\n            const selPart = selectorPartsLooseStrict[looseIndex][strictIndex];\n\n            for(let childIndex = 0; childIndex < currentNode.children.length; childIndex++) {\n                const child = currentNode.children[childIndex];\n                if(!relevantIdMap[child.globalElementIndex]) {\n                    continue;\n                }\n                let partialMatch = VdomManager.isCssRulePartialMatch(selPart, child, currentNode);\n\n                if(partialMatch) {\n                    if(selectorPartsLooseStrict[looseIndex].length > strictIndex + 1) {\n                        checkNode(child, looseIndex, strictIndex + 1);\n                    } else if(selectorPartsLooseStrict.length > looseIndex + 1) {\n                        checkNode(child, looseIndex + 1, strictIndex);\n                    } else {\n                        if(!child.css[selectorString]) {\n                            for(const styleName of CSS_STYLES) {\n                                setStyle(styleName, rule, child);\n                            }\n                        }\n                    }\n                } else {\n                    if(child['removedClasses']) {\n                        // temporarily add the class, see if it matches this rule, and if so, un-apply its stuff.\n                        for(const removedClass of child['removedClasses']) {\n                            child.className += ' ' + removedClass;\n\n                            let newPartialMatch = VdomManager.isCssRulePartialMatch(selPart, child, currentNode);\n                            if(newPartialMatch) {\n                                this.removeRuleStylesFromNode(selectorString, child);\n                            }\n\n                            child.className = child.className.substr(0, child.className.length -\n                                removedClass.length - 1);\n                        }\n                        setTimeout(() => {\n                            delete child['removedClasses'];\n                        }); // After this frame, reset which classes have been removed.\n                    }\n                    checkNode(child, looseIndex, strictIndex);\n                }\n            }\n            return false;\n        };\n\n        return checkNode(this.vdom.data);\n    }\n\n    removeRuleStylesFromNode(selector: string, child: VdomNode) {\n        if(child.css[selector]) {\n            this.vdom.ensureInitialized(`css;${selector};*`);\n            this.vdom.set(child, `css;${selector};*`, '');\n        }\n    }\n\n    removeNode(element: SsvgElement, node: VdomNode, parentNode: VdomNode) {\n        //console.log('removing', node, 'from', parentNode, [...parentNode.children], childIndex, childIndex2);\n        this.vdom.removeNode(node, parentNode);\n\n        this.nodes[node.globalElementIndex] = null;\n        this.elements[element.globalElementIndex] = null;\n\n        const restyleIndex = this.nodesToRestyle.indexOf(node);\n        if(restyleIndex !== -1) {\n            this.nodesToRestyle.splice(restyleIndex, 1);\n        }\n        this.removedNodeIndices.push(element.globalElementIndex);\n    }\n\n    restyleNode(node: VdomNode) {\n        if(!this.nodes[node.globalElementIndex] || this.nodes[node.globalElementIndex] !== node) {\n            console.error(node);\n            throw new Error('restyling incorrect node');\n        }\n        this.nodesToRestyle.push(node);\n    }\n    \n    private addChildNodesToVisData(childEls: SsvgElement[]|NodeList, parentNode: VdomNode) {\n\n        for(let i  = 0; i < childEls.length; i++) {\n            let el = childEls[i] as SsvgElement;\n\n            try {\n                const node = this.getNodeDataFromEl(el);\n\n                parentNode.children.push(node);\n                this.linkNodeToElement(node, el);\n                this.nodesToRestyle.push(node);\n                \n                if(el.childNodes)\n                {\n                    this.addChildNodesToVisData(el.childNodes, node);\n                }\n                if(node.type === 'tspan')\n                {\n                    //console.log(node, el, el.childNodes, el.textContent);\n                    //console.log(el.childNodes[0])\n                    //console.log(node, style.textAnchor);\n                }\n                if(node.type === 'text')\n                {\n                    //console.log(node, el, el.childNodes, el.textContent);\n                }\n            }\n            catch(e)\n            {\n                //console.log(e);\n                //console.log(el);\n            }\n        }\n    }\n\n    combineElementSelectors(parentSelector: string, elementType: string, childIndex: number) {\n        return parentSelector + ' > ' + elementType + ':nth-child(' + childIndex + ')';\n    }\n\n    getNodeParent(node: VdomNode): VdomNode|null {\n        if(node === this.vdom.data) {\n            return null;\n        }\n        const el = this.getElementFromNode(node);\n        if(!el) {\n            console.error('can not find element for node ', node);\n            return null;\n        }\n        const parentEl = el.parentNode as SsvgElement;\n        return this.getNodeFromElement(parentEl);\n    }\n\n    private getNewElementIndex() {\n        if(this.removedNodeIndices.length) {\n            return this.removedNodeIndices.shift();\n        }\n        this.maxGlobalElementIndex++;\n        return this.maxGlobalElementIndex - 1;\n    }\n\n    linkNodeToElement(node: VdomNode, element: SsvgElement) {\n        const index = this.getNewElementIndex();\n        node.globalElementIndex = index;\n        element.globalElementIndex = index;\n\n        this.nodes[index] = node;\n        this.elements[index] = element;\n\n        this.vdom.addNode(node);\n    }\n\n    getElementFromNode(node: VdomNode): SsvgElement {\n        if(node === this.vdom.data) {\n            return this.svg;\n        }\n        return this.elements[node.globalElementIndex];\n    }\n\n    getNodeFromElement(element: SsvgElement): VdomNode {\n        if(element === this.svg) {\n            return this.vdom.data;\n        }\n        return this.vdom.getNodeFromIndex(element.globalElementIndex);\n    }\n\n    isWithinSvg(element: Element) {\n        let isWithinSvg = false;\n        let parentEl = element;\n\n        while(parentEl && parentEl.parentNode) {\n            if(parentEl === this.svg) {\n                isWithinSvg = true;\n            }\n            parentEl = <Element> parentEl.parentNode;\n        }\n        return isWithinSvg;\n    }\n\n    getParentNode(node: VdomNode): VdomNode|null {\n        const element = this.getElementFromNode(node);\n        const parentElement = element.parentNode as SsvgElement;\n        return this.getNodeFromElement(parentElement);\n    }\n\n    getTotalTransformation(node: VdomNode): Transformation {\n        let parent = this.getParentNode(node);\n        const parents = [node];\n\n        while(parent) {\n            parents.push(parent);\n            parent = this.getParentNode(parent);\n        }\n\n        parent = parents.pop();\n        let totalTransform: Transformation = {\n            translateX: 0,\n            translateY: 0,\n            scaleX: 0,\n            scaleY: 0,\n            rotate: 0,\n            translateBeforeScale: false,\n            rotateLast: false,\n        };\n\n        while(parent) {\n            const transform = DrawingUtils.parseTransform(parent.transform);\n            totalTransform = DrawingUtils.addTransforms(totalTransform, transform);\n            parent = parents.pop();\n        }\n\n        return totalTransform;\n    }\n}\n\nlet safeLogCount = 0;\nfunction safeLog(...logContents) {\n    \n    if(safeLogCount < 50) {\n        safeLogCount++;\n        console.log(...logContents);\n    }\n}\nfunction safeErrorLog(...logContents) {\n    \n    if(safeLogCount < 50) {\n        safeLogCount++;\n        console.error(...logContents);\n    }\n}\n\nexport type SsvgElement = HTMLElement & {\n    __data__: any,\n    globalElementIndex: number,\n};\n","import SetPropertyQueueData, {AttrValues} from \"./set-property-queue-data\";\nimport {VDOM, VdomNode} from \"./vdom\";\nimport {SsvgElement} from \"../../frontend/domhandler\";\n\ninterface SharedDataStore {\n    values: {[attrName: string]: Int32Array},\n    buffers: {[attrName: string]: SharedArrayBuffer}\n}\n\nexport class VdomManager {\n    private sharedRenderData: SharedDataStore = {values: {}, buffers: {}};\n    private syncedSharedData: SharedDataStore = {values: {}, buffers: {}};\n    private sharedDataQueue: SharedDataStore = {values: {}, buffers: {}};\n    private queue: SetPropertyQueueData = {};\n    private useSharedArrayFor = ['cx', 'cy', 'x1', 'x2', 'y1', 'y2', 'x', 'y'];\n    private static IGNOREDESIGN_ATTRIBUTES = ['fill', 'stroke', 'opacity'];\n    private indexToNodeMap: {[index: number]: VdomNode} = {};\n    private static BUFFER_PRECISION_FACTOR = 10;\n    private changed = false;\n\n    constructor(public data: VDOM, private ignoreDesign: boolean, private isRenderer: boolean) {\n        this.ensureNodesMapped();\n\n        if(!('SharedArrayBuffer' in self)) {\n            this.useSharedArrayFor = [];\n        }\n    }\n\n    ensureInitialized(attrName: string, useBuffer = true, numNodes?: number) {\n        if(attrName === 'class') {\n            attrName = 'className';\n        }\n\n        if(!useBuffer || this.useSharedArrayFor.indexOf(attrName) === -1) {\n            if(!this.queue[attrName]) {\n                this.queue[attrName] = {};\n            }\n        } else {\n            const newLength = numNodes < 500 ? 1000 : Math.round(numNodes * 2);\n\n            if(!this.sharedDataQueue.values[attrName]) {\n                let prevData: AttrValues;\n\n                // If values have been previously set without a buffer, transfer them.\n                if(this.queue[attrName] && !(this.queue[attrName] instanceof SharedArrayBuffer)) {\n                    prevData = <AttrValues> this.queue[attrName];\n                }\n\n                const {buffer, values} = this.createBufferTransferValues(newLength, undefined, prevData);\n                this.sharedDataQueue.values[attrName] = values;\n                this.sharedDataQueue.buffers[attrName] = buffer;\n                this.queue[attrName] = buffer;\n            } else {\n                const newByteLength = Int32Array.BYTES_PER_ELEMENT * newLength;\n                if(this.sharedDataQueue.values[attrName].byteLength / newByteLength < 0.6) {\n                    // Need to allocate more space\n                    const {buffer, values} = this.createBufferTransferValues(newLength,\n                        this.sharedDataQueue.values[attrName]);\n                    this.sharedDataQueue.values[attrName] = values;\n                    this.sharedDataQueue.buffers[attrName] = buffer;\n                }\n            }\n        }\n    }\n\n    createBufferTransferValues(length: number, prevBufferVals?: Int32Array,\n                               prevData?: AttrValues) {\n        let buffer = new SharedArrayBuffer(Int32Array.BYTES_PER_ELEMENT * length);\n        const values = new Int32Array(buffer);\n\n        // If values have been previously set without a buffer, transfer them.\n        if(prevData) {\n            for(const index in prevData) {\n                if(prevData.hasOwnProperty(index)) {\n                    let value = prevData[index];\n                    if(typeof value === 'string') {\n                        value = parseFloat(value);\n                    }\n                    values[index] = value * VdomManager.BUFFER_PRECISION_FACTOR;\n                }\n            }\n        }\n\n        // If values have been previously set in a buffer, transfer them.\n        if(prevBufferVals) {\n            for(let i = 0; i < prevBufferVals.length; i++) {\n                if(prevBufferVals[i]) {\n                    values[i] = prevBufferVals[i];\n                }\n            }\n        }\n\n        return {buffer, values};\n    }\n\n    set(element: VdomNode|SsvgElement, attrName: string, value: string|number, useBuffer = true) {\n        if(attrName === 'class') {\n            attrName = 'className';\n        }\n        if(element.globalElementIndex === undefined) {\n            console.error('No index', element);\n            throw new Error('Element has no index');\n        }\n        const index = element.globalElementIndex;\n        const storage = useBuffer && this.useSharedArrayFor.indexOf(attrName) !== -1 ? 'shared' : 'raw';\n        try {\n            this.changed = true;\n            if(storage === 'shared') {\n                if(typeof value === 'string') {\n                    value = parseFloat(value);\n                }\n                value *= VdomManager.BUFFER_PRECISION_FACTOR;\n                value = Math.round(value); // This helps detect zeros.\n                if(value === 0) {\n                    value = 56938516; // magical constant\n                }\n\n                this.sharedDataQueue.values[attrName][index] = value;\n            } else {\n                this.queue[attrName][index] = value;\n                if(this.sharedDataQueue.values[attrName] && this.syncedSharedData.values[attrName][index]) {\n                    // un-set.\n                    this.sharedDataQueue.values[attrName][index] = 0;\n                }\n            }\n        }\n        catch(e) {\n            console.error(e);\n            console.log(this.queue, this.syncedSharedData.values, storage, attrName, element, index);\n        }\n    }\n\n    removePendingChanges(node: VdomNode) {\n        const index = node.globalElementIndex;\n        for(const attrName in this.queue) {\n            if(this.queue.hasOwnProperty(attrName)) {\n                delete this.queue[attrName][index];\n            }\n        }\n        for(const attrName in this.sharedDataQueue.values) {\n            if(this.sharedDataQueue.values.hasOwnProperty(attrName)) {\n                this.sharedDataQueue.values[attrName][index] = 0;\n            }\n        }\n    }\n\n    ensureNodesMapped() {\n        const addToMap = (node: VdomNode) => {\n            if(node.globalElementIndex === undefined) {\n                console.error('no element index', node);\n            }\n            this.indexToNodeMap[node.globalElementIndex] = node;\n            for(const child of node.children) {\n                addToMap(child);\n            }\n        };\n        addToMap(this.data);\n    }\n\n    enableFrontendDesignProperties() {\n        this.ignoreDesign = false;\n    }\n\n    addNodeToParent(nodeData: VdomNode, parentNodeIndex: number) {\n        if(nodeData.type !== 'svg') {\n            const parentNode = this.getNodeFromIndex(parentNodeIndex);\n            if(!parentNode) {\n                console.error('could not add node without parent', parentNodeIndex, nodeData,\n                    Object.keys(this.indexToNodeMap));\n                new Error('parent not found');\n                return;\n            }\n            parentNode.children.push(nodeData);\n        }\n    }\n\n    addNode(node: VdomNode) {\n        this.indexToNodeMap[node.globalElementIndex] = node;\n    }\n\n    removeNode(node: VdomNode, parent: VdomNode) {\n        delete this.indexToNodeMap[node.globalElementIndex];\n        const childIndex = parent.children.indexOf(node);\n\n        parent.children.splice(childIndex, 1);\n        this.cachedListSelections = {}; //TODO only remove relevant cache.\n\n        this.removePendingChanges(node);\n    }\n\n    applyStyleToNodeAndChildren(node: VdomNode, styleName: string, styleValue: string,\n                                onNodeUpdated: (node: VdomNode, attrName: string) => void) {\n        node.style[styleName] = styleValue;\n        onNodeUpdated(node, styleName);\n\n        if(node.children) {\n            for(let child of node.children) {\n                this.applyStyleToNodeAndChildren(child, styleName, styleValue, onNodeUpdated);\n            }\n        }\n    }\n\n    applyCssToNodeAndChildren(node: VdomNode, selector: string, styleName: string, value: string,\n                              onNodeUpdated: (node: VdomNode, attrName: string) => void) {\n        if(styleName === '*' && !value) {\n            delete node.css[selector];\n        } else {\n            if(!node.css[selector]) {\n                node.css[selector] = {};\n            }\n            node.css[selector][styleName] = value;\n        }\n        onNodeUpdated(node, styleName);\n\n        if(node.children) {\n            for(let child of node.children) {\n                this.applyCssToNodeAndChildren(child, selector, styleName, value, onNodeUpdated);\n            }\n        }\n    }\n\n    getNodeFromIndex(index: number): VdomNode {\n        return this.indexToNodeMap[index];\n    }\n\n    getNodeById(id: string): VdomNode {\n        const filtered = Object.values(this.indexToNodeMap).filter(node => node.id === id);\n        if(!filtered || filtered.length > 1) {\n            safeLog('multiple nodes with this id!', Object.values(this.indexToNodeMap)\n                .filter(node => node.id).map(node => node.id), id);\n            safeLog(filtered.length, filtered);\n        }\n        return !filtered || filtered.length !== 1 ? null : filtered[0];\n    }\n\n    private static ROUNDED_ATTRS = ['cx', 'cy'];\n\n    get(node: VdomNode, attrs: string|string[]) {\n        if(Array.isArray(attrs)) {\n            return attrs.map(attrName => this.getSingle(node, attrName));\n        } else {\n            return this.getSingle(node, attrs);\n        }\n    }\n\n    private getSingle(node: VdomNode, attrName: string) {\n        const data = this.isRenderer ? this.sharedRenderData.values : this.syncedSharedData.values;\n        if(data[attrName] && data[attrName][node.globalElementIndex]) {\n            const value = data[attrName][node.globalElementIndex];\n            if(value === 56938516) {\n                return 0;\n            }\n            return value / VdomManager.BUFFER_PRECISION_FACTOR;\n        } else {\n            return node[attrName];\n        }\n    }\n\n    hasChanges() {\n        return this.changed;\n    }\n\n    getQueue() {\n        return this.queue;\n    }\n\n    clearQueue() {\n        this.queue = {};\n        this.changed = false;\n    }\n\n    transferSyncedDataToRenderData() {\n        for(let attrName in this.syncedSharedData.values) {\n            this.queue[attrName] = this.syncedSharedData.buffers[attrName];\n            this.sharedRenderData.values[attrName] = this.syncedSharedData.values[attrName];\n\n            const length = this.syncedSharedData.buffers[attrName].byteLength / Int32Array.BYTES_PER_ELEMENT;\n            const {buffer, values} = this.createBufferTransferValues(length,\n                this.syncedSharedData.values[attrName]);\n\n            this.syncedSharedData.buffers[attrName] = buffer;\n            this.syncedSharedData.values[attrName] = values;\n        }\n    }\n\n    transferBufferQueueDataToSynced() {\n        for(let attrName in this.sharedDataQueue.values) {\n            this.queue[attrName] = this.sharedDataQueue.buffers[attrName];\n            this.syncedSharedData.values[attrName] = this.sharedDataQueue.values[attrName];\n\n            const length = this.sharedDataQueue.buffers[attrName].byteLength / Int32Array.BYTES_PER_ELEMENT;\n            const {buffer, values} = this.createBufferTransferValues(length,\n                this.sharedDataQueue.values[attrName]);\n\n            this.sharedDataQueue.buffers[attrName] = buffer;\n            this.sharedDataQueue.values[attrName] = values;\n        }\n    }\n\n    addToQueue(setAttrQueue: SetPropertyQueueData) {\n        for(let attrName in setAttrQueue) {\n            if(!setAttrQueue.hasOwnProperty(attrName)) {\n                continue;\n            }\n            if('SharedArrayBuffer' in self &&\n                setAttrQueue[attrName] instanceof SharedArrayBuffer) {\n                const buffer = <SharedArrayBuffer> setAttrQueue[attrName];\n                this.syncedSharedData.buffers[attrName] = buffer;\n                this.syncedSharedData.values[attrName] = new Int32Array(buffer);\n            } else {\n                const values: AttrValues = <AttrValues> setAttrQueue[attrName];\n\n                if(!this.queue[attrName]) {\n                    this.queue[attrName] = {};\n                }\n\n                for(let childIndex in values) {\n                    if(!values.hasOwnProperty(childIndex)) {\n                        continue;\n                    }\n                    const index = parseInt(childIndex);\n                    this.queue[attrName][index] = values[index];\n                }\n            }\n        }\n    }\n\n    updatePropertiesFromQueue(setAttrQueue: SetPropertyQueueData,\n                              onNodeUpdated: (node: VdomNode, attrName: string) => void = () => {}) {\n        for(let attrName in setAttrQueue) {\n            if(!setAttrQueue.hasOwnProperty(attrName)) {\n                continue;\n            }\n            const attrNameStart = attrName.substr(0, 'style;'.length);\n            if(this.ignoreDesign && (attrNameStart === 'style;' ||\n                VdomManager.IGNOREDESIGN_ATTRIBUTES.indexOf(attrName) !== -1)) {\n                continue;\n            }\n\n            let values: AttrValues|Int32Array;\n\n            if('SharedArrayBuffer' in self &&\n                setAttrQueue[attrName] instanceof SharedArrayBuffer) {\n                const buffer = <SharedArrayBuffer> setAttrQueue[attrName];\n                if(!this.isRenderer) {\n                    this.syncedSharedData.buffers[attrName] = buffer;\n                    this.syncedSharedData.values[attrName] = new Int32Array(buffer);\n                } else {\n                    this.sharedRenderData.buffers[attrName] = buffer;\n                    this.sharedRenderData.values[attrName] = new Int32Array(buffer);\n                }\n            } else {\n                values = <AttrValues> setAttrQueue[attrName];\n\n                for(let childIndex in values) {\n                    if(!values.hasOwnProperty(childIndex)) {\n                        continue;\n                    }\n                    const index = parseInt(childIndex);\n                    const childNode = this.getNodeFromIndex(index);\n                    if(!childNode) {\n                        console.error('node not found at index', index)\n                        continue;\n                    }\n                    let value: string|number = values[childIndex];\n                    if(attrNameStart === 'style;') {\n                        const styleName = attrName.substr('style;'.length);\n                        this.applyStyleToNodeAndChildren(childNode, styleName, <string> value, onNodeUpdated);\n                    } else if(attrName.substr(0, 4) === 'css;') {\n                        const [selector, styleName] = attrName.substr(4).split(';');\n                        this.applyCssToNodeAndChildren(childNode, selector, styleName, <string> value, onNodeUpdated);\n                    } else {\n                        if(VdomManager.ROUNDED_ATTRS.indexOf(attrName) !== -1) {\n                            if(typeof value === 'string') {\n                                value = parseFloat(value);\n                            }\n                            value = Math.round(value);\n                        }\n\n                        childNode[attrName] = value;\n                        onNodeUpdated(childNode, attrName);\n                    }\n                }\n            }\n        }\n    }\n    \n    private cachedListSelections: {[selector: string]: {[index: number]: VdomNode}} = {};\n    public getVisNodeFromSelector(selector: string): VdomNode|null {\n        const lastSplitPos = selector.lastIndexOf('>');\n        const selectorWithoutLast = selector.substr(0, lastSplitPos);\n        const lastPart = selector.substr(lastSplitPos + 1);\n        const parentSel = selectorWithoutLast ? this.cachedListSelections[selectorWithoutLast] : null;\n        let index = -1;\n        const nthChildPosition = lastPart.indexOf(':nth-child(');\n        if(nthChildPosition !== -1) {\n            index = parseInt(lastPart.substr(nthChildPosition + 11)); // length of ':nth-child('\n            if(parentSel && parentSel[index]) {\n                return parentSel[index];\n            }\n        }\n        \n        const selectedNodes: VdomNode[] = [];\n        this.findMatchingChildren(this.data, selector, 0, selectedNodes);\n        \n        if(selectedNodes && selectedNodes.length === 1) {\n            const el = selectedNodes[0];\n            if(index !== -1) {\n                if(!this.cachedListSelections[selectorWithoutLast]) {\n                    this.cachedListSelections[selectorWithoutLast] = {};\n                }\n                this.cachedListSelections[selectorWithoutLast][index] = el;\n            }\n            return el;\n        }\n        return null;\n    }\n    \n    public getVisNodesFromSelector(visNode: VdomNode, selector: string) {\n        const selectedNodes = [];\n        this.findMatchingChildren(visNode, selector, 0, selectedNodes);\n        return selectedNodes;\n    }\n\n    private findChildrenOfType(visNode: VdomNode, type: string, selectedNodes: VdomNode[]) {\n        const addDirectChildrenIfMatch = (node: VdomNode) => {\n            for(const child of node.children) {\n                if(child.type === type) {\n                    selectedNodes.push(child);\n                }\n                if(node.children.length !== 0) {\n                    addDirectChildrenIfMatch(child);\n                }\n            }\n        };\n        addDirectChildrenIfMatch(visNode);\n    }\n\n    public filterNodesBySelector(parentNode: VdomNode, nodes: VdomNode[], selector: string) {\n        return nodes.filter(node => VdomManager.isCssRulePartialMatch(selector, node, parentNode));\n    }\n    \n    private findMatchingChildren(visNode: VdomNode, selector: string, matchIndex: number, selectedNodes: VdomNode[],\n                                 selectedNodeSelectors: string[] = []) {\n        if(!selector && selector !== '') {\n            console.error(visNode, selector, matchIndex, selectedNodes, selectedNodeSelectors);\n            throw Error('undefined selector');\n        }\n\n        let selParts = selector.split('>').map(s => s.trim());\n        let selPart = selParts[matchIndex];\n        \n        if(matchIndex === 0 && selPart === 'svg') {\n            matchIndex++;\n            selPart = selParts[matchIndex];\n            if(matchIndex === selParts.length) {\n                selectedNodes.push(visNode);\n                selectedNodeSelectors.push(selector);\n                return;\n            }\n        }\n\n        if(selector.match(/^[a-z]+$/)) {\n            return this.findChildrenOfType(visNode, selector, selectedNodes);\n        }\n        \n        for(let i = 0; i < visNode.children.length; i++) {\n            let node = visNode.children[i];\n            let matching = false;\n            \n            if(VdomManager.isCssRulePartialMatch(selPart, node, visNode)) {\n                if(matchIndex === selParts.length - 1) {\n                    selectedNodes.push(node);\n                    selectedNodeSelectors.push(selector);\n                } else {\n                    matching = true;\n                }\n            }\n            \n            if(node.children && (matching || selParts.length < 2) && matchIndex + 1 < selParts.length) {\n                this.findMatchingChildren(node, selector, matchIndex + 1, selectedNodes, selectedNodeSelectors);\n            }\n        }\n    }\n\n    public static isCssRulePartialMatch(cssRuleSelectorPart: string, node: VdomNode, parentNode: VdomNode): boolean {\n        if(cssRuleSelectorPart.substr(0, 5) === ':not(') {\n            const newSelPart = cssRuleSelectorPart.substr(0, cssRuleSelectorPart.length - 1).substr(5);\n            return !VdomManager.isCssRulePartialMatch(newSelPart, node, parentNode);\n        }\n        if(cssRuleSelectorPart[0] === '.') { // Example: .className or .classnameA.classnameB\n            const searchClassNames = cssRuleSelectorPart.split('.');\n            searchClassNames.shift(); // remove empty first string.\n            if(node.className) {\n                let allTrue = true;\n                for(const searchClassName of searchClassNames) {\n                    if(node.className.split(' ').indexOf(searchClassName) === -1) {\n                        allTrue = false;\n                    }\n                }\n                return allTrue;\n            }\n        } else if(cssRuleSelectorPart[0] === '#') { // Example: #id\n            if(cssRuleSelectorPart.substr(1) === node.id) {\n                return true;\n            }\n        } else if(cssRuleSelectorPart.match(/^[a-z]+$/)) { // Example: rect\n            if(cssRuleSelectorPart === node.type) {\n                return true;\n            }\n        } else if(cssRuleSelectorPart.indexOf(':nth-child(') !== -1) {\n            let type = 'any';\n            let indexPart = cssRuleSelectorPart;\n\n            if(cssRuleSelectorPart[0] !== ':') {\n                type = cssRuleSelectorPart.substr(0, cssRuleSelectorPart.indexOf(':'));\n                indexPart = cssRuleSelectorPart.substr(cssRuleSelectorPart.indexOf(':'));\n            }\n\n            const targetIndex = parseInt(indexPart.substr(':nth-child('.length));\n            const index = parentNode.children.indexOf(node);\n\n            return (index === targetIndex - 1 && (type === 'any' || node.type === type));\n        }\n        else if(cssRuleSelectorPart.indexOf('.') !== -1) { // Example: rect.className\n            const cutoff = cssRuleSelectorPart.indexOf('.');\n            const typeName = cssRuleSelectorPart.substr(0, cutoff);\n            const className = cssRuleSelectorPart.substr(cutoff + 1);\n            if(typeName === node.type && node.className && node.className.split(' ').indexOf(className) !== -1) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\nlet safeLogCount = 0;\nfunction safeLog(...logContents) {\n    if(safeLogCount < 400) {\n        safeLogCount++;\n        console.log(...logContents);\n    }\n}\nfunction safeErrorLog(...logContents) {\n    if(safeLogCount < 400) {\n        safeLogCount++;\n        console.error(...logContents);\n    }\n}\n","import {VdomNodeType} from \"../util/vdom/vdom\";\n\nexport const CSS_STYLES = ['stroke', 'stroke-opacity', 'stroke-width', 'stroke-linejoin',\n    'fill', 'fill-opacity', 'font', 'opacity', 'font-family', 'font-size'];\n\n/*const RELEVANT_ATTRS2 = ['transform', 'd', 'id', 'r', 'fill', 'cx', 'cy', 'x', 'y', 'x1', 'x2', 'y1',\n    'y2', 'opacity', 'fill-opacity', 'width', 'height', 'stroke', 'stroke-opacity', 'stroke-width',\n    'font-size', 'font', 'font-family', 'text-anchor', 'href'];*/\n\n//'svg'|'g'|'rect'|'circle'|'path'|'title'|'tspan'|'text'|'image'|'clippath'|'line'\n\nexport const RELEVANT_ATTRS: {[type in VdomNodeType]: string[]} = {\n    'svg': ['fill', 'opacity', 'fill-opacity', 'stroke', 'stroke-opacity', 'stroke-width',\n        'font-size', 'font', 'font-family', 'text-anchor'],\n    'g': ['fill', 'opacity', 'fill-opacity', 'stroke', 'stroke-opacity', 'stroke-width',\n        'font-size', 'font', 'font-family', 'text-anchor', 'clip-path'],\n    'rect': ['fill', 'opacity', 'fill-opacity', 'stroke', 'stroke-opacity', 'stroke-width', 'x','y',\n        'width', 'height', 'clip-path'],\n    'circle': ['fill', 'opacity', 'fill-opacity', 'stroke', 'stroke-opacity', 'stroke-width', 'cx',\n        'cy', 'r', 'clip-path'],\n    'path': ['fill', 'opacity', 'fill-opacity', 'stroke', 'stroke-opacity', 'stroke-width', 'd',\n        'clip-path'],\n    'title': [],\n    'tspan': ['dx', 'dy'],\n    'text': ['fill', 'opacity', 'fill-opacity', 'stroke', 'stroke-opacity', 'stroke-width',\n        'font-size', 'font', 'font-family', 'text-anchor', 'href', 'x', 'y', 'dx', 'dy'],\n    'image': ['opacity', 'x', 'y', 'width', 'height'],\n    'clippath': ['id', 'fill', 'opacity', 'fill-opacity', 'stroke', 'stroke-opacity',\n        'stroke-width'],\n    'line': ['opacity', 'stroke', 'stroke-opacity', 'stroke-width', 'x1', 'x2', 'y1','y2',\n        'clip-path'],\n};\n\nconst ROUNDED_ATTRS_ARR = ['cx', 'cy', 'r', 'x', 'y', 'x1', 'x2', 'y1', 'y2', 'width', 'height',\n    'stroke-width'];\n\nexport const ROUNDED_ATTRS = {};\nfor(const attr of ROUNDED_ATTRS_ARR) {\n    ROUNDED_ATTRS[attr] = true;\n}\n","import {VdomNode} from \"../util/vdom/vdom\";\nimport {VdomManager} from \"../util/vdom/vdom-manager\";\nimport DrawingUtils from \"./drawingUtils\";\nimport CanvasWorker from \"./canvasworker\";\n\ntype DrawMode = 'start'|'normal'|'end'|'forcesingle';\n\nexport default class Canvasrenderer implements CanvasWorker {\n    \n    private ctx: CanvasRenderingContext2D;\n    private parentValues: {[prop: string]: string|number} = {};\n    \n    constructor(private vdom: VdomManager, private canvas: HTMLCanvasElement,\n                private forceSingle = false, private onDrawn = () => {}) {\n        const ctx = canvas.getContext('2d');\n        if(!ctx) throw new Error('could not create canvas context');\n        \n        this.ctx = ctx;\n        this.ctx.scale(this.vdom.data.scale, this.vdom.data.scale);\n        this.ctx.save();\n        \n        this.draw();\n        \n        setTimeout(() => {\n            console.log(this.forceSingle, this.vdom.data);\n            //this.draw();\n        }, 1000);\n    }\n    \n    private lastFullSecond = 0;\n    private countSinceLastFullSecond = 0;\n    \n    draw() {\n        const ctx = this.ctx;\n\n        ctx.restore();\n        ctx.save();\n        \n        //ctx.fillStyle = '#fff';\n        //ctx.fillRect(0, 0, this.vdom.data.width, this.vdom.data.height);\n        ctx.clearRect(0, 0, this.vdom.data.width, this.vdom.data.height);\n    \n        //this.lastDrawn = null;\n        this.drawLine(null, 'start');\n        this.drawCircle(null, 'start');\n        this.drawRect(null, 'start');\n        this.drawText(null, 'start');\n        this.drawImage(null, 'start');\n\n        this.drawNodeAndChildren(this.vdom.data, this.forceSingle);\n\n        this.drawLine(null, 'end');\n        this.drawCircle(null, 'end');\n        this.drawRect(null, 'end');\n        this.drawText(null, 'end');\n        this.drawImage(null, 'end');\n        \n        this.onDrawn();\n    \n        const fullSecond = Math.round(performance.now() / 1000);\n        if(fullSecond !== this.lastFullSecond) {\n            this.lastFullSecond = fullSecond;\n            //console.log(this.countSinceLastFullSecond);\n            this.countSinceLastFullSecond = 0;\n        }\n        this.countSinceLastFullSecond++;\n    }\n    \n    private drawNodeAndChildren(elData: VdomNode, forceSingle: boolean, drawClip?: Path2D) {\n        if(elData.type === 'clippath' && !drawClip) {\n            return;\n        }\n\n        const ctx = this.ctx;\n        const parentValuesBackup = {...this.parentValues};\n\n        const saveRestoreContext = !drawClip && (elData.children.length || elData.transform);\n        if(saveRestoreContext) {\n            ctx.save();\n        }\n\n        this.applyTransform(elData.transform);\n\n        if(elData.transform || drawClip) {\n            forceSingle = true;\n        }\n\n        if(elData['clip-path']) {\n            if(elData['clip-path'].substr(0, 5) === 'url(#') {\n                const clipPathId = elData['clip-path'].substr(5, elData['clip-path'].length - 6);\n                const clipNode = this.vdom.getNodeById(clipPathId);\n                forceSingle = true;\n\n                if(!clipNode) {\n                    //safeErrorLog('clip node not found', elData['clip-path'], clipPathId, this.vdom.data)\n                } else {\n                    const path = new Path2D();\n                    this.drawNodeAndChildren(clipNode, forceSingle, path);\n                    ctx.clip(path);\n                }\n            } else {\n                safeErrorLog('clip path format not supported:', elData['clip-path']);\n            }\n        }\n\n        if(!elData.style.display || elData.style.display !== 'none') {\n            if(!forceSingle) {\n                this.drawSingleNode(elData, 'normal', drawClip);\n            } else {\n                this.drawSingleNode(elData, 'forcesingle', drawClip);\n            }\n        }\n\n        if(elData.children) {\n            this.parentValues['fill'] = elData.fill || this.parentValues['fill'];\n            this.parentValues['style;fill'] = elData.style.fill || this.parentValues['style;fill'];\n            this.parentValues['stroke'] = elData.stroke || this.parentValues['stroke'];\n            this.parentValues['style;stroke'] = elData.style.stroke || this.parentValues['style;stroke'];\n            this.parentValues['opacity'] = elData.opacity || this.parentValues['opacity'];\n\n            for(let i = 0; i < elData.children.length; i++) {\n                this.drawNodeAndChildren(elData.children[i], forceSingle, drawClip);\n            }\n        }\n\n        if(saveRestoreContext) {\n            //safeLog('restoring ctx', elData);\n            ctx.restore();\n        }\n        this.parentValues = parentValuesBackup;\n    }\n    \n    private drawSingleNode(elData: VdomNode, mode: DrawMode = 'normal', path?: Path2D) {\n        const type: string = elData.type;\n        const drawFct = this['draw' + type.substr(0,1).toUpperCase() + type.substr(1)];\n        if(!drawFct) {\n            return console.error('no draw function yet for ', type);\n        }\n        drawFct.call(this, elData, mode, path);\n    }\n\n    private drawClippath(elData: VdomNode) {\n        //safeLog('clippaths can not be rendered yet.')\n    }\n\n    private drawSvg() {}\n    private drawTitle() {}\n    private drawG() {}\n    \n    private circlesByColor: {[color: string]: VdomNode[]} = {};\n    private drawCircle(elData: VdomNode, mode: DrawMode = 'normal', path?: Path2D) {\n        if(mode === 'normal') {\n            let fill = this.getFillStyle(elData, '#000');\n            const stroke = this.getStrokeStyle(elData);\n            const handle = fill + ';' + stroke;\n            if(!this.circlesByColor[handle]) {\n                this.circlesByColor[handle] = [];\n            }\n            this.circlesByColor[handle].push(elData);\n        }\n        if(mode === 'start') {\n            this.circlesByColor = {};\n            return;\n        }\n        if(mode === 'end') {\n            for(let fillAndStrokeColor in this.circlesByColor) {\n                if(this.circlesByColor.hasOwnProperty(fillAndStrokeColor)) {\n                    const split = fillAndStrokeColor.split(';');\n                    const fillColor = split[0];\n                    const strokeColor = split[1];\n\n                    this.ctx.fillStyle = fillColor;\n                    let sampleData = this.circlesByColor[fillAndStrokeColor][0];\n                    const lineWidth = this.getStrokeWidth(sampleData);\n                    this.ctx.lineWidth = lineWidth !== undefined ? lineWidth : 1;\n                    this.ctx.strokeStyle = strokeColor;\n\n                    this.ctx.beginPath();\n                    for(let elData of this.circlesByColor[fillAndStrokeColor]) {\n                        // Round values so that paths are connected correctly and there are no rendering glitches\n                        const cx = Math.round(this.vdom.get(elData, 'cx')) || 0;\n                        const cy = Math.round(this.vdom.get(elData, 'cy')) || 0;\n                        const r = Math.round(this.vdom.get(elData, 'r'));\n                        this.ctx.save();\n                        this.applyTransform(elData.transform);\n                        this.ctx.moveTo(cx + r, cy);\n                        this.ctx.arc(cx, cy, r, 0, 2 * Math.PI);\n                        this.ctx.restore();\n                        //this.ctx.restore();\n                    }\n\n                    if(fillColor !== 'none'){\n                        this.ctx.fill();\n                    }\n\n                    if(strokeColor && strokeColor !== 'none') {\n                        this.ctx.stroke();\n                    }\n                }\n            }\n            return;\n        }\n        if(mode === 'forcesingle') {\n            let fill = this.getFillStyle(elData, '#000');\n            const strokeStyle = this.getStrokeStyle(elData);\n\n            const cx = this.vdom.get(elData, 'cx') || 0;\n            const cy = this.vdom.get(elData, 'cy') || 0;\n\n            this.ctx.beginPath();\n            this.ctx.fillStyle = fill;\n            this.ctx.strokeStyle = strokeStyle;\n            this.ctx.lineWidth = this.getStrokeWidth(elData);\n            this.ctx.moveTo(cx + elData.r, cy);\n            const context = path ? path : this.ctx;\n            context.arc(cx, cy, elData.r, 0, 2 * Math.PI);\n            if(fill !== 'none' && !path){\n                this.ctx.fill();\n            }\n\n            if(strokeStyle && strokeStyle !== 'none' && !path) {\n                this.ctx.stroke();\n            }\n        }\n    }\n\n    nodeUpdated(node: VdomNode, attr: string) {\n        if(attr === '*' || attr.includes('fill') || attr.includes('opacity')) {\n            delete node['fill-cache'];\n        }\n        if(attr === '*' || attr.includes('stroke') || attr.includes('opacity')) {\n            delete node['stroke-cache'];\n            delete node['strokewidth-cache'];\n        }\n    }\n\n    private getFillStyle(node: VdomNode, defaultColor = 'none'): string {\n        if('fill-cache' in node) {\n            return node['fill-cache'];\n        }\n        let fill = this.getAttributeStyleCss(node, 'fill');\n        let opacity = this.getAttributeStyleCss(node, 'opacity') || 1;\n        const fillOpacity = this.getAttributeStyleCss(node, 'fill-opacity') || 1;\n        opacity *= fillOpacity;\n\n        let defaultCol = '';\n        if(this.parentValues['fill']) {\n            defaultCol = this.parentValues['fill'] as string;\n        }\n        if(this.parentValues['style;fill']) {\n            defaultCol = this.parentValues['style;fill'] as string;\n        }\n        if(!this.parentValues['fill'] && !this.parentValues['style;fill']) {\n            defaultCol = defaultColor;\n        }\n\n        fill = DrawingUtils.colorToRgba(fill, opacity, defaultCol);\n        node['fill-cache'] = fill;\n        return fill;\n    }\n\n    private getAttributeStyleCss(node: VdomNode, style: string) {\n        if(node.style[style]) {\n            return node.style[style];\n        } else {\n            if(this.parentValues[`style;${style}`]) {\n                return this.parentValues[`style;${style}`];\n            }\n            let value = node[style];\n\n            let highestSpec = -1;\n            for(const selector in node.css) {\n                if(node.css[selector][style]) {\n                    const specificity = DrawingUtils.getCssRuleSpecificityNumber(selector);\n                    if(specificity > highestSpec) {\n                        value = node.css[selector][style];\n                        highestSpec = specificity;\n                    }\n                }\n            }\n            return value;\n        }\n    }\n\n    private getStrokeStyle(node: VdomNode, defaultColor = 'none'): string {\n        if('stroke-cache' in node) {\n            return node['stroke-cache'];\n        }\n        const stroke = this.getAttributeStyleCss(node, 'stroke');\n        let opacity = this.getAttributeStyleCss(node, 'opacity') || 1;\n        const fillOpacity = this.getAttributeStyleCss(node, 'stroke-opacity') || 1;\n        opacity *= fillOpacity;\n\n        let defaultCol = '';\n        if(this.parentValues['stroke']) {\n            defaultCol = this.parentValues['stroke'] as string;\n        } else {\n            defaultCol = defaultColor;\n        }\n\n        if(stroke !== undefined) {\n            node['stroke-cache'] = DrawingUtils.colorToRgba(stroke, opacity);\n        } else {\n            node['stroke-cache'] = defaultCol;\n        }\n        return node['stroke-cache'];\n    }\n\n    private getStrokeWidth(node: VdomNode) {\n        if('strokewidth-cache' in node) {\n            return node['strokewidth-cache'];\n        }\n        const width = this.getAttributeStyleCss(node, 'stroke-width');\n        node['strokewidth-cache'] = width === undefined ? undefined : parseFloat(width);\n\n        return node['strokewidth-cache'];\n    }\n\n    private rectsByColor = {};\n\n    private drawRect(elData: VdomNode, mode: DrawMode = 'normal', path?: Path2D) {\n        if(mode === 'normal') {\n            let fill = this.getFillStyle(elData, '#000');\n            const stroke = this.getStrokeStyle(elData);\n            const handle = fill + ';' + stroke;\n            if(!this.rectsByColor[handle]) {\n                this.rectsByColor[handle] = [];\n            }\n            this.rectsByColor[handle].push(elData);\n        }\n        if(mode === 'start') {\n            this.rectsByColor = {};\n            return;\n        }\n        if(mode === 'end') {\n            for(let fillAndStrokeColor in this.rectsByColor) {\n                if(this.rectsByColor.hasOwnProperty(fillAndStrokeColor)) {\n                    const split = fillAndStrokeColor.split(';');\n                    const fillColor = split[0];\n                    const strokeColor = split[1];\n                    this.ctx.fillStyle = fillColor;\n\n                    let sampleData = this.rectsByColor[fillAndStrokeColor][0];\n                    const lineWidth = this.getStrokeWidth(sampleData);\n                    this.ctx.lineWidth = lineWidth !== undefined ? lineWidth : 1;\n                    this.ctx.strokeStyle = strokeColor;\n\n                    this.ctx.beginPath();\n                    for(let elData of this.rectsByColor[fillAndStrokeColor]) {\n                        // Round values so that paths are connected correctly and there are no rendering glitches\n                        const x = Math.round(this.vdom.get(elData, 'x')) || 0;\n                        const y = Math.round(this.vdom.get(elData, 'y')) || 0;\n                        this.ctx.save();\n                        this.applyTransform(elData.transform);\n                        this.ctx.moveTo(x, y);\n                        this.ctx.rect(x, y, elData.width, elData.height);\n                        this.ctx.restore();\n                        //this.ctx.restore();\n                    }\n                    if(fillColor !== 'none'){\n                        this.ctx.fill();\n                    }\n\n                    if(strokeColor && strokeColor !== 'none') {\n                        this.ctx.stroke();\n                    }\n                }\n            }\n            return;\n        }\n        if(mode === 'forcesingle') {\n            let fill = this.getFillStyle(elData, '#000');\n            const stroke = this.getStrokeStyle(elData);\n\n            const x = this.vdom.get(elData, 'x') || 0;\n            const y = this.vdom.get(elData, 'y') || 0;\n\n            if(fill && fill !== 'none' && !path) {\n                this.ctx.fillStyle = fill;\n                this.ctx.fillRect(x, y, elData.width, elData.height);\n            }\n            if(path) {\n                path.rect(x, y, elData.width, elData.height);\n            }\n\n            if(stroke !== 'none' && !path) {\n                this.ctx.strokeStyle = stroke;\n                this.ctx.beginPath();\n                this.ctx.rect(x, y, elData.width, elData.height);\n                this.ctx.stroke();\n            }\n        }\n    }\n\n    private drawTexts: VdomNode[] = [];\n\n    private drawText(node: VdomNode, mode: DrawMode = 'normal', isClip = false) {\n        const drawSingle = (elData: VdomNode) => {\n            if(elData.text === '') {\n                return;\n            }\n            let fontFamily = this.getAttributeStyleCss(elData, 'font-family') || 'Times New Roman';\n\n            let fontSize = '16px';\n            const customSize = this.getAttributeStyleCss(elData, 'font-size');\n            if(customSize) {\n                fontSize = DrawingUtils.convertSizeToPx(customSize) + 'px';\n            }\n            let font = this.getAttributeStyleCss(elData, 'font');\n            if(!font) {\n                font = fontSize + ' ' + fontFamily;\n            }\n            let align = this.getAttributeStyleCss(elData, 'text-anchor');\n            if(align) {\n                if(align === 'middle') {\n                    align = 'center';\n                }\n                this.ctx.textAlign = align;\n            }\n            this.ctx.font = font;\n            this.ctx.fillStyle = this.getFillStyle(elData, '#000');\n\n            let x = this.vdom.get(elData, 'x') || 0;\n            let y = this.vdom.get(elData, 'y') || 0;\n            let dx = DrawingUtils.convertSizeToPx(elData.dx, false) || 0;\n            let dy = DrawingUtils.convertSizeToPx(elData.dy, false) || 0;\n            this.ctx.fillText(elData.text, x + dx, y + dy);\n        };\n        if(mode === 'start') {\n            this.drawTexts = [];\n            return;\n        }\n        if(mode === 'normal') {\n            this.drawTexts.push(node);\n            return;\n        }\n        if(mode === 'forcesingle') {\n            return drawSingle(node);\n        }\n        if(mode === 'end') {\n            for(const currentNode of this.drawTexts) {\n                drawSingle(currentNode);\n            }\n            return;\n        }\n    }\n\n    private drawImages: VdomNode[] = [];\n\n    private drawImage(node: VdomNode, mode: DrawMode = 'normal') {\n        const drawSingle = (elData: VdomNode) => {\n            if(elData.href === '') {\n                return;\n            }\n            let fill = elData['fill'] ? elData['fill'] : elData.style['fill'];\n            if(!fill) fill = '#000';\n            this.ctx.fillStyle = fill;\n            let x = this.vdom.get(elData, 'x') || 0;\n            let y = this.vdom.get(elData, 'y') || 0;\n            let width = elData.width || 0;\n            let height = elData.height || 0;\n            if(elData.image) {\n                try {\n                    this.ctx.drawImage(elData.image, x, y, width, height);\n                } catch(e) {\n                    console.log(e);\n                }\n            }\n        };\n        if(mode === 'start') {\n            this.drawImages = [];\n            return;\n        }\n        if(mode === 'normal') {\n            this.drawImages.push(node);\n            return;\n        }\n        if(mode === 'forcesingle') {\n            return drawSingle(node);\n        }\n        if(mode === 'end') {\n            for(const currentNode of this.drawImages) {\n                drawSingle(currentNode);\n            }\n            return;\n        }\n    }\n\n    private drawPath(elData: VdomNode, mode: DrawMode = 'normal', path?: Path2D) {\n        if(mode !== 'normal' && mode !== 'forcesingle') return;\n\n        const fill = this.getFillStyle(elData, '#000');\n        const stroke = this.getStrokeStyle(elData);\n        const strokeWidth = this.getStrokeWidth(elData);\n\n        let p = new Path2D(elData.d);\n        this.ctx.fillStyle = fill;\n        if(stroke !== undefined && stroke !== 'none') {\n            if(strokeWidth !== undefined) {\n                this.ctx.lineWidth = strokeWidth;\n            }\n            this.ctx.strokeStyle = stroke;\n\n            const lineJoin = this.getAttributeStyleCss(elData, 'stroke-linejoin')\n\n            if(lineJoin) {\n                if(lineJoin === 'bevel' || lineJoin === 'round' || lineJoin === 'miter') {\n                    this.ctx.lineJoin = lineJoin;\n                } else {\n                    console.error('unknown line join value:', lineJoin)\n                }\n            }\n            if(!path) {\n                this.ctx.stroke(p);\n            }\n        }\n\n        if(fill && fill !== 'none' && !path) {\n            this.ctx.fill(p);\n        }\n        if(path) {\n            path.addPath(p);\n        }\n    }\n    \n    private drawTspan(elData: VdomNode, mode: DrawMode = 'normal') {\n        if(mode !== 'normal' && mode !== 'forcesingle') return;\n        \n        this.ctx.font = \"10px Arial\";\n        this.ctx.fillStyle = \"#000000\";\n        const textAlign = <CanvasTextAlign> (elData.style.textAnchor === \"middle\" ? \"center\" : elData.style.textAnchor);\n        this.ctx.textAlign = textAlign;\n        this.ctx.fillText(elData.text, this.vdom.get(elData, 'x'), this.vdom.get(elData, 'y'));\n    }\n\n    private drawTextpath(elData: VdomNode) {\n        console.warn('no draw function yet for textpath');\n    }\n\n    private linesByColor: {[color: string]: VdomNode[]} = {};\n    private drawLine(elData, mode: DrawMode = 'normal') {\n        if(this.vdom.data.scale > 1) {\n            //mode = 'forcesingle';\n            // In my tests, drawing a long connected path is very slow for high DPI devices.\n        }\n        if(mode === 'normal') {\n            const stroke = this.getStrokeStyle(elData);\n            const width = this.getStrokeWidth(elData);\n            if(stroke === 'none' || width === 0) {\n                return;\n            }\n            const selector = `${stroke};${width}`;\n            if(!this.linesByColor[selector]) {\n                this.linesByColor[selector] = [];\n            }\n            this.linesByColor[selector].push(elData);\n        }\n        if(mode === 'start') {\n            this.linesByColor = {};\n            return;\n        }\n        if(mode === 'end') {\n            //safeLog(Object.keys(this.linesByColor), this.linesByColor);\n            for(let selector in this.linesByColor) {\n                if(this.linesByColor.hasOwnProperty(selector)) {\n                    const split = selector.split(';');\n                    const strokeColor = split[0];\n                    const width = split[1];\n\n                    this.ctx.strokeStyle = strokeColor;\n                    this.ctx.lineWidth = parseFloat(width);\n\n                    this.ctx.beginPath();\n                    for(let elData of this.linesByColor[selector]) {\n                        if(elData.transform) {\n                            this.ctx.save();\n                            this.applyTransform(elData.transform);\n                        }\n\n                        const [x1, x2, y1, y2] = this.vdom.get(elData, ['x1', 'x2', 'y1', 'y2'])\n                            .map(val => Math.round(val) || 0);\n\n                        /*const dist = Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));\n                        if(dist > 50) {\n                            safeLog(elData, dist, x1, x2, y1, y2);\n                        }*/\n\n                        this.ctx.moveTo(x1, y1);\n                        this.ctx.lineTo(x2, y2);\n\n                        if(elData.transform) {\n                            //this.ctx.restore();\n                            this.ctx.restore();\n                        }\n                    }\n\n                    this.ctx.stroke();\n                }\n            }\n            return;\n        }\n        if(mode === 'forcesingle') {\n            this.ctx.beginPath();\n\n            const [x1, x2, y1, y2] = this.vdom.get(elData, ['x1', 'x2', 'y1', 'y2'])\n                .map(val => Math.round(val) || 0);\n\n            this.ctx.moveTo(x1, y1);\n            this.ctx.lineTo(x2, y2);\n\n            this.ctx.strokeStyle = this.getStrokeStyle(elData);\n            this.ctx.lineWidth = this.getStrokeWidth(elData);\n            //safeLog(stroke, this.ctx.strokeStyle);\n            this.ctx.stroke();\n        }\n    }\n\n    private drawDefs(node: VdomNode) {\n        //TODO figure out.\n    }\n\n    private drawMarker(node: VdomNode) {\n        //TODO figure out.\n    }\n    \n    private applyTransform(transformString: string) {\n        const transform = transformString ? DrawingUtils.parseTransform(transformString) : null;\n        if(transform) {\n            if(!transform.rotateLast) {\n                this.ctx.rotate(transform.rotate * Math.PI / 180);\n            }\n\n            const x = transform.translateBeforeScale ? transform.translateX : transform.translateX * transform.scaleX;\n            const y = transform.translateBeforeScale ? transform.translateY : transform.translateY * transform.scaleY;\n            this.ctx.transform(transform.scaleX, 0, 0, transform.scaleY, x, y);\n\n            if(transform.rotateLast) {\n                this.ctx.rotate(transform.rotate * Math.PI / 180);\n            }\n\n            return true;\n        }\n        return false;\n    }\n}\n\n\nlet safeLogCount = 0;\nfunction safeLog(...logContents) {\n    \n    if(safeLogCount < 300) {\n        safeLogCount++;\n        console.log(...logContents);\n    }\n}\nfunction safeErrorLog(...logContents) {\n    \n    if(safeLogCount < 50) {\n        safeLogCount++;\n        console.error(...logContents);\n    }\n}\n","import '../worker-loader';\nimport CanvasWorkerImporter = require('worker-loader?inline=true!./canvasworker');\n\nexport default CanvasWorkerImporter;","module.exports = function() {\n  return require(\"!!/home/micha/Web/ssvg/node_modules/worker-loader/dist/workers/InlineWorker.js\")(\"!function(e){var t={};function s(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,s),i.l=!0,i.exports}s.m=e,s.c=t,s.d=function(e,t,r){s.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},s.r=function(e){\\\"undefined\\\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\\\"Module\\\"}),Object.defineProperty(e,\\\"__esModule\\\",{value:!0})},s.t=function(e,t){if(1&t&&(e=s(e)),8&t)return e;if(4&t&&\\\"object\\\"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(s.r(r),Object.defineProperty(r,\\\"default\\\",{enumerable:!0,value:e}),2&t&&\\\"string\\\"!=typeof e)for(var i in e)s.d(r,i,function(t){return e[t]}.bind(null,i));return r},s.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(t,\\\"a\\\",t),t},s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s.p=\\\"\\\",s(s.s=0)}([function(e,t,s){\\\"use strict\\\";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,\\\"__esModule\\\",{value:!0});const i=s(1),a=r(s(2));let n;const l=self;let o,h;l.onmessage=function(e){const t=e.data;if(t&&t.cmd)switch(t.cmd){case\\\"INIT\\\":o=new i.VdomManager(t.data.visData,!1,!0);const e=!!t.data.safeMode;h=t.data.port,n=new a.default(o,t.data.canvas,e,()=>{h.postMessage({msg:\\\"DRAWN\\\"}),l.postMessage({msg:\\\"DRAWN\\\"})}),h.onmessage=(e=>{const t=e.data;if(t&&t.cmd)switch(t.cmd){case\\\"UPDATE_NODES\\\":(e=>{for(let t of e.data.enterExit){if(\\\"EXIT\\\"===t.cmd){const e=o.getNodeFromIndex(t.childGlobalIndex),s=o.getNodeFromIndex(t.parentGlobalIndex);o.removeNode(e,s)}if(\\\"ENTER\\\"===t.cmd){const e=t.node;t.keepChildren||(e.children=[]),o.addNode(e),o.addNodeToParent(e,t.parentGlobalIndex),n.addNode&&n.addNode(e)}}n.updatePropertiesFromQueue?n.updatePropertiesFromQueue(e.data.update):o.updatePropertiesFromQueue(e.data.update,(e,t)=>{n.nodeUpdated(e,t)}),n.draw()})(t);break;default:console.error(\\\"did not find command \\\",t.cmd)}});break;case\\\"UPDATE_NODES\\\":console.error(\\\"update is now supposed to come from sync worker.\\\");break;default:console.error(\\\"did not find command \\\",t.cmd)}}},function(e,t,s){\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0});class r{constructor(e,t,s){this.data=e,this.ignoreDesign=t,this.isRenderer=s,this.sharedRenderData={values:{},buffers:{}},this.syncedSharedData={values:{},buffers:{}},this.sharedDataQueue={values:{},buffers:{}},this.queue={},this.useSharedArrayFor=[\\\"cx\\\",\\\"cy\\\",\\\"x1\\\",\\\"x2\\\",\\\"y1\\\",\\\"y2\\\",\\\"x\\\",\\\"y\\\"],this.indexToNodeMap={},this.changed=!1,this.cachedListSelections={},this.ensureNodesMapped(),\\\"SharedArrayBuffer\\\"in self||(this.useSharedArrayFor=[])}ensureInitialized(e,t=!0,s){if(\\\"class\\\"===e&&(e=\\\"className\\\"),t&&-1!==this.useSharedArrayFor.indexOf(e)){const t=s<500?1e3:Math.round(2*s);if(this.sharedDataQueue.values[e]){const s=Int32Array.BYTES_PER_ELEMENT*t;if(this.sharedDataQueue.values[e].byteLength/s<.6){const{buffer:s,values:r}=this.createBufferTransferValues(t,this.sharedDataQueue.values[e]);this.sharedDataQueue.values[e]=r,this.sharedDataQueue.buffers[e]=s}}else{let s;!this.queue[e]||this.queue[e]instanceof SharedArrayBuffer||(s=this.queue[e]);const{buffer:r,values:i}=this.createBufferTransferValues(t,void 0,s);this.sharedDataQueue.values[e]=i,this.sharedDataQueue.buffers[e]=r,this.queue[e]=r}}else this.queue[e]||(this.queue[e]={})}createBufferTransferValues(e,t,s){let i=new SharedArrayBuffer(Int32Array.BYTES_PER_ELEMENT*e);const a=new Int32Array(i);if(s)for(const e in s)if(s.hasOwnProperty(e)){let t=s[e];\\\"string\\\"==typeof t&&(t=parseFloat(t)),a[e]=t*r.BUFFER_PRECISION_FACTOR}if(t)for(let e=0;e<t.length;e++)t[e]&&(a[e]=t[e]);return{buffer:i,values:a}}set(e,t,s,i=!0){if(\\\"class\\\"===t&&(t=\\\"className\\\"),void 0===e.globalElementIndex)throw console.error(\\\"No index\\\",e),new Error(\\\"Element has no index\\\");const a=e.globalElementIndex,n=i&&-1!==this.useSharedArrayFor.indexOf(t)?\\\"shared\\\":\\\"raw\\\";try{this.changed=!0,\\\"shared\\\"===n?(\\\"string\\\"==typeof s&&(s=parseFloat(s)),s*=r.BUFFER_PRECISION_FACTOR,0===(s=Math.round(s))&&(s=56938516),this.sharedDataQueue.values[t][a]=s):(this.queue[t][a]=s,this.sharedDataQueue.values[t]&&this.syncedSharedData.values[t][a]&&(this.sharedDataQueue.values[t][a]=0))}catch(s){console.error(s),console.log(this.queue,this.syncedSharedData.values,n,t,e,a)}}removePendingChanges(e){const t=e.globalElementIndex;for(const e in this.queue)this.queue.hasOwnProperty(e)&&delete this.queue[e][t];for(const e in this.sharedDataQueue.values)this.sharedDataQueue.values.hasOwnProperty(e)&&(this.sharedDataQueue.values[e][t]=0)}ensureNodesMapped(){const e=t=>{void 0===t.globalElementIndex&&console.error(\\\"no element index\\\",t),this.indexToNodeMap[t.globalElementIndex]=t;for(const s of t.children)e(s)};e(this.data)}enableFrontendDesignProperties(){this.ignoreDesign=!1}addNodeToParent(e,t){if(\\\"svg\\\"!==e.type){const s=this.getNodeFromIndex(t);if(!s)return console.error(\\\"could not add node without parent\\\",t,e,Object.keys(this.indexToNodeMap)),void new Error(\\\"parent not found\\\");s.children.push(e)}}addNode(e){this.indexToNodeMap[e.globalElementIndex]=e}removeNode(e,t){delete this.indexToNodeMap[e.globalElementIndex];const s=t.children.indexOf(e);t.children.splice(s,1),this.cachedListSelections={},this.removePendingChanges(e)}applyStyleToNodeAndChildren(e,t,s,r){if(e.style[t]=s,r(e,t),e.children)for(let i of e.children)this.applyStyleToNodeAndChildren(i,t,s,r)}applyCssToNodeAndChildren(e,t,s,r,i){if(\\\"*\\\"!==s||r?(e.css[t]||(e.css[t]={}),e.css[t][s]=r):delete e.css[t],i(e,s),e.children)for(let a of e.children)this.applyCssToNodeAndChildren(a,t,s,r,i)}getNodeFromIndex(e){return this.indexToNodeMap[e]}getNodeById(e){const t=Object.values(this.indexToNodeMap).filter(t=>t.id===e);return(!t||t.length>1)&&(a(\\\"multiple nodes with this id!\\\",Object.values(this.indexToNodeMap).filter(e=>e.id).map(e=>e.id),e),a(t.length,t)),t&&1===t.length?t[0]:null}get(e,t){return Array.isArray(t)?t.map(t=>this.getSingle(e,t)):this.getSingle(e,t)}getSingle(e,t){const s=this.isRenderer?this.sharedRenderData.values:this.syncedSharedData.values;if(s[t]&&s[t][e.globalElementIndex]){const i=s[t][e.globalElementIndex];return 56938516===i?0:i/r.BUFFER_PRECISION_FACTOR}return e[t]}hasChanges(){return this.changed}getQueue(){return this.queue}clearQueue(){this.queue={},this.changed=!1}transferSyncedDataToRenderData(){for(let e in this.syncedSharedData.values){this.queue[e]=this.syncedSharedData.buffers[e],this.sharedRenderData.values[e]=this.syncedSharedData.values[e];const t=this.syncedSharedData.buffers[e].byteLength/Int32Array.BYTES_PER_ELEMENT,{buffer:s,values:r}=this.createBufferTransferValues(t,this.syncedSharedData.values[e]);this.syncedSharedData.buffers[e]=s,this.syncedSharedData.values[e]=r}}transferBufferQueueDataToSynced(){for(let e in this.sharedDataQueue.values){this.queue[e]=this.sharedDataQueue.buffers[e],this.syncedSharedData.values[e]=this.sharedDataQueue.values[e];const t=this.sharedDataQueue.buffers[e].byteLength/Int32Array.BYTES_PER_ELEMENT,{buffer:s,values:r}=this.createBufferTransferValues(t,this.sharedDataQueue.values[e]);this.sharedDataQueue.buffers[e]=s,this.sharedDataQueue.values[e]=r}}addToQueue(e){for(let t in e)if(e.hasOwnProperty(t))if(\\\"SharedArrayBuffer\\\"in self&&e[t]instanceof SharedArrayBuffer){const s=e[t];this.syncedSharedData.buffers[t]=s,this.syncedSharedData.values[t]=new Int32Array(s)}else{const s=e[t];this.queue[t]||(this.queue[t]={});for(let e in s){if(!s.hasOwnProperty(e))continue;const r=parseInt(e);this.queue[t][r]=s[r]}}}updatePropertiesFromQueue(e,t=(()=>{})){for(let s in e){if(!e.hasOwnProperty(s))continue;const i=s.substr(0,\\\"style;\\\".length);if(this.ignoreDesign&&(\\\"style;\\\"===i||-1!==r.IGNOREDESIGN_ATTRIBUTES.indexOf(s)))continue;let a;if(\\\"SharedArrayBuffer\\\"in self&&e[s]instanceof SharedArrayBuffer){const t=e[s];this.isRenderer?(this.sharedRenderData.buffers[s]=t,this.sharedRenderData.values[s]=new Int32Array(t)):(this.syncedSharedData.buffers[s]=t,this.syncedSharedData.values[s]=new Int32Array(t))}else{a=e[s];for(let e in a){if(!a.hasOwnProperty(e))continue;const n=parseInt(e),l=this.getNodeFromIndex(n);if(!l){console.error(\\\"node not found at index\\\",n);continue}let o=a[e];if(\\\"style;\\\"===i){const e=s.substr(\\\"style;\\\".length);this.applyStyleToNodeAndChildren(l,e,o,t)}else if(\\\"css;\\\"===s.substr(0,4)){const[e,r]=s.substr(4).split(\\\";\\\");this.applyCssToNodeAndChildren(l,e,r,o,t)}else-1!==r.ROUNDED_ATTRS.indexOf(s)&&(\\\"string\\\"==typeof o&&(o=parseFloat(o)),o=Math.round(o)),l[s]=o,t(l,s)}}}}getVisNodeFromSelector(e){const t=e.lastIndexOf(\\\">\\\"),s=e.substr(0,t),r=e.substr(t+1),i=s?this.cachedListSelections[s]:null;let a=-1;const n=r.indexOf(\\\":nth-child(\\\");if(-1!==n&&(a=parseInt(r.substr(n+11)),i&&i[a]))return i[a];const l=[];if(this.findMatchingChildren(this.data,e,0,l),l&&1===l.length){const e=l[0];return-1!==a&&(this.cachedListSelections[s]||(this.cachedListSelections[s]={}),this.cachedListSelections[s][a]=e),e}return null}getVisNodesFromSelector(e,t){const s=[];return this.findMatchingChildren(e,t,0,s),s}findChildrenOfType(e,t,s){const r=e=>{for(const i of e.children)i.type===t&&s.push(i),0!==e.children.length&&r(i)};r(e)}filterNodesBySelector(e,t,s){return t.filter(t=>r.isCssRulePartialMatch(s,t,e))}findMatchingChildren(e,t,s,i,a=[]){if(!t&&\\\"\\\"!==t)throw console.error(e,t,s,i,a),Error(\\\"undefined selector\\\");let n=t.split(\\\">\\\").map(e=>e.trim()),l=n[s];if(0===s&&\\\"svg\\\"===l&&(l=n[++s],s===n.length))return i.push(e),void a.push(t);if(t.match(/^[a-z]+$/))return this.findChildrenOfType(e,t,i);for(let o=0;o<e.children.length;o++){let h=e.children[o],c=!1;r.isCssRulePartialMatch(l,h,e)&&(s===n.length-1?(i.push(h),a.push(t)):c=!0),h.children&&(c||n.length<2)&&s+1<n.length&&this.findMatchingChildren(h,t,s+1,i,a)}}static isCssRulePartialMatch(e,t,s){if(\\\":not(\\\"===e.substr(0,5)){const i=e.substr(0,e.length-1).substr(5);return!r.isCssRulePartialMatch(i,t,s)}if(\\\".\\\"===e[0]){const s=e.split(\\\".\\\");if(s.shift(),t.className){let e=!0;for(const r of s)-1===t.className.split(\\\" \\\").indexOf(r)&&(e=!1);return e}}else if(\\\"#\\\"===e[0]){if(e.substr(1)===t.id)return!0}else if(e.match(/^[a-z]+$/)){if(e===t.type)return!0}else{if(-1!==e.indexOf(\\\":nth-child(\\\")){let r=\\\"any\\\",i=e;\\\":\\\"!==e[0]&&(r=e.substr(0,e.indexOf(\\\":\\\")),i=e.substr(e.indexOf(\\\":\\\")));const a=parseInt(i.substr(\\\":nth-child(\\\".length));return s.children.indexOf(t)===a-1&&(\\\"any\\\"===r||t.type===r)}if(-1!==e.indexOf(\\\".\\\")){const s=e.indexOf(\\\".\\\"),r=e.substr(0,s),i=e.substr(s+1);if(r===t.type&&t.className&&-1!==t.className.split(\\\" \\\").indexOf(i))return!0}}return!1}}r.IGNOREDESIGN_ATTRIBUTES=[\\\"fill\\\",\\\"stroke\\\",\\\"opacity\\\"],r.BUFFER_PRECISION_FACTOR=10,r.ROUNDED_ATTRS=[\\\"cx\\\",\\\"cy\\\"],t.VdomManager=r;let i=0;function a(...e){i<400&&(i++,console.log(...e))}},function(e,t,s){\\\"use strict\\\";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,\\\"__esModule\\\",{value:!0});const i=r(s(3));t.default=class{constructor(e,t,s=!1,r=(()=>{})){this.vdom=e,this.canvas=t,this.forceSingle=s,this.onDrawn=r,this.parentValues={},this.lastFullSecond=0,this.countSinceLastFullSecond=0,this.circlesByColor={},this.rectsByColor={},this.drawTexts=[],this.drawImages=[],this.linesByColor={};const i=t.getContext(\\\"2d\\\");if(!i)throw new Error(\\\"could not create canvas context\\\");this.ctx=i,this.ctx.scale(this.vdom.data.scale,this.vdom.data.scale),this.ctx.save(),this.draw(),setTimeout(()=>{console.log(this.forceSingle,this.vdom.data)},1e3)}draw(){const e=this.ctx;e.restore(),e.save(),e.clearRect(0,0,this.vdom.data.width,this.vdom.data.height),this.drawLine(null,\\\"start\\\"),this.drawCircle(null,\\\"start\\\"),this.drawRect(null,\\\"start\\\"),this.drawText(null,\\\"start\\\"),this.drawImage(null,\\\"start\\\"),this.drawNodeAndChildren(this.vdom.data,this.forceSingle),this.drawLine(null,\\\"end\\\"),this.drawCircle(null,\\\"end\\\"),this.drawRect(null,\\\"end\\\"),this.drawText(null,\\\"end\\\"),this.drawImage(null,\\\"end\\\"),this.onDrawn();const t=Math.round(performance.now()/1e3);t!==this.lastFullSecond&&(this.lastFullSecond=t,this.countSinceLastFullSecond=0),this.countSinceLastFullSecond++}drawNodeAndChildren(e,t,s){if(\\\"clippath\\\"===e.type&&!s)return;const r=this.ctx,i=Object.assign({},this.parentValues),n=!s&&(e.children.length||e.transform);if(n&&r.save(),this.applyTransform(e.transform),(e.transform||s)&&(t=!0),e[\\\"clip-path\\\"])if(\\\"url(#\\\"===e[\\\"clip-path\\\"].substr(0,5)){const s=e[\\\"clip-path\\\"].substr(5,e[\\\"clip-path\\\"].length-6),i=this.vdom.getNodeById(s);if(t=!0,i){const e=new Path2D;this.drawNodeAndChildren(i,t,e),r.clip(e)}}else!function(...e){a<50&&(a++,console.error(...e))}(\\\"clip path format not supported:\\\",e[\\\"clip-path\\\"]);if(e.style.display&&\\\"none\\\"===e.style.display||(t?this.drawSingleNode(e,\\\"forcesingle\\\",s):this.drawSingleNode(e,\\\"normal\\\",s)),e.children){this.parentValues.fill=e.fill||this.parentValues.fill,this.parentValues[\\\"style;fill\\\"]=e.style.fill||this.parentValues[\\\"style;fill\\\"],this.parentValues.stroke=e.stroke||this.parentValues.stroke,this.parentValues[\\\"style;stroke\\\"]=e.style.stroke||this.parentValues[\\\"style;stroke\\\"],this.parentValues.opacity=e.opacity||this.parentValues.opacity;for(let r=0;r<e.children.length;r++)this.drawNodeAndChildren(e.children[r],t,s)}n&&r.restore(),this.parentValues=i}drawSingleNode(e,t=\\\"normal\\\",s){const r=e.type,i=this[\\\"draw\\\"+r.substr(0,1).toUpperCase()+r.substr(1)];if(!i)return console.error(\\\"no draw function yet for \\\",r);i.call(this,e,t,s)}drawClippath(e){}drawSvg(){}drawTitle(){}drawG(){}drawCircle(e,t=\\\"normal\\\",s){if(\\\"normal\\\"===t){const t=this.getFillStyle(e,\\\"#000\\\")+\\\";\\\"+this.getStrokeStyle(e);this.circlesByColor[t]||(this.circlesByColor[t]=[]),this.circlesByColor[t].push(e)}if(\\\"start\\\"!==t){if(\\\"end\\\"!==t){if(\\\"forcesingle\\\"===t){let t=this.getFillStyle(e,\\\"#000\\\");const r=this.getStrokeStyle(e),i=this.vdom.get(e,\\\"cx\\\")||0,a=this.vdom.get(e,\\\"cy\\\")||0;this.ctx.beginPath(),this.ctx.fillStyle=t,this.ctx.strokeStyle=r,this.ctx.lineWidth=this.getStrokeWidth(e),this.ctx.moveTo(i+e.r,a),(s||this.ctx).arc(i,a,e.r,0,2*Math.PI),\\\"none\\\"===t||s||this.ctx.fill(),r&&\\\"none\\\"!==r&&!s&&this.ctx.stroke()}}else for(let e in this.circlesByColor)if(this.circlesByColor.hasOwnProperty(e)){const t=e.split(\\\";\\\"),s=t[0],r=t[1];this.ctx.fillStyle=s;let i=this.circlesByColor[e][0];const a=this.getStrokeWidth(i);this.ctx.lineWidth=void 0!==a?a:1,this.ctx.strokeStyle=r,this.ctx.beginPath();for(let t of this.circlesByColor[e]){const e=Math.round(this.vdom.get(t,\\\"cx\\\"))||0,s=Math.round(this.vdom.get(t,\\\"cy\\\"))||0,r=Math.round(this.vdom.get(t,\\\"r\\\"));this.ctx.save(),this.applyTransform(t.transform),this.ctx.moveTo(e+r,s),this.ctx.arc(e,s,r,0,2*Math.PI),this.ctx.restore()}\\\"none\\\"!==s&&this.ctx.fill(),r&&\\\"none\\\"!==r&&this.ctx.stroke()}}else this.circlesByColor={}}nodeUpdated(e,t){(\\\"*\\\"===t||t.includes(\\\"fill\\\")||t.includes(\\\"opacity\\\"))&&delete e[\\\"fill-cache\\\"],(\\\"*\\\"===t||t.includes(\\\"stroke\\\")||t.includes(\\\"opacity\\\"))&&(delete e[\\\"stroke-cache\\\"],delete e[\\\"strokewidth-cache\\\"])}getFillStyle(e,t=\\\"none\\\"){if(\\\"fill-cache\\\"in e)return e[\\\"fill-cache\\\"];let s=this.getAttributeStyleCss(e,\\\"fill\\\"),r=this.getAttributeStyleCss(e,\\\"opacity\\\")||1;r*=this.getAttributeStyleCss(e,\\\"fill-opacity\\\")||1;let a=\\\"\\\";return this.parentValues.fill&&(a=this.parentValues.fill),this.parentValues[\\\"style;fill\\\"]&&(a=this.parentValues[\\\"style;fill\\\"]),this.parentValues.fill||this.parentValues[\\\"style;fill\\\"]||(a=t),s=i.default.colorToRgba(s,r,a),e[\\\"fill-cache\\\"]=s,s}getAttributeStyleCss(e,t){if(e.style[t])return e.style[t];{if(this.parentValues[`style;${t}`])return this.parentValues[`style;${t}`];let s=e[t],r=-1;for(const a in e.css)if(e.css[a][t]){const n=i.default.getCssRuleSpecificityNumber(a);n>r&&(s=e.css[a][t],r=n)}return s}}getStrokeStyle(e,t=\\\"none\\\"){if(\\\"stroke-cache\\\"in e)return e[\\\"stroke-cache\\\"];const s=this.getAttributeStyleCss(e,\\\"stroke\\\");let r=this.getAttributeStyleCss(e,\\\"opacity\\\")||1;r*=this.getAttributeStyleCss(e,\\\"stroke-opacity\\\")||1;let a=\\\"\\\";return a=this.parentValues.stroke?this.parentValues.stroke:t,e[\\\"stroke-cache\\\"]=void 0!==s?i.default.colorToRgba(s,r):a,e[\\\"stroke-cache\\\"]}getStrokeWidth(e){if(\\\"strokewidth-cache\\\"in e)return e[\\\"strokewidth-cache\\\"];const t=this.getAttributeStyleCss(e,\\\"stroke-width\\\");return e[\\\"strokewidth-cache\\\"]=void 0===t?void 0:parseFloat(t),e[\\\"strokewidth-cache\\\"]}drawRect(e,t=\\\"normal\\\",s){if(\\\"normal\\\"===t){const t=this.getFillStyle(e,\\\"#000\\\")+\\\";\\\"+this.getStrokeStyle(e);this.rectsByColor[t]||(this.rectsByColor[t]=[]),this.rectsByColor[t].push(e)}if(\\\"start\\\"!==t){if(\\\"end\\\"!==t){if(\\\"forcesingle\\\"===t){let t=this.getFillStyle(e,\\\"#000\\\");const r=this.getStrokeStyle(e),i=this.vdom.get(e,\\\"x\\\")||0,a=this.vdom.get(e,\\\"y\\\")||0;t&&\\\"none\\\"!==t&&!s&&(this.ctx.fillStyle=t,this.ctx.fillRect(i,a,e.width,e.height)),s&&s.rect(i,a,e.width,e.height),\\\"none\\\"===r||s||(this.ctx.strokeStyle=r,this.ctx.beginPath(),this.ctx.rect(i,a,e.width,e.height),this.ctx.stroke())}}else for(let e in this.rectsByColor)if(this.rectsByColor.hasOwnProperty(e)){const t=e.split(\\\";\\\"),s=t[0],r=t[1];this.ctx.fillStyle=s;let i=this.rectsByColor[e][0];const a=this.getStrokeWidth(i);this.ctx.lineWidth=void 0!==a?a:1,this.ctx.strokeStyle=r,this.ctx.beginPath();for(let t of this.rectsByColor[e]){const e=Math.round(this.vdom.get(t,\\\"x\\\"))||0,s=Math.round(this.vdom.get(t,\\\"y\\\"))||0;this.ctx.save(),this.applyTransform(t.transform),this.ctx.moveTo(e,s),this.ctx.rect(e,s,t.width,t.height),this.ctx.restore()}\\\"none\\\"!==s&&this.ctx.fill(),r&&\\\"none\\\"!==r&&this.ctx.stroke()}}else this.rectsByColor={}}drawText(e,t=\\\"normal\\\",s=!1){const r=e=>{if(\\\"\\\"===e.text)return;let t=this.getAttributeStyleCss(e,\\\"font-family\\\")||\\\"Times New Roman\\\",s=\\\"16px\\\";const r=this.getAttributeStyleCss(e,\\\"font-size\\\");r&&(s=i.default.convertSizeToPx(r)+\\\"px\\\");let a=this.getAttributeStyleCss(e,\\\"font\\\");a||(a=s+\\\" \\\"+t);let n=this.getAttributeStyleCss(e,\\\"text-anchor\\\");n&&(\\\"middle\\\"===n&&(n=\\\"center\\\"),this.ctx.textAlign=n),this.ctx.font=a,this.ctx.fillStyle=this.getFillStyle(e,\\\"#000\\\");let l=this.vdom.get(e,\\\"x\\\")||0,o=this.vdom.get(e,\\\"y\\\")||0,h=i.default.convertSizeToPx(e.dx,!1)||0,c=i.default.convertSizeToPx(e.dy,!1)||0;this.ctx.fillText(e.text,l+h,o+c)};if(\\\"start\\\"!==t)if(\\\"normal\\\"!==t){if(\\\"forcesingle\\\"===t)return r(e);if(\\\"end\\\"!==t);else for(const e of this.drawTexts)r(e)}else this.drawTexts.push(e);else this.drawTexts=[]}drawImage(e,t=\\\"normal\\\"){const s=e=>{if(\\\"\\\"===e.href)return;let t=e.fill?e.fill:e.style.fill;t||(t=\\\"#000\\\"),this.ctx.fillStyle=t;let s=this.vdom.get(e,\\\"x\\\")||0,r=this.vdom.get(e,\\\"y\\\")||0,i=e.width||0,a=e.height||0;if(e.image)try{this.ctx.drawImage(e.image,s,r,i,a)}catch(e){console.log(e)}};if(\\\"start\\\"!==t)if(\\\"normal\\\"!==t){if(\\\"forcesingle\\\"===t)return s(e);if(\\\"end\\\"!==t);else for(const e of this.drawImages)s(e)}else this.drawImages.push(e);else this.drawImages=[]}drawPath(e,t=\\\"normal\\\",s){if(\\\"normal\\\"!==t&&\\\"forcesingle\\\"!==t)return;const r=this.getFillStyle(e,\\\"#000\\\"),i=this.getStrokeStyle(e),a=this.getStrokeWidth(e);let n=new Path2D(e.d);if(this.ctx.fillStyle=r,void 0!==i&&\\\"none\\\"!==i){void 0!==a&&(this.ctx.lineWidth=a),this.ctx.strokeStyle=i;const t=this.getAttributeStyleCss(e,\\\"stroke-linejoin\\\");t&&(\\\"bevel\\\"===t||\\\"round\\\"===t||\\\"miter\\\"===t?this.ctx.lineJoin=t:console.error(\\\"unknown line join value:\\\",t)),s||this.ctx.stroke(n)}r&&\\\"none\\\"!==r&&!s&&this.ctx.fill(n),s&&s.addPath(n)}drawTspan(e,t=\\\"normal\\\"){if(\\\"normal\\\"!==t&&\\\"forcesingle\\\"!==t)return;this.ctx.font=\\\"10px Arial\\\",this.ctx.fillStyle=\\\"#000000\\\";const s=\\\"middle\\\"===e.style.textAnchor?\\\"center\\\":e.style.textAnchor;this.ctx.textAlign=s,this.ctx.fillText(e.text,this.vdom.get(e,\\\"x\\\"),this.vdom.get(e,\\\"y\\\"))}drawTextpath(e){console.warn(\\\"no draw function yet for textpath\\\")}drawLine(e,t=\\\"normal\\\"){if(this.vdom.data.scale,\\\"normal\\\"===t){const t=this.getStrokeStyle(e),s=this.getStrokeWidth(e);if(\\\"none\\\"===t||0===s)return;const r=`${t};${s}`;this.linesByColor[r]||(this.linesByColor[r]=[]),this.linesByColor[r].push(e)}if(\\\"start\\\"!==t){if(\\\"end\\\"!==t){if(\\\"forcesingle\\\"===t){this.ctx.beginPath();const[t,s,r,i]=this.vdom.get(e,[\\\"x1\\\",\\\"x2\\\",\\\"y1\\\",\\\"y2\\\"]).map(e=>Math.round(e)||0);this.ctx.moveTo(t,r),this.ctx.lineTo(s,i),this.ctx.strokeStyle=this.getStrokeStyle(e),this.ctx.lineWidth=this.getStrokeWidth(e),this.ctx.stroke()}}else for(let e in this.linesByColor)if(this.linesByColor.hasOwnProperty(e)){const t=e.split(\\\";\\\"),s=t[0],r=t[1];this.ctx.strokeStyle=s,this.ctx.lineWidth=parseFloat(r),this.ctx.beginPath();for(let t of this.linesByColor[e]){t.transform&&(this.ctx.save(),this.applyTransform(t.transform));const[e,s,r,i]=this.vdom.get(t,[\\\"x1\\\",\\\"x2\\\",\\\"y1\\\",\\\"y2\\\"]).map(e=>Math.round(e)||0);this.ctx.moveTo(e,r),this.ctx.lineTo(s,i),t.transform&&this.ctx.restore()}this.ctx.stroke()}}else this.linesByColor={}}drawDefs(e){}drawMarker(e){}applyTransform(e){const t=e?i.default.parseTransform(e):null;if(t){t.rotateLast||this.ctx.rotate(t.rotate*Math.PI/180);const e=t.translateBeforeScale?t.translateX:t.translateX*t.scaleX,s=t.translateBeforeScale?t.translateY:t.translateY*t.scaleY;return this.ctx.transform(t.scaleX,0,0,t.scaleY,e,s),t.rotateLast&&this.ctx.rotate(t.rotate*Math.PI/180),!0}return!1}};let a=0},function(e,t,s){\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0});class r{static parseTransform(e){const t={translateX:0,translateY:0,scaleX:1,scaleY:1,rotate:0,translateBeforeScale:!1,rotateLast:!1};if(e){if(\\\"string\\\"!=typeof e)return t.scaleX=e.k,t.scaleY=e.k,t.translateX=e.x,t.translateY=e.y,t.translateBeforeScale=!0,t;let s=e;s=s.replace(/ /g,\\\"\\\");const r=/\\\\s*translate\\\\(([-0-9.]+),([-0-9.]+)\\\\)/.exec(s);r&&(t.translateX=parseFloat(r[1]),t.translateY=parseFloat(r[2]));const i=/\\\\s*scale\\\\(([-0-9.]+)(,[-0-9.]+)?\\\\)/.exec(s);i&&(t.scaleX=parseFloat(i[1]),t.scaleY=i[2]?parseFloat(i[2].substr(1)):parseFloat(i[1]));const a=/\\\\s*rotate\\\\(([-0-9.]+)\\\\)/.exec(s);a&&(t.rotate=parseFloat(a[1])),/\\\\s*translate\\\\(([-0-9.]+),([-0-9.]+)\\\\)scale\\\\(([-0-9.,]+)\\\\)/.exec(s)&&(t.translateBeforeScale=!0),/\\\\s*rotate\\\\(([-0-9.,]+)\\\\)$/.exec(s)&&(t.rotateLast=!0);const n=/\\\\s*matrix\\\\(([-0-9.]+),([-0-9.]+),([-0-9.]+),([-0-9.]+),([-0-9.]+),([-0-9.]+)\\\\)/.exec(s);n&&(t.scaleX=parseFloat(n[1]),t.scaleY=parseFloat(n[4]),t.translateX=parseFloat(n[5]),t.translateY=parseFloat(n[6]))}return t}static addTransforms(e,t){return{translateX:e.translateX+t.translateX,translateY:e.translateY+t.translateY,scaleX:e.scaleX*t.scaleX,scaleY:e.scaleY*t.scaleY,rotate:e.rotate+t.rotate,translateBeforeScale:!1,rotateLast:!1}}static convertSizeToPx(e,t=!0){const s=t?14:void 0;return void 0===e?s:\\\"number\\\"==typeof e?e:\\\"em\\\"===e.substr(-2)?Math.round(12*parseFloat(e)):\\\"px\\\"===e.substr(-2)?parseInt(e):e.match(/^[0-9]+$/)?parseInt(e):(console.warn(\\\"size in unsupported format: \\\",e),s)}static colorToRgba(e,t=1,s=\\\"none\\\"){if(\\\"none\\\"===e)return e;e||(e=s);const i=`${e}-${t}`;if(r.rgbaCache[i])return r.rgbaCache[i];if(e=r.CssNamedColorToHex(e),1===t&&\\\"string\\\"==typeof e)return r.rgbaCache[i]=e,e;let a;if(\\\"string\\\"==typeof e&&\\\"#\\\"===e[0]){let s;if(!/^#([A-Fa-f0-9]{3}){1,2}$/.test(e))throw new Error(\\\"Bad Hex\\\");3==(s=e.substring(1)).length&&(s=s[0]+s[0]+s[1]+s[1]+s[2]+s[2]),a=\\\"rgba(\\\"+[(s=\\\"0x\\\"+s)>>16&255,s>>8&255,255&s].join(\\\",\\\")+\\\",\\\"+t+\\\")\\\"}else if(\\\"object\\\"==typeof e){if(\\\"r\\\"in e)a=\\\"rgba(\\\"+e.r+\\\",\\\"+e.g+\\\",\\\"+e.b+\\\",\\\"+t+\\\")\\\";else if(\\\"h\\\"in e){const s=r.hslToRgb(e.h/360,e.s,e.l);a=\\\"rgba(\\\"+s.r+\\\",\\\"+s.g+\\\",\\\"+s.b+\\\",\\\"+t+\\\")\\\"}}else\\\"rgb(\\\"===e.substr(0,4)&&(a=e.substr(0,e.length-1).replace(\\\"rgb\\\",\\\"rgba\\\")+\\\", \\\"+t+\\\")\\\");return r.rgbaCache[i]=a,a}static hslToRgb(e,t,s){var r,i,a;if(0==t)r=i=a=s;else{var n=function(e,t,s){return s<0&&(s+=1),s>1&&(s-=1),s<1/6?e+6*(t-e)*s:s<.5?t:s<2/3?e+(t-e)*(2/3-s)*6:e},l=s<.5?s*(1+t):s+t-s*t,o=2*s-l;r=n(o,l,e+1/3),i=n(o,l,e),a=n(o,l,e-1/3)}return{r:Math.round(255*r),g:Math.round(255*i),b:Math.round(255*a)}}static CssNamedColorToHex(e){return\\\"string\\\"==typeof e&&i[e.toUpperCase()]?i[e.toUpperCase()]:e}static getCssRuleSpecificityNumber(e){let t=0;e=e.replace(/ >/g,\\\">\\\").replace(/> /g,\\\">\\\");const s=[].concat.apply([],e.split(\\\" \\\").map(e=>e.split(\\\">\\\")));for(const e of s){t+=100;const s=e[0];if(\\\"#\\\"===s)t+=1e3;else if(\\\".\\\"===s){const s=e.split(\\\".\\\").length-1;t+=Math.min(900,100*s)}}return t}}r.rgbaCache={},t.default=r;const i={ALICEBLUE:\\\"#F0F8FF\\\",ANTIQUEWHITE:\\\"#FAEBD7\\\",AQUA:\\\"#00FFFF\\\",AQUAMARINE:\\\"#7FFFD4\\\",AZURE:\\\"#F0FFFF\\\",BEIGE:\\\"#F5F5DC\\\",BISQUE:\\\"#FFE4C4\\\",BLACK:\\\"#000000\\\",BLANCHEDALMOND:\\\"#FFEBCD\\\",BLUE:\\\"#0000FF\\\",BLUEVIOLET:\\\"#8A2BE2\\\",BROWN:\\\"#A52A2A\\\",BURLYWOOD:\\\"#DEB887\\\",CADETBLUE:\\\"#5F9EA0\\\",CHARTREUSE:\\\"#7FFF00\\\",CHOCOLATE:\\\"#D2691E\\\",CORAL:\\\"#FF7F50\\\",CORNFLOWERBLUE:\\\"#6495ED\\\",CORNSILK:\\\"#FFF8DC\\\",CRIMSON:\\\"#DC143C\\\",CYAN:\\\"#00FFFF\\\",DARKBLUE:\\\"#00008B\\\",DARKCYAN:\\\"#008B8B\\\",DARKGOLDENROD:\\\"#B8860B\\\",DARKGRAY:\\\"#A9A9A9\\\",DARKGREY:\\\"#A9A9A9\\\",DARKGREEN:\\\"#006400\\\",DARKKHAKI:\\\"#BDB76B\\\",DARKMAGENTA:\\\"#8B008B\\\",DARKOLIVEGREEN:\\\"#556B2F\\\",DARKORANGE:\\\"#FF8C00\\\",DARKORCHID:\\\"#9932CC\\\",DARKRED:\\\"#8B0000\\\",DARKSALMON:\\\"#E9967A\\\",DARKSEAGREEN:\\\"#8FBC8F\\\",DARKSLATEBLUE:\\\"#483D8B\\\",DARKSLATEGRAY:\\\"#2F4F4F\\\",DARKSLATEGREY:\\\"#2F4F4F\\\",DARKTURQUOISE:\\\"#00CED1\\\",DARKVIOLET:\\\"#9400D3\\\",DEEPPINK:\\\"#FF1493\\\",DEEPSKYBLUE:\\\"#00BFFF\\\",DIMGRAY:\\\"#696969\\\",DIMGREY:\\\"#696969\\\",DODGERBLUE:\\\"#1E90FF\\\",FIREBRICK:\\\"#B22222\\\",FLORALWHITE:\\\"#FFFAF0\\\",FORESTGREEN:\\\"#228B22\\\",FUCHSIA:\\\"#FF00FF\\\",GAINSBORO:\\\"#DCDCDC\\\",GHOSTWHITE:\\\"#F8F8FF\\\",GOLD:\\\"#FFD700\\\",GOLDENROD:\\\"#DAA520\\\",GRAY:\\\"#808080\\\",GREY:\\\"#808080\\\",GREEN:\\\"#008000\\\",GREENYELLOW:\\\"#ADFF2F\\\",HONEYDEW:\\\"#F0FFF0\\\",HOTPINK:\\\"#FF69B4\\\",INDIANRED:\\\"#CD5C5C\\\",INDIGO:\\\"#4B0082\\\",IVORY:\\\"#FFFFF0\\\",KHAKI:\\\"#F0E68C\\\",LAVENDER:\\\"#E6E6FA\\\",LAVENDERBLUSH:\\\"#FFF0F5\\\",LAWNGREEN:\\\"#7CFC00\\\",LEMONCHIFFON:\\\"#FFFACD\\\",LIGHTBLUE:\\\"#ADD8E6\\\",LIGHTCORAL:\\\"#F08080\\\",LIGHTCYAN:\\\"#E0FFFF\\\",LIGHTGOLDENRODYELLOW:\\\"#FAFAD2\\\",LIGHTGRAY:\\\"#D3D3D3\\\",LIGHTGREY:\\\"#D3D3D3\\\",LIGHTGREEN:\\\"#90EE90\\\",LIGHTPINK:\\\"#FFB6C1\\\",LIGHTSALMON:\\\"#FFA07A\\\",LIGHTSEAGREEN:\\\"#20B2AA\\\",LIGHTSKYBLUE:\\\"#87CEFA\\\",LIGHTSLATEGRAY:\\\"#778899\\\",LIGHTSLATEGREY:\\\"#778899\\\",LIGHTSTEELBLUE:\\\"#B0C4DE\\\",LIGHTYELLOW:\\\"#FFFFE0\\\",LIME:\\\"#00FF00\\\",LIMEGREEN:\\\"#32CD32\\\",LINEN:\\\"#FAF0E6\\\",MAGENTA:\\\"#FF00FF\\\",MAROON:\\\"#800000\\\",MEDIUMAQUAMARINE:\\\"#66CDAA\\\",MEDIUMBLUE:\\\"#0000CD\\\",MEDIUMORCHID:\\\"#BA55D3\\\",MEDIUMPURPLE:\\\"#9370DB\\\",MEDIUMSEAGREEN:\\\"#3CB371\\\",MEDIUMSLATEBLUE:\\\"#7B68EE\\\",MEDIUMSPRINGGREEN:\\\"#00FA9A\\\",MEDIUMTURQUOISE:\\\"#48D1CC\\\",MEDIUMVIOLETRED:\\\"#C71585\\\",MIDNIGHTBLUE:\\\"#191970\\\",MINTCREAM:\\\"#F5FFFA\\\",MISTYROSE:\\\"#FFE4E1\\\",MOCCASIN:\\\"#FFE4B5\\\",NAVAJOWHITE:\\\"#FFDEAD\\\",NAVY:\\\"#000080\\\",OLDLACE:\\\"#FDF5E6\\\",OLIVE:\\\"#808000\\\",OLIVEDRAB:\\\"#6B8E23\\\",ORANGE:\\\"#FFA500\\\",ORANGERED:\\\"#FF4500\\\",ORCHID:\\\"#DA70D6\\\",PALEGOLDENROD:\\\"#EEE8AA\\\",PALEGREEN:\\\"#98FB98\\\",PALETURQUOISE:\\\"#AFEEEE\\\",PALEVIOLETRED:\\\"#DB7093\\\",PAPAYAWHIP:\\\"#FFEFD5\\\",PEACHPUFF:\\\"#FFDAB9\\\",PERU:\\\"#CD853F\\\",PINK:\\\"#FFC0CB\\\",PLUM:\\\"#DDA0DD\\\",POWDERBLUE:\\\"#B0E0E6\\\",PURPLE:\\\"#800080\\\",REBECCAPURPLE:\\\"#663399\\\",RED:\\\"#FF0000\\\",ROSYBROWN:\\\"#BC8F8F\\\",ROYALBLUE:\\\"#4169E1\\\",SADDLEBROWN:\\\"#8B4513\\\",SALMON:\\\"#FA8072\\\",SANDYBROWN:\\\"#F4A460\\\",SEAGREEN:\\\"#2E8B57\\\",SEASHELL:\\\"#FFF5EE\\\",SIENNA:\\\"#A0522D\\\",SILVER:\\\"#C0C0C0\\\",SKYBLUE:\\\"#87CEEB\\\",SLATEBLUE:\\\"#6A5ACD\\\",SLATEGRAY:\\\"#708090\\\",SLATEGREY:\\\"#708090\\\",SNOW:\\\"#FFFAFA\\\",SPRINGGREEN:\\\"#00FF7F\\\",STEELBLUE:\\\"#4682B4\\\",TAN:\\\"#D2B48C\\\",TEAL:\\\"#008080\\\",THISTLE:\\\"#D8BFD8\\\",TOMATO:\\\"#FF6347\\\",TURQUOISE:\\\"#40E0D0\\\",VIOLET:\\\"#EE82EE\\\",WHEAT:\\\"#F5DEB3\\\",WHITE:\\\"#FFFFFF\\\",WHITESMOKE:\\\"#F5F5F5\\\",YELLOW:\\\"#FFFF00\\\",YELLOWGREEN:\\\"#9ACD32\\\"}}]);\\n//# sourceMappingURL=facbcb59590a67717c9c.worker.js.map\", __webpack_public_path__ + \"facbcb59590a67717c9c.worker.js\");\n};","import '../worker-loader';\nimport SyncWorkerImporter = require('worker-loader?inline=true!./syncworker');\n\nexport default SyncWorkerImporter;","module.exports = function() {\n  return require(\"!!/home/micha/Web/ssvg/node_modules/worker-loader/dist/workers/InlineWorker.js\")(\"!function(e){var t={};function s(r){if(t[r])return t[r].exports;var n=t[r]={i:r,l:!1,exports:{}};return e[r].call(n.exports,n,n.exports,s),n.l=!0,n.exports}s.m=e,s.c=t,s.d=function(e,t,r){s.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},s.r=function(e){\\\"undefined\\\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\\\"Module\\\"}),Object.defineProperty(e,\\\"__esModule\\\",{value:!0})},s.t=function(e,t){if(1&t&&(e=s(e)),8&t)return e;if(4&t&&\\\"object\\\"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(s.r(r),Object.defineProperty(r,\\\"default\\\",{enumerable:!0,value:e}),2&t&&\\\"string\\\"!=typeof e)for(var n in e)s.d(r,n,function(t){return e[t]}.bind(null,n));return r},s.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(t,\\\"a\\\",t),t},s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s.p=\\\"\\\",s(s.s=0)}([function(e,t,s){\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0});const r=s(1);class n{constructor(e,t){this.port=t,this.enterExitQueue=[],this.hasNewData=!0,this.waitingToRender=!0,this.vdom=new r.VdomManager(e,!1,!1),this.port.onmessage=(e=>{this.onRendererReady()})}onUpdateReceived(e){this.hasNewData=!0,this.enterExitQueue=this.enterExitQueue.concat(e.data.enterExit);const t=e.data.update;this.vdom.addToQueue(t),this.waitingToRender&&this.onRendererReady()}onRendererReady(){if(!this.hasNewData)return void(this.waitingToRender=!0);this.waitingToRender=!1,this.vdom.transferSyncedDataToRenderData();const e=this.vdom.getQueue();this.vdom.clearQueue();const t={cmd:\\\"UPDATE_NODES\\\",data:{enterExit:this.enterExitQueue,update:e}};this.port.postMessage(t),this.enterExitQueue=[],this.hasNewData=!1}}let a;self.onmessage=function(e){const t=e.data;if(t&&t.cmd)switch(t.cmd){case\\\"INIT\\\":a=new n(t.data.visData,t.data.port);break;case\\\"UPDATE_NODES\\\":a.onUpdateReceived(t);break;default:console.error(\\\"did not find command \\\",t.cmd)}}},function(e,t,s){\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0});class r{constructor(e,t,s){this.data=e,this.ignoreDesign=t,this.isRenderer=s,this.sharedRenderData={values:{},buffers:{}},this.syncedSharedData={values:{},buffers:{}},this.sharedDataQueue={values:{},buffers:{}},this.queue={},this.useSharedArrayFor=[\\\"cx\\\",\\\"cy\\\",\\\"x1\\\",\\\"x2\\\",\\\"y1\\\",\\\"y2\\\",\\\"x\\\",\\\"y\\\"],this.indexToNodeMap={},this.changed=!1,this.cachedListSelections={},this.ensureNodesMapped(),\\\"SharedArrayBuffer\\\"in self||(this.useSharedArrayFor=[])}ensureInitialized(e,t=!0,s){if(\\\"class\\\"===e&&(e=\\\"className\\\"),t&&-1!==this.useSharedArrayFor.indexOf(e)){const t=s<500?1e3:Math.round(2*s);if(this.sharedDataQueue.values[e]){const s=Int32Array.BYTES_PER_ELEMENT*t;if(this.sharedDataQueue.values[e].byteLength/s<.6){const{buffer:s,values:r}=this.createBufferTransferValues(t,this.sharedDataQueue.values[e]);this.sharedDataQueue.values[e]=r,this.sharedDataQueue.buffers[e]=s}}else{let s;!this.queue[e]||this.queue[e]instanceof SharedArrayBuffer||(s=this.queue[e]);const{buffer:r,values:n}=this.createBufferTransferValues(t,void 0,s);this.sharedDataQueue.values[e]=n,this.sharedDataQueue.buffers[e]=r,this.queue[e]=r}}else this.queue[e]||(this.queue[e]={})}createBufferTransferValues(e,t,s){let n=new SharedArrayBuffer(Int32Array.BYTES_PER_ELEMENT*e);const a=new Int32Array(n);if(s)for(const e in s)if(s.hasOwnProperty(e)){let t=s[e];\\\"string\\\"==typeof t&&(t=parseFloat(t)),a[e]=t*r.BUFFER_PRECISION_FACTOR}if(t)for(let e=0;e<t.length;e++)t[e]&&(a[e]=t[e]);return{buffer:n,values:a}}set(e,t,s,n=!0){if(\\\"class\\\"===t&&(t=\\\"className\\\"),void 0===e.globalElementIndex)throw console.error(\\\"No index\\\",e),new Error(\\\"Element has no index\\\");const a=e.globalElementIndex,i=n&&-1!==this.useSharedArrayFor.indexOf(t)?\\\"shared\\\":\\\"raw\\\";try{this.changed=!0,\\\"shared\\\"===i?(\\\"string\\\"==typeof s&&(s=parseFloat(s)),s*=r.BUFFER_PRECISION_FACTOR,0===(s=Math.round(s))&&(s=56938516),this.sharedDataQueue.values[t][a]=s):(this.queue[t][a]=s,this.sharedDataQueue.values[t]&&this.syncedSharedData.values[t][a]&&(this.sharedDataQueue.values[t][a]=0))}catch(s){console.error(s),console.log(this.queue,this.syncedSharedData.values,i,t,e,a)}}removePendingChanges(e){const t=e.globalElementIndex;for(const e in this.queue)this.queue.hasOwnProperty(e)&&delete this.queue[e][t];for(const e in this.sharedDataQueue.values)this.sharedDataQueue.values.hasOwnProperty(e)&&(this.sharedDataQueue.values[e][t]=0)}ensureNodesMapped(){const e=t=>{void 0===t.globalElementIndex&&console.error(\\\"no element index\\\",t),this.indexToNodeMap[t.globalElementIndex]=t;for(const s of t.children)e(s)};e(this.data)}enableFrontendDesignProperties(){this.ignoreDesign=!1}addNodeToParent(e,t){if(\\\"svg\\\"!==e.type){const s=this.getNodeFromIndex(t);if(!s)return console.error(\\\"could not add node without parent\\\",t,e,Object.keys(this.indexToNodeMap)),void new Error(\\\"parent not found\\\");s.children.push(e)}}addNode(e){this.indexToNodeMap[e.globalElementIndex]=e}removeNode(e,t){delete this.indexToNodeMap[e.globalElementIndex];const s=t.children.indexOf(e);t.children.splice(s,1),this.cachedListSelections={},this.removePendingChanges(e)}applyStyleToNodeAndChildren(e,t,s,r){if(e.style[t]=s,r(e,t),e.children)for(let n of e.children)this.applyStyleToNodeAndChildren(n,t,s,r)}applyCssToNodeAndChildren(e,t,s,r,n){if(\\\"*\\\"!==s||r?(e.css[t]||(e.css[t]={}),e.css[t][s]=r):delete e.css[t],n(e,s),e.children)for(let a of e.children)this.applyCssToNodeAndChildren(a,t,s,r,n)}getNodeFromIndex(e){return this.indexToNodeMap[e]}getNodeById(e){const t=Object.values(this.indexToNodeMap).filter(t=>t.id===e);return(!t||t.length>1)&&(a(\\\"multiple nodes with this id!\\\",Object.values(this.indexToNodeMap).filter(e=>e.id).map(e=>e.id),e),a(t.length,t)),t&&1===t.length?t[0]:null}get(e,t){return Array.isArray(t)?t.map(t=>this.getSingle(e,t)):this.getSingle(e,t)}getSingle(e,t){const s=this.isRenderer?this.sharedRenderData.values:this.syncedSharedData.values;if(s[t]&&s[t][e.globalElementIndex]){const n=s[t][e.globalElementIndex];return 56938516===n?0:n/r.BUFFER_PRECISION_FACTOR}return e[t]}hasChanges(){return this.changed}getQueue(){return this.queue}clearQueue(){this.queue={},this.changed=!1}transferSyncedDataToRenderData(){for(let e in this.syncedSharedData.values){this.queue[e]=this.syncedSharedData.buffers[e],this.sharedRenderData.values[e]=this.syncedSharedData.values[e];const t=this.syncedSharedData.buffers[e].byteLength/Int32Array.BYTES_PER_ELEMENT,{buffer:s,values:r}=this.createBufferTransferValues(t,this.syncedSharedData.values[e]);this.syncedSharedData.buffers[e]=s,this.syncedSharedData.values[e]=r}}transferBufferQueueDataToSynced(){for(let e in this.sharedDataQueue.values){this.queue[e]=this.sharedDataQueue.buffers[e],this.syncedSharedData.values[e]=this.sharedDataQueue.values[e];const t=this.sharedDataQueue.buffers[e].byteLength/Int32Array.BYTES_PER_ELEMENT,{buffer:s,values:r}=this.createBufferTransferValues(t,this.sharedDataQueue.values[e]);this.sharedDataQueue.buffers[e]=s,this.sharedDataQueue.values[e]=r}}addToQueue(e){for(let t in e)if(e.hasOwnProperty(t))if(\\\"SharedArrayBuffer\\\"in self&&e[t]instanceof SharedArrayBuffer){const s=e[t];this.syncedSharedData.buffers[t]=s,this.syncedSharedData.values[t]=new Int32Array(s)}else{const s=e[t];this.queue[t]||(this.queue[t]={});for(let e in s){if(!s.hasOwnProperty(e))continue;const r=parseInt(e);this.queue[t][r]=s[r]}}}updatePropertiesFromQueue(e,t=(()=>{})){for(let s in e){if(!e.hasOwnProperty(s))continue;const n=s.substr(0,\\\"style;\\\".length);if(this.ignoreDesign&&(\\\"style;\\\"===n||-1!==r.IGNOREDESIGN_ATTRIBUTES.indexOf(s)))continue;let a;if(\\\"SharedArrayBuffer\\\"in self&&e[s]instanceof SharedArrayBuffer){const t=e[s];this.isRenderer?(this.sharedRenderData.buffers[s]=t,this.sharedRenderData.values[s]=new Int32Array(t)):(this.syncedSharedData.buffers[s]=t,this.syncedSharedData.values[s]=new Int32Array(t))}else{a=e[s];for(let e in a){if(!a.hasOwnProperty(e))continue;const i=parseInt(e),u=this.getNodeFromIndex(i);if(!u){console.error(\\\"node not found at index\\\",i);continue}let d=a[e];if(\\\"style;\\\"===n){const e=s.substr(\\\"style;\\\".length);this.applyStyleToNodeAndChildren(u,e,d,t)}else if(\\\"css;\\\"===s.substr(0,4)){const[e,r]=s.substr(4).split(\\\";\\\");this.applyCssToNodeAndChildren(u,e,r,d,t)}else-1!==r.ROUNDED_ATTRS.indexOf(s)&&(\\\"string\\\"==typeof d&&(d=parseFloat(d)),d=Math.round(d)),u[s]=d,t(u,s)}}}}getVisNodeFromSelector(e){const t=e.lastIndexOf(\\\">\\\"),s=e.substr(0,t),r=e.substr(t+1),n=s?this.cachedListSelections[s]:null;let a=-1;const i=r.indexOf(\\\":nth-child(\\\");if(-1!==i&&(a=parseInt(r.substr(i+11)),n&&n[a]))return n[a];const u=[];if(this.findMatchingChildren(this.data,e,0,u),u&&1===u.length){const e=u[0];return-1!==a&&(this.cachedListSelections[s]||(this.cachedListSelections[s]={}),this.cachedListSelections[s][a]=e),e}return null}getVisNodesFromSelector(e,t){const s=[];return this.findMatchingChildren(e,t,0,s),s}findChildrenOfType(e,t,s){const r=e=>{for(const n of e.children)n.type===t&&s.push(n),0!==e.children.length&&r(n)};r(e)}filterNodesBySelector(e,t,s){return t.filter(t=>r.isCssRulePartialMatch(s,t,e))}findMatchingChildren(e,t,s,n,a=[]){if(!t&&\\\"\\\"!==t)throw console.error(e,t,s,n,a),Error(\\\"undefined selector\\\");let i=t.split(\\\">\\\").map(e=>e.trim()),u=i[s];if(0===s&&\\\"svg\\\"===u&&(u=i[++s],s===i.length))return n.push(e),void a.push(t);if(t.match(/^[a-z]+$/))return this.findChildrenOfType(e,t,n);for(let d=0;d<e.children.length;d++){let o=e.children[d],h=!1;r.isCssRulePartialMatch(u,o,e)&&(s===i.length-1?(n.push(o),a.push(t)):h=!0),o.children&&(h||i.length<2)&&s+1<i.length&&this.findMatchingChildren(o,t,s+1,n,a)}}static isCssRulePartialMatch(e,t,s){if(\\\":not(\\\"===e.substr(0,5)){const n=e.substr(0,e.length-1).substr(5);return!r.isCssRulePartialMatch(n,t,s)}if(\\\".\\\"===e[0]){const s=e.split(\\\".\\\");if(s.shift(),t.className){let e=!0;for(const r of s)-1===t.className.split(\\\" \\\").indexOf(r)&&(e=!1);return e}}else if(\\\"#\\\"===e[0]){if(e.substr(1)===t.id)return!0}else if(e.match(/^[a-z]+$/)){if(e===t.type)return!0}else{if(-1!==e.indexOf(\\\":nth-child(\\\")){let r=\\\"any\\\",n=e;\\\":\\\"!==e[0]&&(r=e.substr(0,e.indexOf(\\\":\\\")),n=e.substr(e.indexOf(\\\":\\\")));const a=parseInt(n.substr(\\\":nth-child(\\\".length));return s.children.indexOf(t)===a-1&&(\\\"any\\\"===r||t.type===r)}if(-1!==e.indexOf(\\\".\\\")){const s=e.indexOf(\\\".\\\"),r=e.substr(0,s),n=e.substr(s+1);if(r===t.type&&t.className&&-1!==t.className.split(\\\" \\\").indexOf(n))return!0}}return!1}}r.IGNOREDESIGN_ATTRIBUTES=[\\\"fill\\\",\\\"stroke\\\",\\\"opacity\\\"],r.BUFFER_PRECISION_FACTOR=10,r.ROUNDED_ATTRS=[\\\"cx\\\",\\\"cy\\\"],t.VdomManager=r;let n=0;function a(...e){n<400&&(n++,console.log(...e))}}]);\\n//# sourceMappingURL=31731be93d032bee89e3.worker.js.map\", __webpack_public_path__ + \"31731be93d032bee89e3.worker.js\");\n};","import {Domhandler, SsvgElement} from \"./domhandler\";\nimport {VdomNode} from \"../util/vdom/vdom\";\nimport DrawingUtils from \"../canvasworker/drawingUtils\";\nimport {VdomManager} from \"../util/vdom/vdom-manager\";\n\nexport class Interactionhandler {\n\n    private interactionSelections: SsvgElement[] = [];\n    private hoveredElement: Element|undefined;\n\n    constructor(private canvas: HTMLCanvasElement,\n                private svg: SVGElement & SsvgElement,\n                private domHandler: Domhandler,\n                private vdom: VdomManager) {\n    }\n\n    setupListeners() {\n        this.canvas.addEventListener('mousedown', e => this.propagateMouseEvent(e));\n        this.canvas.addEventListener('touchstart', e => this.propagateTouchEvent(e));\n        this.canvas.addEventListener('mousemove', e => {\n            const lastHovered = this.hoveredElement;\n            this.hoveredElement = this.propagateMouseEvent(e);\n            if(lastHovered !== this.hoveredElement) {\n                if(lastHovered) {\n                    lastHovered.dispatchEvent(new MouseEvent('mouseout', e));\n                }\n            }\n            this.propagateMouseEvent(e, 'mouseover');\n        });\n        this.canvas.addEventListener('touchmove', e => {\n            const lastHovered = this.hoveredElement;\n            this.hoveredElement = this.propagateTouchEvent(e);\n            if(lastHovered !== this.hoveredElement) {\n                if(lastHovered) {\n                    lastHovered.dispatchEvent(this.duplicateTouchEvent(e, 'mouseout'));\n                }\n            }\n            this.propagateTouchEvent(e, 'mouseover');\n        });\n        this.canvas.addEventListener('mouseup', e => this.propagateMouseEvent(e));\n        this.canvas.addEventListener('touchend', e => this.propagateTouchEvent(e));\n        this.canvas.addEventListener('click', e => this.propagateMouseEvent(e));\n        this.canvas.addEventListener('wheel', e => this.propagateWheelEvent(e));\n    }\n\n    captureD3On(el: SsvgElement) {\n        if(el && this.interactionSelections.indexOf(el) === -1)\n        {\n            this.interactionSelections.push(el);\n        }\n    }\n\n    private propagateMouseEvent(evt: MouseEvent, type?: string) {\n        return this.propagateEvent(new MouseEvent(type? type : evt.type, evt));\n    }\n\n    private duplicateTouchEvent(evt: TouchEvent, type?: string) {\n        const e = document.createEvent('TouchEvent');\n        if(!type) {\n            type = evt.type;\n        }\n        e.initEvent(type, true, false);\n        for(const prop in evt) {\n            if(prop !== 'isTrusted' && evt.hasOwnProperty(prop)) {\n                Object.defineProperty(e, prop, {\n                    writable: true,\n                    value: evt[prop],\n                });\n            }\n        }\n        Object.defineProperty(e, 'type', {\n            writable: true,\n            value: type,\n        });\n        const touches = [];\n        for(let i = 0; i < evt.touches.length; i++) {\n            const touch = evt.touches[i];\n            touches.push({identifier: touch.identifier, pageX: touch.pageX, pageY: touch.pageY,\n                clientX: touch.clientX, clientY: touch.clientY});\n        }\n        Object.defineProperty(e, 'touches', {\n            writable: true,\n            value: touches,\n        });\n        return e;\n    }\n\n    private propagateTouchEvent(evt: TouchEvent, type?: string) {\n        return this.propagateEvent(this.duplicateTouchEvent(evt, type));\n    }\n\n    private propagateWheelEvent(evt: WheelEvent) {\n        return this.propagateEvent(new WheelEvent(evt.type, evt));\n    }\n\n    private propagateEvent(new_event: MouseEvent|TouchEvent|WheelEvent): undefined|Element {\n        this.svg.dispatchEvent(new_event); // for EasyPZ\n\n        let triggeredElement: undefined|Element;\n        const {x, y} = Interactionhandler.getMousePosition(new_event);\n\n        for(let interactionSel of this.interactionSelections)\n        {\n            let parentNode = this.domHandler.getVisNode(interactionSel)\n\n            //let matchingVisParent = selectedNodes[i];\n            let j = 1;\n\n            if(!parentNode) {\n                //console.error(interactionSel, parentSelector, parentNode);\n            } else {\n                for(let node of parentNode.children)\n                {\n                    let childNode = this.nodeAtPosition(node, x - 10, y - 10);\n\n                    if(childNode)\n                    {\n                        const element = this.domHandler.getElementFromNode(node);\n                        const childElement = this.domHandler.getElementFromNode(childNode);\n\n                        if(childElement) {\n                            Object.defineProperty(new_event, 'target', {\n                                writable: true,\n                                value: childElement\n                            });\n                        }\n\n                        if(childElement) {\n                            triggeredElement = childElement;\n                            childElement.dispatchEvent(new_event);\n                        }\n\n                        if(element !== childElement) {\n                            if(!triggeredElement) {\n                                triggeredElement = element;\n                            }\n                            element.dispatchEvent(new_event);\n                        }\n                    }\n                    j++;\n                }\n            }\n        }\n        return triggeredElement;\n    }\n\n    private static getMousePosition(event: MouseEvent|TouchEvent) : {x: number, y: number}|null\n    {\n        let pos = {x: 0, y: 0};\n\n        const mouseEvents = ['wheel', 'click', 'mousemove', 'mousedown', 'mouseup', 'dblclick', 'contextmenu',\n            'mouseenter', 'mouseleave', 'mouseout', 'mouseover'];\n        if(mouseEvents.indexOf(event.type) !== -1 && event['clientX']) {\n            pos = {x: event['clientX'], y: event['clientY']};\n        } else if(event.type.substr(0,5) === 'touch') {\n            const touches = event['touches'] ? event['touches'] : [];\n            if(touches.length < 1) return null;\n            pos = {x: touches[0].clientX, y: touches[0].clientY};\n        } else {\n            safeErrorLog('no event pos for event type ', event);\n        }\n\n        return pos;\n    }\n\n    private nodeAtPosition(visNode: VdomNode, x: number, y: number): false|VdomNode {\n        if (visNode.type === 'circle') {\n            let cx = this.vdom.get(visNode, 'cx') || 0;\n            let cy = this.vdom.get(visNode, 'cy') || 0;\n            if (visNode.transform) {\n                const transform = DrawingUtils.parseTransform(visNode.transform);\n                if (transform.translateX) {\n                    cx += transform.translateX;\n                }\n                if (transform.translateY) {\n                    cy += transform.translateY;\n                }\n            }\n            const distance = Math.sqrt(Math.pow(cx - x, 2) + Math.pow(cy - y, 2));\n            return distance < visNode.r ? visNode : false;\n        } else if(visNode.type === 'rect' || visNode.type === 'image') {\n\n            let elX = this.vdom.get(visNode, 'x') || 0;\n            let elY = this.vdom.get(visNode, 'y') || 0;\n            const width = visNode.width;\n            const height = visNode.height;\n\n            if (visNode.transform) {\n                const transform = DrawingUtils.parseTransform(visNode.transform);\n                if (transform.translateX) {\n                    elX += transform.translateX;\n                }\n                if (transform.translateY) {\n                    elY += transform.translateY;\n                }\n            }\n\n            const centerX = elX + width / 2;\n            const centerY = elY + height / 2;\n\n            const distanceX = Math.abs(centerX - x);\n            const distanceY = Math.abs(centerY - y);\n\n            return distanceX < width / 2 && distanceY < height / 2 ? visNode : false;\n\n        } else if(visNode.type === 'g') {\n\n            const transform = this.domHandler.getTotalTransformation(visNode);\n            if(transform.translateX) {\n                x -= transform.translateX;\n            }\n            if(transform.translateY) {\n                y -= transform.translateY;\n            }\n\n            let matchAny: false|VdomNode = false;\n            for(let i = 0; i < visNode.children.length; i++) {\n                if(this.nodeAtPosition(visNode.children[i], x, y)) {\n                    matchAny = visNode.children[i];\n                }\n            }\n            return matchAny;\n        }\n        return false;\n    }\n}\n\nlet safeLogCount = 0;\nfunction safeLog(...logContents) {\n\n    if(safeLogCount < 200) {\n        safeLogCount++;\n        console.log(...logContents);\n    }\n}\nfunction safeErrorLog(...logContents) {\n\n    if(safeLogCount < 200) {\n        safeLogCount++;\n        console.error(...logContents);\n    }\n}\n","import {Domhandler, SsvgElement} from \"./domhandler\";\nimport {VdomManager} from \"../util/vdom/vdom-manager\";\nimport {VdomNode} from \"../util/vdom/vdom\";\nimport {Interactionhandler} from \"./interactionhandler\";\n\nexport class Redirector {\n    private unassignedNodes: Node[] = [];\n\n    constructor(private svg: SVGElement & SsvgElement,\n                private domHandler: Domhandler,\n                private vdom: VdomManager,\n                private interactions: Interactionhandler,\n                private onSvgSizeSet: () => void,\n                private onAddNode: (node: VdomNode, parentNode: VdomNode, keepChildren: boolean) => void,\n                private onRemoveNode: (node: VdomNode, parentNode: VdomNode) => void,\n                private onSvgAppended: (svgEl: SVGElement & SsvgElement) => void,\n                private svgIsAssignedAndSizeSet: () => boolean) {\n        this.captureD3On();\n        this.replaceNativeRemoveChild();\n        this.replaceNativeAttribute();\n        this.replaceNativePathFunctions();\n        this.replaceNativeCreateElement();\n        this.replaceNativeAppendChild();\n        this.replaceD3Attr();\n        this.replaceNativeSelect();\n        this.replaceNativeGetComputedStyle();\n        this.replaceD3Select();\n        this.replaceD3Remove();\n    }\n\n\n    private captureD3On() {\n        if((window as any)['d3']) {\n            const d3 = (window as any)['d3'];\n            const originalOn = d3.selection.prototype.on;\n            const me = this;\n\n            d3.selection.prototype.on = function()\n            {\n                let el = this._parents && this._parents.length ? this._parents[0] : this[0].parentNode;\n                if(el === document.children[0]) {\n                    el = me.svg;\n                }\n                let isWithinSvg = me.domHandler.isWithinSvg(el);\n\n                if(isWithinSvg) {\n                    me.interactions.captureD3On(el);\n                }\n\n                return originalOn.apply(this, arguments);\n            };\n        }\n    }\n\n    private replaceD3Select() {\n        if((window as any)['d3']) {\n            const me = this;\n            const d3 = (window as any)['d3'];\n\n            const getReplacement = (original) => {\n                return function(selector: string|(()=>{})) {\n                    if(typeof selector === 'string') {\n                        if(selector === 'body') {\n                            return original.apply(this, arguments);\n                        }\n                        let elements: SsvgElement[];\n                        if(this === d3) {\n                            elements = [me.svg];\n                        } else {\n                            elements = this._groups ? this._groups[0] : this[0];\n                        }\n\n                        if(!elements.filter(e => e).length) {\n                            safeLog('element not found within svg, using normal execution', this, selector);\n                            return original.apply(this, arguments);\n                        }\n\n                        let childElements: SsvgElement[] = [];\n\n                        for(let i = 0; i < elements.length; i++) {\n                            const element = elements[i];\n                            const node = me.domHandler.getVisNode(element);\n\n                            if(!node) {\n                                console.warn('node not found', element);\n                                return original.apply(this, arguments);\n                            }\n\n                            const childNodes = me.vdom.getVisNodesFromSelector(node, selector);\n                            childElements = childElements.concat(childNodes.map(node => {\n                                return me.domHandler.getElementFromNode(node);\n                            }));\n                        }\n\n                        const returnValue = original.apply(this, arguments);\n                        const elementsOutsideSvg: NodeList = returnValue._groups ? returnValue._groups[0]\n                            : returnValue[0];\n                        elementsOutsideSvg.forEach(childNode => {\n                            const childEl = <SsvgElement> <any> childNode;\n                            if(childElements.indexOf(childEl) === -1) {\n                                childElements.push();\n                            }\n                        });\n\n                        if(returnValue._groups) {\n                            returnValue._groups[0] = childElements;\n                        } else {\n                            // Older d3 versions\n                            const parentNode = returnValue[0].parentNode;\n                            returnValue[0] = childElements;\n                            returnValue[0].parentNode = parentNode;\n                        }\n\n                        return returnValue;\n                    }\n\n                    return original.apply(this, arguments);\n                }\n            };\n\n            d3.selection.prototype.selectAll = getReplacement(d3.selection.prototype.selectAll);\n            d3.selectAll = getReplacement(d3.selectAll);\n            d3.selection.prototype.select = getReplacement(d3.selection.prototype.select);\n            d3.select = getReplacement(d3.select);\n\n            const origFilter = d3.selection.prototype.filter;\n            d3.selection.prototype.filter = function(selectorString: string) {\n                const elements = this._groups ? this._groups[0] : this[0];\n                if(typeof selectorString !== 'string') {\n                    return origFilter.apply(this, arguments);\n                }\n                let firstElement = elements[0];\n                let i = 1;\n                while(!firstElement && i < elements.length) {\n                    i++;\n                    firstElement = elements[i];\n                }\n\n                const parentNode = firstElement ? me.domHandler.getNodeFromElement(firstElement.parentNode) : null;\n                const nodes = elements.map(element => me.domHandler.getNodeFromElement(element));\n\n                const selectors = selectorString.split(',').map(sel => sel.trim());\n                const filteredNodes = [];\n\n                for(const selector of selectors) {\n                    const matchingNodes = me.vdom.filterNodesBySelector(parentNode, nodes, selector);\n\n                    for(const node of matchingNodes) {\n                        if(filteredNodes.indexOf(node) === -1) {\n                            filteredNodes.push(node);\n                        }\n                    }\n                }\n\n                const filteredElements = filteredNodes.map(node => me.domHandler.getElementFromNode(node));\n\n                const returnValue = origFilter.apply(this, arguments);\n\n                if(returnValue._groups) {\n                    returnValue._groups[0] = filteredElements;\n                } else {\n                    // Older d3 versions\n                    const parentNode = returnValue[0].parentNode;\n                    returnValue[0] = filteredElements;\n                    returnValue[0].parentNode = parentNode;\n                }\n                return returnValue;\n            }\n        }\n    }\n\n    private replaceNativeGetComputedStyle() {\n        const origGetComputedStyle = window.getComputedStyle;\n        const me = this;\n\n        window.getComputedStyle = function(element: SsvgElement) {\n            if(element && !me.domHandler.isWithinSvg(element) && (<Window> <any> element) !== window) {\n                return origGetComputedStyle.call(this, element);\n            }\n\n            const node = me.domHandler.getNodeFromElement(element);\n            if(!node) {\n                console.warn('node not found for ', this, element);\n                return origGetComputedStyle.call(this, element);\n            }\n            return {\n                getPropertyValue(propertyName: string): string {\n                    //console.log(propertyName, node, node.style[propertyName]);\n                    return node.style[propertyName];\n                }\n            } as CSSStyleDeclaration;\n        };\n    }\n\n    private replaceNativeSelect() {\n        const origQuerySelector = Element.prototype.querySelector;\n        const me = this;\n\n        Element.prototype.querySelector = function(this: SsvgElement, selector: string) {\n            if(!me.domHandler.isWithinSvg(this)) {\n                return origQuerySelector.apply(this, arguments);\n            }\n\n            const node = me.domHandler.getVisNode(this);\n            const childNodes = me.vdom.getVisNodesFromSelector(node, selector);\n            if(childNodes.length === 0) {\n                console.warn('could not find selection', this, node, node.globalElementIndex, selector);\n                return null;\n            }\n            return me.domHandler.getElementFromNode(childNodes[0]);\n        };\n    }\n\n    private replaceD3Attr() {\n\n        const me = this;\n\n        function getReplacement(originalFct, prefix = '') {\n            return function(name, value) {\n\n                if(value === undefined) {\n\n                    if(me.unassignedNodes.indexOf(this) !== -1) {\n                        return originalFct.apply(this, arguments);\n                    } else {\n                        // Dealing with d3 v3.\n                        const els = this._groups ? this._groups[0] : this[0];\n                        if(els[0] && !me.domHandler.isWithinSvg(els[0])) {\n                            return originalFct.apply(this, arguments);\n                        }\n                        if(els.length > 1) {\n                            const returnVal = [];\n                            for(const el of els) {\n                                returnVal.push(me.domHandler.getAttributeFromSelector(el, name))\n                            }\n                            return returnVal;\n                        } else {\n                            return me.domHandler.getAttributeFromSelector(els[0], name);\n                        }\n                    }\n                } else {\n                    if(name === 'class' || !me.svg) {\n                        return originalFct.apply(this, arguments);\n                    }\n                    // For d3 v4, this would just be this.groups[0]. The rest is for\n                    // earlier versions, where selectAll() returned other values.\n                    let elements = this._groups ? this._groups[0] : this[0];\n\n                    if(typeof elements === 'object' && Object.keys(elements).length === 1 && elements.parentNode) {\n                        const parentElement = elements.parentNode;\n                        let parentNode: VdomNode;\n                        if(parentElement !== document.children[0]) {\n                            parentNode = me.domHandler.getVisNode(parentElement);\n                        } else {\n                            parentNode = me.vdom.data;\n                        }\n\n                        elements = [];\n                        for(const child of parentNode.children) {\n                            elements.push(me.domHandler.getElementFromNode(child));\n                        }\n                    }\n                    if(!elements) {\n                        return originalFct.apply(this, arguments);\n                    }\n                    const filteredElements = [];\n                    try {\n                        for (const element of elements) {\n                            if (element) {\n                                filteredElements.push(element);\n                            }\n                        }\n                    } catch(e) {\n                        console.error(elements, this);\n                        console.error(e);\n                    }\n                    if(filteredElements.length === 1) {\n                        const element = filteredElements[0];\n                        if(!element) {\n                            console.warn('element not found', this, name, value);\n                            return this;\n                        }\n                        if(!me.domHandler.isWithinSvg(element)) {\n                            return originalFct.apply(this, arguments);\n                        }\n                        me.domHandler.queueSetAttributeOnElement(element, prefix + name, value);\n                    } else {\n                        if(!me.domHandler.isWithinSvg(elements[0])) {\n                            return originalFct.apply(this, arguments);\n                        }\n                        me.domHandler.queueSetAttributeOnSelection(filteredElements, prefix + name, value);\n                    }\n\n                    if(filteredElements[0] === me.svg && (name === 'width' || name === 'height')) {\n                        me.vdom.data[name] = parseInt(value);\n                        me.onSvgSizeSet();\n                    }\n\n                    return this;\n                }\n            };\n        }\n\n        if((window as any)['d3']) {\n            const d3 = (window as any)['d3'];\n\n            const origSelectionAttr = d3.selection.prototype.attr;\n            d3.selection.prototype.attr = getReplacement(origSelectionAttr);\n\n            const origSelectionStyle = d3.selection.prototype.style;\n            d3.selection.prototype.style = getReplacement(origSelectionStyle, 'style;');\n\n            const originalClassed = d3.selection.prototype.classed;\n            d3.selection.prototype.classed = function(className: string,\n                                                      value?: boolean|((data: any, index: number) => boolean)) {\n                if(value !== undefined) {\n                    me.domHandler.enableFrontendDesignProperties();\n                    let elements = this._groups ? this._groups[0] : this[0];\n                    let i = -1;\n                    for(let element of elements) {\n                        i++;\n                        if(element) {\n                            const node = me.domHandler.getNodeFromElement(element);\n                            if(!node) {\n                                console.warn('node not found', element);\n                                continue;\n                            }\n                            const prevClassNames = node.className || '';\n                            const evaluatedValue = typeof value === \"function\" ? value(element.__data__, i) : value;\n                            if(evaluatedValue === true) {\n                                if(prevClassNames.indexOf(className) === -1) {\n                                    let newClassNames = (prevClassNames + ' ' + className).trim();\n\n                                    me.domHandler.queueSetAttributeOnElement(element, 'class', newClassNames);\n                                }\n                            } else if(evaluatedValue === false) {\n                                const containedPreviously = prevClassNames.indexOf(className) !== -1;\n                                if(containedPreviously) {\n                                    const newClassNames = prevClassNames.replace(className, '').replace('  ', ' ');\n                                    me.domHandler.queueSetAttributeOnElement(element, 'class', newClassNames);\n\n                                    if(!node['removedClasses']) {\n                                        node['removedClasses'] = [];\n                                    }\n                                    node['removedClasses'].push(className); // For removing associated styles.\n                                }\n                            }\n                        }\n\n                    }\n                }\n                return originalClassed.apply(this, arguments);\n            };\n\n            const originalTransition = d3.selection.prototype.transition;\n            d3.selection.prototype.transition = function() {\n                me.domHandler.enableFrontendDesignProperties();\n                return originalTransition.apply(this, arguments);\n            };\n\n            const originalText = d3.selection.prototype.text;\n            d3.selection.prototype.text = function(value?: (number|string|((el: HTMLElement) => (number|string)))) {\n                if(value !== undefined) {\n                    let elements = this._groups ? this._groups[0] : this[0];\n                    let i = 0;\n                    for(let element of elements) {\n                        if(element && me.domHandler.isWithinSvg(element)) {\n                            me.domHandler.queueSetAttributeOnElement(element, 'text', value);\n                        }\n\n                        i++;\n                    }\n                }\n                return originalText.apply(this, arguments);\n            };\n        }\n    }\n\n    private replaceD3Remove() {\n        if(window['d3']) {\n            const d3 = window['d3'];\n\n            const newRemove = this.getNewRemoveChild(() => {}, true);\n            const d3Remove = function() {\n                let elements = this._groups ? this._groups[0] : this[0];\n\n                if(elements.length) {\n                    let parentElement: SsvgElement = null;\n                    for(let i = elements.length - 1; i > -1; i--) {\n                        const element = elements[i];\n                        if(element) {\n                            parentElement = element.parentNode;\n                            if(!parentElement) {\n                                console.error('element has no parent node', element);\n                            }\n                            newRemove.call(parentElement, element);\n                        }\n                    }\n                }\n                return this;\n            };\n            d3.selection.prototype.remove = d3Remove;\n            //d3.transition.prototype.remove = d3Remove;\n        }\n    }\n\n    private replaceNativeCreateElement() {\n        const origCreate = document.createElementNS;\n        const me = this;\n\n        document.createElementNS = function() {\n            let newArgs = Array.from(arguments);\n            const el = origCreate.apply(this, newArgs);\n\n            /*el.appendChild = () => {\n                console.log('hi!!', el, arguments);\n                //return el;\n            };*/\n\n            el.appendChild = me.getNewAppendChild(el.appendChild);\n\n            me.unassignedNodes.push(el);\n\n            //console.log(me.unassignedNodes);\n\n            return el;\n        }\n    }\n\n    private getNewRemoveChild(origRemoveChild: ((<T extends Node>(oldChild: T) => T)|(() => void)),\n                              skipUpdateSelectors = false) {\n        const me = this;\n\n        return function<T extends Node>(this: SsvgElement, el: T & SsvgElement) {\n            if(!this) {\n                console.error('context not defined');\n                return el;\n            }\n            if(!me.domHandler.isWithinSvg(el)) {\n                return origRemoveChild.apply(this, arguments);\n            }\n            const parentNode = me.domHandler.getNodeFromElement(this);\n            const node = me.domHandler.getNodeFromElement(el);\n\n            if(!node) {\n                console.error('node not found', node, el, this, parentNode);\n                return origRemoveChild.apply(this, arguments);\n            }\n\n            // Remove all child elements.\n            /*for(const childNode of node.children) {\n                const childEl = me.domHandler.getElementFromNode(childNode);\n                el.removeChild(childEl);\n            }*/\n\n            // Remove from current parent first.\n            Object.defineProperty(el, 'parentNode', {\n                writable: true,\n                value: undefined\n            });\n\n            //console.log('remove')\n            /*me.enterExitQueue.push({\n                cmd: 'EXIT',\n                childGlobalIndex: el.globalElementIndex,\n                parentGlobalIndex: parentNode.globalElementIndex\n            });*/\n            me.onRemoveNode(node, parentNode);\n\n            me.domHandler.removeNode(el, node, parentNode);\n\n            // Fix child indices of all children.\n            if(!skipUpdateSelectors) {\n                if(!parentNode) {\n                    console.error('parent not found', parentNode, this, el);\n                }\n            }\n\n            delete el['selector'];\n\n            return el;\n        };\n    }\n\n    private replaceNativeRemoveChild() {\n        Element.prototype.removeChild = this.getNewRemoveChild(Element.prototype.removeChild);\n    }\n\n    private getNewAppendChild(origAppend) {\n        const me = this;\n\n        return function<T extends Node>(this: SsvgElement, el: T & SsvgElement) {\n            if(!me.svgIsAssignedAndSizeSet) {\n                if(!me.svg && el.tagName === 'svg') {\n                    const appended = origAppend.apply(this, arguments);\n                    me.onSvgAppended(<SVGElement & SsvgElement> <unknown> el);\n                    return appended;\n\n                } else {\n                    return origAppend.apply(this, arguments);\n                }\n            }\n\n            if(!me.domHandler.isWithinSvg(this)) {\n                return origAppend.apply(this, arguments);\n            }\n\n            Object.defineProperty(el, 'ownerSVGElement', {\n                writable: true,\n                value: me.svg\n            });\n            el['appendChild'] = <T extends Node>(el2: T) => {\n                return me.getNewAppendChild(origAppend).call(el, el2);\n            };\n\n            const parentNode = me.domHandler.getNodeFromElement(this);\n            if(!parentNode) {\n                return console.error('parent node not found', this);\n            }\n            let node: VdomNode;\n            let keepChildren = false;\n\n            if(el.globalElementIndex) {\n                node = me.domHandler.getVisNode(el);\n\n                me.getNewRemoveChild(() => {}).call(this, el);\n                keepChildren = true; // If the element is being moved around, keep children.\n            } else {\n                node = me.domHandler.getNodeDataFromEl(el);\n            }\n\n            Object.defineProperty(el, 'style', {\n                writable: true,\n                value: {\n                    setProperty: function(styleProp: string, value: string) {\n                        me.domHandler.queueSetAttributeOnElement(el, 'style;' + styleProp, value);\n                    },\n                    getPropertyValue: function(styleProp) {\n                        me.domHandler.enableFrontendDesignProperties();\n                        return node.style[styleProp];\n                    },\n                    removeProperty: function() {\n                        console.log('remove property not yet implemented.');\n                        //TODO implement removeProperty CSS function.\n                    }\n                }\n            });\n\n            Object.defineProperty(el, 'parentNode', {\n                writable: true,\n                value: this\n            });\n\n            me.domHandler.linkNodeToElement(node, el);\n            me.vdom.addNodeToParent(node, parentNode.globalElementIndex);\n            me.domHandler.restyleNode(node);\n\n            me.onAddNode(node, parentNode, keepChildren);\n            /*if(me.useWorker) {\n                me.enterExitQueue.push({\n                    cmd: 'ENTER',\n                    node: node,\n                    parentGlobalIndex: parentNode.globalElementIndex,\n                    keepChildren: keepChildren\n                });\n            } else {\n                if(me.renderer.addNode) {\n                    me.renderer.addNode(node);\n                }\n            }*/\n\n            if(me.unassignedNodes.indexOf(el) !== -1) {\n                const index = me.unassignedNodes.indexOf(el);\n                me.unassignedNodes.splice(index, 1);\n            }\n\n            return el;\n        };\n    }\n\n    private replaceNativeAppendChild() {\n        const origAppendChild = Element.prototype.appendChild;\n        const newAppend = this.getNewAppendChild(origAppendChild);\n\n        Element.prototype.appendChild = newAppend;\n        Element.prototype.insertBefore = function<T extends Node>(newChild: T, refChild: Node|null) {\n            //TODO: Add insertBefore.\n            newAppend.call(this, newChild);\n\n            return newChild;\n        };\n    }\n\n    private replaceNativePathFunctions() {\n        const me = this;\n        //const origGetPointAtLength = SVGPathElement.prototype.getPointAtLength;\n        const origGetTotalLength = SVGPathElement.prototype.getTotalLength;\n\n        /*SVGPathElement.prototype.getPointAtLength = function() {\n            if(me.isWithinSvg(this)) {\n                const d = this.getAttribute('d');\n                me.origSetAttribute.call(this, 'd', d);\n            }\n            return origGetPointAtLength.apply(this, arguments);\n        };*/\n        SVGPathElement.prototype.getTotalLength = function() {\n            if(me.domHandler.isWithinSvg(this)) {\n                const d = this.getAttribute('d');\n                me.origSetAttribute.call(this, 'd', d);\n            }\n\n            return origGetTotalLength.apply(this, arguments);\n        };\n    }\n\n    private origSetAttribute;\n\n    private replaceNativeAttribute() {\n        this.origSetAttribute = Element.prototype.setAttribute;\n        const me = this;\n\n        const getNewSetAttr = origSetAttr => {\n            return function(this: SsvgElement, name: string, value: any) {\n                if(name === 'easypz' || me.unassignedNodes.indexOf(this) !== -1) {\n                    // Update the original SVG\n                    origSetAttr.apply(this, arguments);\n                    return;\n                }\n                if(name === 'class') {\n                    origSetAttr.apply(this, arguments);\n                }\n                if(!me.domHandler.isWithinSvg(this)) {\n                    return origSetAttr.apply(this, arguments);\n                }\n                me.domHandler.queueSetAttributeOnElement(this, name, value);\n            };\n        }\n\n        Element.prototype.setAttribute = getNewSetAttr(Element.prototype.setAttribute);\n        Element.prototype.setAttributeNS = getNewSetAttr(Element.prototype.setAttributeNS);\n\n        //TODO: Figure out how to access the element when setting a style property.\n        /*CSSStyleDeclaration.prototype.setProperty = function(name: string, value: any) {\n            safeLog(this, arguments);\n            me.elementHandler.queueSetAttributeOnElement(this, 'style;' + name, value);\n        };*/\n\n        const origGetAttr = Element.prototype.getAttribute;\n        Element.prototype.getAttribute = function(this: SsvgElement, name) {\n            if(me.unassignedNodes.indexOf(this) !== -1) {\n                return origGetAttr.apply(this, arguments);\n            } else {\n                try {\n                    return me.domHandler.getAttributeFromSelector(this, name);\n                } catch(e) {\n                    console.error(e);\n                    return origGetAttr.apply(this, arguments);\n                }\n            }\n        };\n    }\n}\n\nlet safeLogCount = 0;\nfunction safeLog(...logContents) {\n\n    if(safeLogCount < 200) {\n        safeLogCount++;\n        console.log(...logContents);\n    }\n}\nfunction safeErrorLog(...logContents) {\n\n    if(safeLogCount < 200) {\n        safeLogCount++;\n        console.error(...logContents);\n    }\n}\n"],"sourceRoot":""}