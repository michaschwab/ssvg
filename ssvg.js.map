{"version":3,"sources":["webpack://SSVG/webpack/universalModuleDefinition","webpack://SSVG/webpack/bootstrap","webpack://SSVG/./canvasworker/drawingUtils.ts","webpack://SSVG/./frontend/exporter.ts","webpack://SSVG/./frontend/ssvg.ts","webpack://SSVG/./frontend/domhandler.ts","webpack://SSVG/./util/vdom/vdom-manager.ts","webpack://SSVG/./canvasworker/canvasrenderer.ts","webpack://SSVG/./canvasworker/index.ts","webpack://SSVG/./canvasworker/canvasworker.ts","webpack://SSVG/./node_modules/worker-loader/dist/workers/InlineWorker.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","DrawingUtils","transform","transformObject","translateX","translateY","scaleX","scaleY","rotate","translateBeforeScale","rotateLast","transformString","replace","translate","exec","parseFloat","scale","substr","matrix","transformA","transformB","size","fallback","defaultValue","undefined","Math","round","parseInt","match","console","warn","color","opacity","defaultColor","cacheKey","rgbaCache","CssNamedColorToHex","rgba","test","Error","substring","length","join","g","b","rgb","hslToRgb","h","hue2rgb","q","COLOR_HEXES","toUpperCase","selector","specificity","parts","concat","apply","split","map","part","start","countClasses","min","ALICEBLUE","ANTIQUEWHITE","AQUA","AQUAMARINE","AZURE","BEIGE","BISQUE","BLACK","BLANCHEDALMOND","BLUE","BLUEVIOLET","BROWN","BURLYWOOD","CADETBLUE","CHARTREUSE","CHOCOLATE","CORAL","CORNFLOWERBLUE","CORNSILK","CRIMSON","CYAN","DARKBLUE","DARKCYAN","DARKGOLDENROD","DARKGRAY","DARKGREY","DARKGREEN","DARKKHAKI","DARKMAGENTA","DARKOLIVEGREEN","DARKORANGE","DARKORCHID","DARKRED","DARKSALMON","DARKSEAGREEN","DARKSLATEBLUE","DARKSLATEGRAY","DARKSLATEGREY","DARKTURQUOISE","DARKVIOLET","DEEPPINK","DEEPSKYBLUE","DIMGRAY","DIMGREY","DODGERBLUE","FIREBRICK","FLORALWHITE","FORESTGREEN","FUCHSIA","GAINSBORO","GHOSTWHITE","GOLD","GOLDENROD","GRAY","GREY","GREEN","GREENYELLOW","HONEYDEW","HOTPINK","INDIANRED","INDIGO","IVORY","KHAKI","LAVENDER","LAVENDERBLUSH","LAWNGREEN","LEMONCHIFFON","LIGHTBLUE","LIGHTCORAL","LIGHTCYAN","LIGHTGOLDENRODYELLOW","LIGHTGRAY","LIGHTGREY","LIGHTGREEN","LIGHTPINK","LIGHTSALMON","LIGHTSEAGREEN","LIGHTSKYBLUE","LIGHTSLATEGRAY","LIGHTSLATEGREY","LIGHTSTEELBLUE","LIGHTYELLOW","LIME","LIMEGREEN","LINEN","MAGENTA","MAROON","MEDIUMAQUAMARINE","MEDIUMBLUE","MEDIUMORCHID","MEDIUMPURPLE","MEDIUMSEAGREEN","MEDIUMSLATEBLUE","MEDIUMSPRINGGREEN","MEDIUMTURQUOISE","MEDIUMVIOLETRED","MIDNIGHTBLUE","MINTCREAM","MISTYROSE","MOCCASIN","NAVAJOWHITE","NAVY","OLDLACE","OLIVE","OLIVEDRAB","ORANGE","ORANGERED","ORCHID","PALEGOLDENROD","PALEGREEN","PALETURQUOISE","PALEVIOLETRED","PAPAYAWHIP","PEACHPUFF","PERU","PINK","PLUM","POWDERBLUE","PURPLE","REBECCAPURPLE","RED","ROSYBROWN","ROYALBLUE","SADDLEBROWN","SALMON","SANDYBROWN","SEAGREEN","SEASHELL","SIENNA","SILVER","SKYBLUE","SLATEBLUE","SLATEGRAY","SLATEGREY","SNOW","SPRINGGREEN","STEELBLUE","TAN","TEAL","THISTLE","TOMATO","TURQUOISE","VIOLET","WHEAT","WHITE","WHITESMOKE","YELLOW","YELLOWGREEN","SSVG","options","unassignedNodes","interactionSelections","svgAssignedAndSizeSet","lastCanvasDrawTimes","enterExitQueue","safeMode","useWorker","getFps","this","maxPixelRatio","canvas","document","createElement","worker","onmessage","e","data","msg","logDrawn","updateCanvas","raf","updateFps","requestAnimationFrame","captureD3On","svg","setupElementsIfSvgExists","addEventListener","propagateMouseEvent","propagateTouchEvent","lastHovered","hoveredElement","dispatchEvent","MouseEvent","duplicateTouchEvent","propagateWheelEvent","replaceNativeRemoveChild","replaceNativeAttribute","replaceNativePathFunctions","replaceNativeCreateElement","replaceNativeAppendChild","replaceD3Attr","replaceNativeSelect","replaceNativeGetComputedStyle","replaceD3Select","replaceD3Remove","setTimeout","log","vdom","svgEl","getElementsByTagName","urlConnector","location","href","indexOf","svgSwitchUrl","svgSwitchComment","createComment","parent","parentElement","nextSibling","next","insertBefore","appendChild","domHandler","getVDom","setCanvasSize","hasChanges","nodeUpdated","node","attr","renderer","applyStyles","queue","getQueue","clearQueue","updatePropertiesFromQueue","sendUpdateToWorker","draw","width","height","devicePixelRatio","style","offscreen","transferControlToOffscreen","sendToWorker","cmd","visData","ensureNodesMapped","element","isWithinSvg","parentEl","parentNode","d3","originalOn","selection","on","me","el","_parents","children","push","arguments","getReplacement","original","elements","_groups","filter","safeLog","childElements","getVisNode","childNodes","getVisNodesFromSelector","getElementFromNode","returnValue","forEach","childNode","childEl","selectAll","select","origFilter","selectorString","firstElement","getNodeFromElement","nodes","selectors","sel","trim","filteredNodes","matchingNodes","filterNodesBySelector","filteredElements","origGetComputedStyle","getComputedStyle","getPropertyValue","propertyName","origQuerySelector","Element","querySelector","globalElementIndex","originalFct","prefix","els","returnVal","getAttributeFromSelector","keys","child","error","queueSetAttributeOnElement","queueSetAttributeOnSelection","origSelectionAttr","origSelectionStyle","originalClassed","classed","className","enableFrontendDesignProperties","prevClassNames","evaluatedValue","__data__","newClassNames","originalTransition","transition","originalText","text","newRemove","getNewRemoveChild","d3Remove","remove","origCreate","createElementNS","newArgs","Array","from","getNewAppendChild","origRemoveChild","skipUpdateSelectors","writable","childGlobalIndex","parentGlobalIndex","removeNodeFromParent","removeChild","origAppend","appended","el2","keepChildren","getNodeDataFromEl","setProperty","styleProp","removeProperty","linkNodeToElement","addNodeToParent","restyleNode","addNode","index","splice","origAppendChild","newAppend","newChild","refChild","origGetTotalLength","SVGPathElement","getTotalLength","getAttribute","origSetAttribute","origSetAttr","setAttribute","origSetAttrNS","setAttributeNS","origGetAttr","evt","type","propagateEvent","createEvent","initEvent","prop","touches","touch","identifier","pageX","pageY","clientX","clientY","WheelEvent","new_event","triggeredElement","x","y","getMousePosition","interactionSel","j","vdomNode","nodeAtPosition","svgChildEl","event","pos","logContents","safeLogCount","safeErrorLog","visNode","cx","cy","parseTransform","sqrt","pow","elX","elY","centerX","centerY","distanceX","abs","distanceY","getTotalTransformation","matchAny","Date","now","shift","timeForTenDrawsMs","fps","enterExit","update","postMessage","CSS_STYLES","ignoreDesign","nodesToRestyle","globalElementIndexCounter","css","VdomManager","display","addChildNodesToVisData","currentNodes","values","attrName","ensureInitialized","set","styleName","getNodeFromIndex","roundedAttrs","tagName","toLowerCase","textContent","attributes","nodeValue","nodeName","val","kebabCase","obj","propNames","getOwnPropertyNames","propName","clean","styleSheets","sheet","rules","cssRules","rule","selectorText","applyRuleToMatchingNodes","selectorPartsLooseStrict","parentsOfInterest","nodeToBeStyled","getNodeParent","setStyle","longSpecName","checkNode","currentNode","looseIndex","strictIndex","selPart","childIndex","isCssRulePartialMatch","removedClass","removeRuleStylesFromNode","removeNode","restyleIndex","childEls","parentSelector","elementType","getParentNode","parents","pop","totalTransform","addTransforms","useBufferCache","sharedData","useSharedArrayFor","indexToNodeMap","changed","cachedBuffers","cachedListSelections","useBuffer","numNodes","newLength","newByteLength","Int32Array","BYTES_PER_ELEMENT","byteLength","buffer","createBufferTransferValues","prevData","SharedArrayBuffer","BUFFER_PRECISION_FACTOR","storage","addToMap","nodeData","parentNodeIndex","applyParentStyles","removePendingChanges","styleValue","onNodeUpdated","applyStyleToNodeAndChildren","applyCssToNodeAndChildren","id","filtered","attrs","isArray","getSingle","setAttrQueue","attrNameStart","IGNOREDESIGN_ATTRIBUTES","self","ROUNDED_ATTRS","cacheBuffers","lastSplitPos","lastIndexOf","selectorWithoutLast","lastPart","parentSel","nthChildPosition","selectedNodes","findMatchingChildren","addDirectChildrenIfMatch","matchIndex","selectedNodeSelectors","selParts","findChildrenOfType","matching","cssRuleSelectorPart","newSelPart","searchClassNames","allTrue","searchClassName","indexPart","targetIndex","cutoff","typeName","forceSingle","onDrawn","parentValues","lastFullSecond","countSinceLastFullSecond","circlesByColor","rectsByColor","drawTexts","drawImages","linesByColor","ctx","getContext","save","restore","clearRect","drawLine","drawCircle","drawRect","drawText","drawImage","drawNodeAndChildren","fullSecond","performance","elData","drawClip","parentValuesBackup","applyTransform","clipPathId","clipNode","getNodeById","path","Path2D","clip","drawSingleNode","fill","getFillStyle","stroke","getStrokeStyle","drawFct","handle","strokeStyle","beginPath","fillStyle","lineWidth","getStrokeWidth","moveTo","arc","PI","fillAndStrokeColor","fillColor","strokeColor","sampleData","includes","getAttributeStyleCss","defaultCol","colorToRgba","highestSpec","getCssRuleSpecificityNumber","fillRect","rect","isClip","drawSingle","fontFamily","fontSize","customSize","convertSizeToPx","font","align","textAlign","dx","dy","fillText","image","strokeWidth","lineJoin","addPath","textAnchor","x1","x2","y1","y2","lineTo","CanvasWorkerImporter","URL","webkitURL","content","url","blob","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","append","getBlob","Blob","Worker","createObjectURL","encodeURIComponent"],"mappings":"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","file":"ssvg.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SSVG\"] = factory();\n\telse\n\t\troot[\"SSVG\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","export type Transformation = {\n    translateX: number,\n    translateY: number,\n    scaleX: number,\n    scaleY: number,\n    rotate: number,\n    translateBeforeScale: boolean,\n    rotateLast: boolean,\n}\n\nexport default class DrawingUtils {\n    static parseTransform(transform: string|{}): Transformation {\n        const transformObject: Transformation = {\n            translateX: 0,\n            translateY: 0,\n            scaleX: 1,\n            scaleY: 1,\n            rotate: 0,\n            translateBeforeScale: false,\n            rotateLast: false\n        };\n        \n        if (transform) {\n            if(typeof transform !== \"string\") {\n                transformObject.scaleX = transform['k'];\n                transformObject.scaleY = transform['k'];\n                transformObject.translateX = transform['x'];\n                transformObject.translateY = transform['y'];\n                transformObject.translateBeforeScale = true;\n                return transformObject;\n            }\n            let transformString = <string> transform;\n            transformString = transformString.replace(/ /g, '');\n            \n            //let translate  = /translate\\((\\d+),(\\d+)\\)/.exec(transform);\n            const translate = /\\s*translate\\(([-0-9.]+),([-0-9.]+)\\)/.exec(transformString);\n            if (translate) {\n                transformObject.translateX = parseFloat(translate[1]);\n                transformObject.translateY = parseFloat(translate[2]);\n            }\n            else {\n                //console.error('no translate found', transform);\n            }\n            \n            const scale = /\\s*scale\\(([-0-9.]+)(,[-0-9.]+)?\\)/.exec(transformString);\n            if (scale) {\n                transformObject.scaleX = parseFloat(scale[1]);\n                transformObject.scaleY = scale[2] ? parseFloat(scale[2].substr(1)) : parseFloat(scale[1]);\n            }\n            else {\n                //console.error('no scale found', transform);\n            }\n            \n            const rotate = /\\s*rotate\\(([-0-9.]+)\\)/.exec(transformString);\n            if (rotate) {\n                transformObject.rotate = parseFloat(rotate[1]);\n            }\n            else {\n                //console.error('no rotate found', transform);\n            }\n            \n            const translateScale = /\\s*translate\\(([-0-9.]+),([-0-9.]+)\\)scale\\(([-0-9.,]+)\\)/.exec(transformString);\n            if (translateScale) {\n                transformObject.translateBeforeScale = true;\n            }\n\n            const rotateLast = /\\s*rotate\\(([-0-9.,]+)\\)$/.exec(transformString);\n            if (rotateLast) {\n                transformObject.rotateLast = true;\n            }\n            \n            const matrix = /\\s*matrix\\(([-0-9.]+),([-0-9.]+),([-0-9.]+),([-0-9.]+),([-0-9.]+),([-0-9.]+)\\)/.exec(transformString);\n            if(matrix) {\n                transformObject.scaleX = parseFloat(matrix[1]);\n                // 2 is horizontal skewing\n                // 3 is vertical skewing\n                transformObject.scaleY = parseFloat(matrix[4]);\n                transformObject.translateX = parseFloat(matrix[5]);\n                transformObject.translateY = parseFloat(matrix[6]);\n            }\n        }\n        \n        return transformObject;\n    }\n\n    static addTransforms(transformA: Transformation, transformB: Transformation): Transformation {\n        return {\n            translateX: transformA.translateX + transformB.translateX,\n            translateY: transformA.translateY + transformB.translateY,\n            scaleX: transformA.scaleX * transformB.scaleX,\n            scaleY: transformA.scaleY * transformB.scaleY,\n            rotate: transformA.rotate + transformB.rotate,\n            translateBeforeScale: false,\n            rotateLast: false\n        };\n        //TODO: consider translateBeforeScale and rotateLast\n    }\n\n    static convertSizeToPx(size: string|number, fallback = true): number|undefined {\n        const defaultValue = fallback ? 14 : undefined;\n        if(size === undefined) {\n            return defaultValue;\n        }\n        if(typeof size === \"number\") {\n            return size;\n        }\n        if(size.substr(-2) === 'em') {\n            return Math.round(parseFloat(size) * 12);\n        }\n        if(size.substr(-2) === 'px') {\n            return parseInt(size);\n        }\n        if(size.match(/^[0-9]+$/)) {\n            return parseInt(size);\n        }\n        console.warn('size in unsupported format: ', size);\n        return defaultValue;\n    }\n\n    static rgbaCache = {};\n    static colorToRgba(color: string|{r: number, g: number, b: number}|{h: number, s: number, l: number},\n                       opacity: string|number = 1,\n                       defaultColor ='none'): string {\n        if(color === 'none') {\n            return color;\n        }\n        if(!color) {\n            color = defaultColor;\n        }\n        const cacheKey = `${color}-${opacity}`;\n        if(DrawingUtils.rgbaCache[cacheKey]) {\n            return DrawingUtils.rgbaCache[cacheKey];\n        }\n\n        color = DrawingUtils.CssNamedColorToHex(color);\n        if(opacity === 1 && typeof color === 'string') {\n            DrawingUtils.rgbaCache[cacheKey] = color;\n            return color;\n        }\n        let rgba: string;\n        if(typeof color === 'string' && color[0] === '#') {\n            let c; // From https://stackoverflow.com/questions/21646738/convert-hex-to-rgba\n            if(/^#([A-Fa-f0-9]{3}){1,2}$/.test(color)){\n                c = color.substring(1);\n                if(c.length == 3){\n                    c = c[0] + c[0] + c[1] + c[1] + c[2] + c[2];\n                }\n                c = '0x' + c;\n                rgba = 'rgba('+[(c>>16)&255, (c>>8)&255, c&255].join(',')+',' + opacity + ')';\n            } else {\n                throw new Error('Bad Hex');\n            }\n        } else if(typeof color === 'object') {\n            if('r' in color) {\n                rgba = 'rgba(' + color.r + ',' + color.g + ',' + color.b + ',' + opacity + ')';\n            } else if('h' in color) {\n                const rgb = DrawingUtils.hslToRgb(color.h / 360, color.s, color.l);\n                rgba = 'rgba(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ',' + opacity + ')';\n            }\n        } else if(color.substr(0, 4) === 'rgb(') {\n            rgba = color.substr(0, color.length - 1).replace('rgb','rgba') +\n                ', ' + opacity + ')';\n        }\n        DrawingUtils.rgbaCache[cacheKey] = rgba;\n        return rgba;\n    }\n\n    // From https://stackoverflow.com/questions/2353211/hsl-to-rgb-color-conversion\n    static hslToRgb(h, s, l) {\n        var r, g, b;\n\n        if(s == 0){\n            r = g = b = l; // achromatic\n        } else {\n            var hue2rgb = function hue2rgb(p, q, t){\n                if(t < 0) t += 1;\n                if(t > 1) t -= 1;\n                if(t < 1/6) return p + (q - p) * 6 * t;\n                if(t < 1/2) return q;\n                if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;\n                return p;\n            };\n\n            var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n            var p = 2 * l - q;\n            r = hue2rgb(p, q, h + 1/3);\n            g = hue2rgb(p, q, h);\n            b = hue2rgb(p, q, h - 1/3);\n        }\n\n        return {r: Math.round(r * 255), g: Math.round(g * 255), b: Math.round(b * 255)};\n    }\n\n    static CssNamedColorToHex(color: any) {\n        if(typeof color === 'string' && COLOR_HEXES[color.toUpperCase()]) {\n            return COLOR_HEXES[color.toUpperCase()];\n        }\n        return color;\n    }\n\n    /**\n     * Basic implementation to get a sense of specificity. Numbers are completely made up.\n     * Should eventually be more sophisticated, e.g. using https://github.com/keeganstreet/specificity.\n     * @param selector CSS rule as string.\n     */\n    static getCssRuleSpecificityNumber(selector: string) {\n        let specificity = 0;\n\n        selector = selector\n            .replace(/ >/g, '>')\n            .replace(/> /g, '>');\n\n        const parts = [].concat.apply([], selector.split(' ')\n            .map(part => part.split('>')));\n\n        // Rough logic: the more stuff, the more specific. IDs and classes are more specific than other things.\n        for(const part of parts) {\n            specificity += 100;\n            const start = part[0];\n\n            if(start === '#') {\n                specificity += 1000;\n            } else if(start === '.') {\n                // More classes are more specific, but never more specific than an ID.\n                const countClasses = part.split('.').length - 1;\n                specificity += Math.min(900, countClasses * 100);\n            }\n        }\n\n        return specificity;\n    }\n}\n\nconst COLOR_HEXES = {\n    ALICEBLUE: '#F0F8FF',\n    ANTIQUEWHITE: '#FAEBD7',\n    AQUA: '#00FFFF',\n    AQUAMARINE: '#7FFFD4',\n    AZURE: '#F0FFFF',\n    BEIGE: '#F5F5DC',\n    BISQUE: '#FFE4C4',\n    BLACK: '#000000',\n    BLANCHEDALMOND: '#FFEBCD',\n    BLUE: '#0000FF',\n    BLUEVIOLET: '#8A2BE2',\n    BROWN: '#A52A2A',\n    BURLYWOOD: '#DEB887',\n    CADETBLUE: '#5F9EA0',\n    CHARTREUSE: '#7FFF00',\n    CHOCOLATE: '#D2691E',\n    CORAL: '#FF7F50',\n    CORNFLOWERBLUE: '#6495ED',\n    CORNSILK: '#FFF8DC',\n    CRIMSON: '#DC143C',\n    CYAN: '#00FFFF',\n    DARKBLUE: '#00008B',\n    DARKCYAN: '#008B8B',\n    DARKGOLDENROD: '#B8860B',\n    DARKGRAY: '#A9A9A9',\n    DARKGREY: '#A9A9A9',\n    DARKGREEN: '#006400',\n    DARKKHAKI: '#BDB76B',\n    DARKMAGENTA: '#8B008B',\n    DARKOLIVEGREEN: '#556B2F',\n    DARKORANGE: '#FF8C00',\n    DARKORCHID: '#9932CC',\n    DARKRED: '#8B0000',\n    DARKSALMON: '#E9967A',\n    DARKSEAGREEN: '#8FBC8F',\n    DARKSLATEBLUE: '#483D8B',\n    DARKSLATEGRAY: '#2F4F4F',\n    DARKSLATEGREY: '#2F4F4F',\n    DARKTURQUOISE: '#00CED1',\n    DARKVIOLET: '#9400D3',\n    DEEPPINK: '#FF1493',\n    DEEPSKYBLUE: '#00BFFF',\n    DIMGRAY: '#696969',\n    DIMGREY: '#696969',\n    DODGERBLUE: '#1E90FF',\n    FIREBRICK: '#B22222',\n    FLORALWHITE: '#FFFAF0',\n    FORESTGREEN: '#228B22',\n    FUCHSIA: '#FF00FF',\n    GAINSBORO: '#DCDCDC',\n    GHOSTWHITE: '#F8F8FF',\n    GOLD: '#FFD700',\n    GOLDENROD: '#DAA520',\n    GRAY: '#808080',\n    GREY: '#808080',\n    GREEN: '#008000',\n    GREENYELLOW: '#ADFF2F',\n    HONEYDEW: '#F0FFF0',\n    HOTPINK: '#FF69B4',\n    INDIANRED: '#CD5C5C',\n    INDIGO: '#4B0082',\n    IVORY: '#FFFFF0',\n    KHAKI: '#F0E68C',\n    LAVENDER: '#E6E6FA',\n    LAVENDERBLUSH: '#FFF0F5',\n    LAWNGREEN: '#7CFC00',\n    LEMONCHIFFON: '#FFFACD',\n    LIGHTBLUE: '#ADD8E6',\n    LIGHTCORAL: '#F08080',\n    LIGHTCYAN: '#E0FFFF',\n    LIGHTGOLDENRODYELLOW: '#FAFAD2',\n    LIGHTGRAY: '#D3D3D3',\n    LIGHTGREY: '#D3D3D3',\n    LIGHTGREEN: '#90EE90',\n    LIGHTPINK: '#FFB6C1',\n    LIGHTSALMON: '#FFA07A',\n    LIGHTSEAGREEN: '#20B2AA',\n    LIGHTSKYBLUE: '#87CEFA',\n    LIGHTSLATEGRAY: '#778899',\n    LIGHTSLATEGREY: '#778899',\n    LIGHTSTEELBLUE: '#B0C4DE',\n    LIGHTYELLOW: '#FFFFE0',\n    LIME: '#00FF00',\n    LIMEGREEN: '#32CD32',\n    LINEN: '#FAF0E6',\n    MAGENTA: '#FF00FF',\n    MAROON: '#800000',\n    MEDIUMAQUAMARINE: '#66CDAA',\n    MEDIUMBLUE: '#0000CD',\n    MEDIUMORCHID: '#BA55D3',\n    MEDIUMPURPLE: '#9370DB',\n    MEDIUMSEAGREEN: '#3CB371',\n    MEDIUMSLATEBLUE: '#7B68EE',\n    MEDIUMSPRINGGREEN: '#00FA9A',\n    MEDIUMTURQUOISE: '#48D1CC',\n    MEDIUMVIOLETRED: '#C71585',\n    MIDNIGHTBLUE: '#191970',\n    MINTCREAM: '#F5FFFA',\n    MISTYROSE: '#FFE4E1',\n    MOCCASIN: '#FFE4B5',\n    NAVAJOWHITE: '#FFDEAD',\n    NAVY: '#000080',\n    OLDLACE: '#FDF5E6',\n    OLIVE: '#808000',\n    OLIVEDRAB: '#6B8E23',\n    ORANGE: '#FFA500',\n    ORANGERED: '#FF4500',\n    ORCHID: '#DA70D6',\n    PALEGOLDENROD: '#EEE8AA',\n    PALEGREEN: '#98FB98',\n    PALETURQUOISE: '#AFEEEE',\n    PALEVIOLETRED: '#DB7093',\n    PAPAYAWHIP: '#FFEFD5',\n    PEACHPUFF: '#FFDAB9',\n    PERU: '#CD853F',\n    PINK: '#FFC0CB',\n    PLUM: '#DDA0DD',\n    POWDERBLUE: '#B0E0E6',\n    PURPLE: '#800080',\n    REBECCAPURPLE: '#663399',\n    RED: '#FF0000',\n    ROSYBROWN: '#BC8F8F',\n    ROYALBLUE: '#4169E1',\n    SADDLEBROWN: '#8B4513',\n    SALMON: '#FA8072',\n    SANDYBROWN: '#F4A460',\n    SEAGREEN: '#2E8B57',\n    SEASHELL: '#FFF5EE',\n    SIENNA: '#A0522D',\n    SILVER: '#C0C0C0',\n    SKYBLUE: '#87CEEB',\n    SLATEBLUE: '#6A5ACD',\n    SLATEGRAY: '#708090',\n    SLATEGREY: '#708090',\n    SNOW: '#FFFAFA',\n    SPRINGGREEN: '#00FF7F',\n    STEELBLUE: '#4682B4',\n    TAN: '#D2B48C',\n    TEAL: '#008080',\n    THISTLE: '#D8BFD8',\n    TOMATO: '#FF6347',\n    TURQUOISE: '#40E0D0',\n    VIOLET: '#EE82EE',\n    WHEAT: '#F5DEB3',\n    WHITE: '#FFFFFF',\n    WHITESMOKE: '#F5F5F5',\n    YELLOW: '#FFFF00',\n    YELLOWGREEN: '#9ACD32'\n};\n\n","import SSVG from \"./ssvg\";\n\nexport = SSVG;","import {VdomManager} from \"../util/vdom/vdom-manager\";\nimport {VdomNode} from \"../util/vdom/vdom\";\nimport {CanvasWorkerMessage, CanvasUpdateWorkerMessage, CanvasUpdateData} from \"../util/canvas-worker-message\"\nimport Domhandler, {SsvgElement} from \"./domhandler\";\nimport CanvasWorker from \"../canvasworker/canvasworker\";\nimport Canvasrenderer from \"../canvasworker/canvasrenderer\";\nimport DrawingUtils from \"../canvasworker/drawingUtils\";\nimport CanvasWorkerImporter from '../canvasworker';\n\nexport default class SSVG {\n    private unassignedNodes: Node[] = [];\n    private worker: Worker;\n    private domHandler: Domhandler;\n    private vdom: VdomManager;\n    private interactionSelections: SsvgElement[] = [];\n    \n    private renderer: CanvasWorker;\n\n    private svg: (SVGElement & SsvgElement)|undefined;\n    private readonly canvas: HTMLCanvasElement;\n    private svgAssignedAndSizeSet = false;\n    \n    private lastCanvasDrawTimes: number[] = [];\n    \n    private enterExitQueue: CanvasUpdateData[] = [];\n\n    private readonly safeMode: boolean = false;\n    private readonly maxPixelRatio: number|undefined;\n    private readonly useWorker: boolean = true;\n    private readonly getFps: (fps: number) => void = () => {};\n\n    private hoveredElement: Element|undefined;\n    private animationFrame?: number;\n\n    constructor(options?: {\n        safeMode?: boolean,\n        maxPixelRatio?: number,\n        useWorker?: boolean,\n        getFps?: (fps: number) => void,\n        svg?: SVGElement & SsvgElement,\n    }) {\n        if(options) {\n            if(options.safeMode !== undefined) {\n                this.safeMode = options.safeMode;\n            }\n            this.maxPixelRatio = options.maxPixelRatio;\n            if(options.useWorker !== undefined) {\n                this.useWorker = options.useWorker;\n            }\n            if(options.getFps !== undefined) {\n                this.getFps = options.getFps;\n            }\n        }\n\n        this.canvas = document.createElement('canvas');\n        if(!('OffscreenCanvas' in window)) {\n            this.useWorker = false;\n        }\n\n        if(this.useWorker) {\n            this.worker = new CanvasWorkerImporter();\n    \n            this.worker.onmessage = e => {\n                if(e.data && e.data.msg && e.data.msg === 'DRAWN') {\n                    this.logDrawn();\n                    this.updateCanvas();\n                }\n            };\n            const raf = () => {\n                this.updateFps();\n                requestAnimationFrame(raf);\n            };\n            raf();\n        } else {\n            const raf = () => {\n                this.updateFps();\n                this.logDrawn();\n                this.updateCanvas();\n                requestAnimationFrame(raf);\n            };\n            raf();\n        }\n\n        this.captureD3On();\n        const svg = options && options.svg ? options.svg : undefined;\n        this.setupElementsIfSvgExists(svg);\n        \n        this.canvas.addEventListener('mousedown', e => this.propagateMouseEvent(e));\n        this.canvas.addEventListener('touchstart', e => this.propagateTouchEvent(e));\n        this.canvas.addEventListener('mousemove', e => {\n            const lastHovered = this.hoveredElement;\n            this.hoveredElement = this.propagateMouseEvent(e);\n            if(lastHovered !== this.hoveredElement) {\n                if(lastHovered) {\n                    lastHovered.dispatchEvent(new MouseEvent('mouseout', e));\n                }\n            }\n            this.propagateMouseEvent(e, 'mouseover');\n        });\n        this.canvas.addEventListener('touchmove', e => {\n            const lastHovered = this.hoveredElement;\n            this.hoveredElement = this.propagateTouchEvent(e);\n            if(lastHovered !== this.hoveredElement) {\n                if(lastHovered) {\n                    lastHovered.dispatchEvent(this.duplicateTouchEvent(e, 'mouseout'));\n                }\n            }\n            this.propagateTouchEvent(e, 'mouseover');\n        });\n        this.canvas.addEventListener('mouseup', e => this.propagateMouseEvent(e));\n        this.canvas.addEventListener('touchend', e => this.propagateTouchEvent(e));\n        this.canvas.addEventListener('click', e => this.propagateMouseEvent(e));\n        this.canvas.addEventListener('wheel', e => this.propagateWheelEvent(e));\n\n        this.replaceNativeRemoveChild();\n        this.replaceNativeAttribute();\n        this.replaceNativePathFunctions();\n        this.replaceNativeCreateElement();\n        this.replaceNativeAppendChild();\n        this.replaceD3Attr();\n        this.replaceNativeSelect();\n        this.replaceNativeGetComputedStyle();\n        this.replaceD3Select();\n        this.replaceD3Remove();\n\n        setTimeout(() => {\n            console.log(this.vdom.data);\n        }, 1000);\n    }\n    \n    private setupElementsIfSvgExists(svgEl?: SVGElement & SsvgElement) {\n        if(this.svg) {\n            return true;\n        }\n\n        const svg = !svgEl ? document.getElementsByTagName('svg')[0] : svgEl;\n        \n        if(!svg) {\n            return false;\n        }\n\n        const urlConnector = document.location.href.indexOf('?') === -1 ? '?' : '&';\n        const svgSwitchUrl = document.location.href + urlConnector + 'svg';\n        const svgSwitchComment = document.createComment(' This project uses SSVG.io to render a SVG as Canvas.\\r\\n' +\n            'To inspect the SVG, please open the following URL:\\r\\n' +\n            svgSwitchUrl + '\\r\\n');\n        \n        this.svg = svg as SVGElement & SsvgElement;\n        const parent = this.svg.parentElement;\n\n        if(this.svg.nextSibling) {\n            const next = this.svg.nextSibling;\n            parent.insertBefore(svgSwitchComment, next);\n            parent.insertBefore(this.canvas, next);\n        } else {\n            parent.appendChild(svgSwitchComment);\n            parent.appendChild(this.canvas);\n        }\n\n        this.domHandler = new Domhandler(this.svg, this.useWorker, this.useWorker);\n        this.vdom = this.domHandler.getVDom();\n\n        this.setCanvasSize();\n        \n        return true;\n    }\n\n    private updateCanvas() {\n        if(!this.svgAssignedAndSizeSet) {\n            return;\n        }\n\n        if(!this.vdom.hasChanges()) {\n            requestAnimationFrame(() => this.updateCanvas());\n            return;\n        }\n\n        const nodeUpdated = this.useWorker ? undefined : (node, attr) =>\n            this.renderer.nodeUpdated(node, attr);\n        this.domHandler.applyStyles();\n\n        const queue = this.vdom.getQueue();\n        this.vdom.clearQueue();\n        this.vdom.updatePropertiesFromQueue(queue, nodeUpdated);\n\n        if(this.useWorker) {\n            this.sendUpdateToWorker(queue);\n        } else {\n            if(this.renderer.updatePropertiesFromQueue) {\n                this.renderer.updatePropertiesFromQueue(queue);\n            }\n            this.renderer.draw();\n        }\n    }\n    \n    private setCanvasSize() {\n        if(!this.svg || !this.vdom.data.width || !this.vdom.data.height) {\n            return;\n        }\n        this.vdom.data.scale = window.devicePixelRatio;\n        if(this.maxPixelRatio !== undefined && this.vdom.data.scale > this.maxPixelRatio) {\n            this.vdom.data.scale = this.maxPixelRatio;\n        }\n    \n        this.canvas.style.width = this.vdom.data.width + 'px';\n        this.canvas.style.height = this.vdom.data.height + 'px';\n        this.canvas.width = this.vdom.data.width * this.vdom.data.scale;\n        this.canvas.height = this.vdom.data.height * this.vdom.data.scale;\n        \n        if(this.useWorker) {\n            const offscreen = (this.canvas as any).transferControlToOffscreen();\n            this.sendToWorker({cmd: 'INIT', data: {\n                    canvas: offscreen,\n                    visData: this.vdom.data,\n                    safeMode: this.safeMode\n                }\n            }, [offscreen]);\n            this.vdom.ensureNodesMapped();\n        } else {\n            this.renderer = new Canvasrenderer(this.vdom, this.canvas, this.safeMode, () => {});\n        }\n        \n        this.svgAssignedAndSizeSet = true;\n    }\n\n    private isWithinSvg(element: Element) {\n        let isWithinSvg = false;\n        let parentEl = element;\n\n        while(parentEl && parentEl.parentNode) {\n            if(parentEl === this.svg) {\n                isWithinSvg = true;\n            }\n            parentEl = <Element> parentEl.parentNode;\n        }\n        return isWithinSvg;\n    }\n    \n    private captureD3On() {\n        if((window as any)['d3']) {\n            const d3 = (window as any)['d3'];\n            const originalOn = d3.selection.prototype.on;\n            const me = this;\n\n            d3.selection.prototype.on = function()\n            {\n                let el = this._parents && this._parents.length ? this._parents[0] : this[0].parentNode;\n                if(el === document.children[0]) {\n                    el = me.svg;\n                }\n                let isWithinSvg = me.isWithinSvg(el);\n\n                if(el && isWithinSvg && me.interactionSelections.indexOf(el) === -1)\n                {\n                    me.interactionSelections.push(el); // This one works for native get/setAttribute\n                    //interactionSelections.push(this); // This one works for d3 .attr.\n                }\n        \n                return originalOn.apply(this, arguments);\n            };\n        }\n    }\n    \n    private replaceD3Select() {\n        if((window as any)['d3']) {\n            const me = this;\n            const d3 = (window as any)['d3'];\n\n            const getReplacement = (original) => {\n                return function(selector: string|(()=>{})) {\n                    if(typeof selector === 'string') {\n                        if(selector === 'body') {\n                            return original.apply(this, arguments);\n                        }\n                        let elements: SsvgElement[];\n                        if(this === d3) {\n                            elements = [me.svg];\n                        } else {\n                            elements = this._groups ? this._groups[0] : this[0];\n                        }\n\n                        if(!elements.filter(e => e).length) {\n                            safeLog('element not found within svg, using normal execution', this, selector);\n                            return original.apply(this, arguments);\n                        }\n\n                        let childElements: SsvgElement[] = [];\n\n                        for(let i = 0; i < elements.length; i++) {\n                            const element = elements[i];\n                            const node = me.domHandler.getVisNode(element);\n\n                            if(!node) {\n                                console.warn('node not found', element);\n                                return original.apply(this, arguments);\n                            }\n\n                            const childNodes = me.vdom.getVisNodesFromSelector(node, selector);\n                            childElements = childElements.concat(childNodes.map(node => {\n                                return me.domHandler.getElementFromNode(node);\n                            }));\n                        }\n\n                        const returnValue = original.apply(this, arguments);\n                        const elementsOutsideSvg: NodeList = returnValue._groups ? returnValue._groups[0]\n                            : returnValue[0];\n                        elementsOutsideSvg.forEach(childNode => {\n                            const childEl = <SsvgElement> <any> childNode;\n                            if(childElements.indexOf(childEl) === -1) {\n                                childElements.push();\n                            }\n                        });\n\n                        if(returnValue._groups) {\n                            returnValue._groups[0] = childElements;\n                        } else {\n                            // Older d3 versions\n                            const parentNode = returnValue[0].parentNode;\n                            returnValue[0] = childElements;\n                            returnValue[0].parentNode = parentNode;\n                        }\n\n                        return returnValue;\n                    }\n\n                    return original.apply(this, arguments);\n                }\n            };\n\n            d3.selection.prototype.selectAll = getReplacement(d3.selection.prototype.selectAll);\n            d3.selectAll = getReplacement(d3.selectAll);\n            d3.selection.prototype.select = getReplacement(d3.selection.prototype.select);\n            d3.select = getReplacement(d3.select);\n\n            const origFilter = d3.selection.prototype.filter;\n            d3.selection.prototype.filter = function(selectorString: string) {\n                const elements = this._groups ? this._groups[0] : this[0];\n                if(typeof selectorString !== 'string') {\n                    return origFilter.apply(this, arguments);\n                }\n                let firstElement = elements[0];\n                let i = 1;\n                while(!firstElement && i < elements.length) {\n                    i++;\n                    firstElement = elements[i];\n                }\n\n                const parentNode = firstElement ? me.domHandler.getNodeFromElement(firstElement.parentNode) : null;\n                const nodes = elements.map(element => me.domHandler.getNodeFromElement(element));\n\n                const selectors = selectorString.split(',').map(sel => sel.trim());\n                const filteredNodes = [];\n\n                for(const selector of selectors) {\n                    const matchingNodes = me.vdom.filterNodesBySelector(parentNode, nodes, selector);\n\n                    for(const node of matchingNodes) {\n                        if(filteredNodes.indexOf(node) === -1) {\n                            filteredNodes.push(node);\n                        }\n                    }\n                }\n\n                const filteredElements = filteredNodes.map(node => me.domHandler.getElementFromNode(node));\n\n                const returnValue = origFilter.apply(this, arguments);\n\n                if(returnValue._groups) {\n                    returnValue._groups[0] = filteredElements;\n                } else {\n                    // Older d3 versions\n                    const parentNode = returnValue[0].parentNode;\n                    returnValue[0] = filteredElements;\n                    returnValue[0].parentNode = parentNode;\n                }\n                return returnValue;\n            }\n        }\n    }\n\n    private replaceNativeGetComputedStyle() {\n        const origGetComputedStyle = window.getComputedStyle;\n        const me = this;\n\n        window.getComputedStyle = function(element: SsvgElement) {\n            if(element && !me.isWithinSvg(element) && (<Window> <any> element) !== window) {\n                return origGetComputedStyle.call(this, element);\n            }\n\n            const node = me.domHandler.getNodeFromElement(element);\n            if(!node) {\n                console.warn('node not found for ', this, element);\n                return origGetComputedStyle.call(this, element);\n            }\n            return {\n                getPropertyValue(propertyName: string): string {\n                    //console.log(propertyName, node, node.style[propertyName]);\n                    return node.style[propertyName];\n                }\n            } as CSSStyleDeclaration;\n        };\n    }\n\n    private replaceNativeSelect() {\n        const origQuerySelector = Element.prototype.querySelector;\n        const me = this;\n\n        Element.prototype.querySelector = function(this: SsvgElement, selector: string) {\n            if(!me.isWithinSvg(this)) {\n                return origQuerySelector.apply(this, arguments);\n            }\n\n            const node = me.domHandler.getVisNode(this);\n            const childNodes = me.vdom.getVisNodesFromSelector(node, selector);\n            if(childNodes.length === 0) {\n                console.warn('could not find selection', this, node, node.globalElementIndex, selector);\n                return null;\n            }\n            return me.domHandler.getElementFromNode(childNodes[0]);\n        };\n    }\n\n    private replaceD3Attr() {\n\n        const me = this;\n\n        function getReplacement(originalFct, prefix = '') {\n            return function(name, value) {\n                \n                if(value === undefined) {\n\n                    if(me.unassignedNodes.indexOf(this) !== -1) {\n                        return originalFct.apply(this, arguments);\n                    } else {\n                        // Dealing with d3 v3.\n                        const els = this._groups ? this._groups[0] : this[0];\n                        if(els[0] && !me.isWithinSvg(els[0])) {\n                            return originalFct.apply(this, arguments);\n                        }\n                        if(els.length > 1) {\n                            const returnVal = [];\n                            for(const el of els) {\n                                returnVal.push(me.domHandler.getAttributeFromSelector(el, name))\n                            }\n                            return returnVal;\n                        } else {\n                            return me.domHandler.getAttributeFromSelector(els[0], name);\n                        }\n                    }\n                } else {\n                    if(name === 'class' || !me.svg) {\n                        return originalFct.apply(this, arguments);\n                    }\n                    // For d3 v4, this would just be this.groups[0]. The rest is for\n                    // earlier versions, where selectAll() returned other values.\n                    let elements = this._groups ? this._groups[0] : this[0];\n\n                    if(typeof elements === 'object' && Object.keys(elements).length === 1 && elements.parentNode) {\n                        const parentElement = elements.parentNode;\n                        let parentNode: VdomNode;\n                        if(parentElement !== document.children[0]) {\n                            parentNode = me.domHandler.getVisNode(parentElement);\n                        } else {\n                            parentNode = me.vdom.data;\n                        }\n\n                        elements = [];\n                        for(const child of parentNode.children) {\n                            elements.push(me.domHandler.getElementFromNode(child));\n                        }\n                    }\n                    if(!elements) {\n                        return originalFct.apply(this, arguments);\n                    }\n                    const filteredElements = [];\n                    try {\n                        for (const element of elements) {\n                            if (element) {\n                                filteredElements.push(element);\n                            }\n                        }\n                    } catch(e) {\n                        console.error(elements, this);\n                        console.error(e);\n                    }\n                    if(filteredElements.length === 1) {\n                        const element = filteredElements[0];\n                        if(!element) {\n                            console.warn('element not found', this, name, value);\n                            return this;\n                        }\n                        if(!me.isWithinSvg(element)) {\n                            return originalFct.apply(this, arguments);\n                        }\n                        me.domHandler.queueSetAttributeOnElement(element, prefix + name, value);\n                    } else {\n                        if(!me.isWithinSvg(elements[0])) {\n                            return originalFct.apply(this, arguments);\n                        }\n                        me.domHandler.queueSetAttributeOnSelection(filteredElements, prefix + name, value);\n                    }\n                    \n                    if(filteredElements[0] === me.svg && (name === 'width' || name === 'height')) {\n                        me.vdom.data[name] = parseInt(value);\n                        me.setCanvasSize();\n                    }\n                \n                    return this;\n                }\n            };\n        }\n    \n        if((window as any)['d3']) {\n            const d3 = (window as any)['d3'];\n\n            const origSelectionAttr = d3.selection.prototype.attr;\n            d3.selection.prototype.attr = getReplacement(origSelectionAttr);\n\n            const origSelectionStyle = d3.selection.prototype.style;\n            d3.selection.prototype.style = getReplacement(origSelectionStyle, 'style;');\n\n            const originalClassed = d3.selection.prototype.classed;\n            d3.selection.prototype.classed = function(className: string,\n                                                      value?: boolean|((data: any, index: number) => boolean)) {\n                if(value !== undefined) {\n                    me.domHandler.enableFrontendDesignProperties();\n                    let elements = this._groups ? this._groups[0] : this[0];\n                    let i = -1;\n                    for(let element of elements) {\n                        i++;\n                        if(element) {\n                            const node = me.domHandler.getNodeFromElement(element);\n                            if(!node) {\n                                console.warn('node not found', element);\n                                continue;\n                            }\n                            const prevClassNames = node.className || '';\n                            const evaluatedValue = typeof value === \"function\" ? value(element.__data__, i) : value;\n                            if(evaluatedValue === true) {\n                                if(prevClassNames.indexOf(className) === -1) {\n                                    let newClassNames = (prevClassNames + ' ' + className).trim();\n\n                                    me.domHandler.queueSetAttributeOnElement(element, 'class', newClassNames);\n                                }\n                            } else if(evaluatedValue === false) {\n                                const containedPreviously = prevClassNames.indexOf(className) !== -1;\n                                if(containedPreviously) {\n                                    const newClassNames = prevClassNames.replace(className, '').replace('  ', ' ');\n                                    me.domHandler.queueSetAttributeOnElement(element, 'class', newClassNames);\n\n                                    if(!node['removedClasses']) {\n                                        node['removedClasses'] = [];\n                                    }\n                                    node['removedClasses'].push(className); // For removing associated styles.\n                                }\n                            }\n                        }\n\n                    }\n                }\n                return originalClassed.apply(this, arguments);\n            };\n\n            const originalTransition = d3.selection.prototype.transition;\n            d3.selection.prototype.transition = function() {\n                me.domHandler.enableFrontendDesignProperties();\n                return originalTransition.apply(this, arguments);\n            };\n\n            const originalText = d3.selection.prototype.text;\n            d3.selection.prototype.text = function(value?: (number|string|((el: HTMLElement) => (number|string)))) {\n                if(value !== undefined) {\n                    let elements = this._groups ? this._groups[0] : this[0];\n                    let i = 0;\n                    for(let element of elements) {\n                        if(element && me.isWithinSvg(element)) {\n                            me.domHandler.queueSetAttributeOnElement(element, 'text', value);\n                        }\n\n                        i++;\n                    }\n                }\n                return originalText.apply(this, arguments);\n            };\n        }\n    }\n\n    private replaceD3Remove() {\n        if(window['d3']) {\n            const d3 = window['d3'];\n            const me = this;\n\n            const newRemove = this.getNewRemoveChild(() => {}, true);\n            const d3Remove = function() {\n                let elements = this._groups ? this._groups[0] : this[0];\n\n                if(elements.length) {\n                    let parentElement: SsvgElement = null;\n                    for(let i = elements.length - 1; i > -1; i--) {\n                        const element = elements[i];\n                        if(element) {\n                            parentElement = element.parentNode;\n                            if(!parentElement) {\n                                console.error('element has no parent node', element);\n                            }\n                            newRemove.call(parentElement, element);\n                        }\n                    }\n                }\n                return this;\n            };\n            d3.selection.prototype.remove = d3Remove;\n            //d3.transition.prototype.remove = d3Remove;\n        }\n    }\n    \n    private replaceNativeCreateElement() {\n        const origCreate = document.createElementNS;\n        const me = this;\n        \n        document.createElementNS = function() {\n            let newArgs = Array.from(arguments);\n            const el = origCreate.apply(this, newArgs);\n            \n            /*el.appendChild = () => {\n                console.log('hi!!', el, arguments);\n                //return el;\n            };*/\n    \n            el.appendChild = me.getNewAppendChild(el.appendChild);\n            \n            me.unassignedNodes.push(el);\n    \n            //console.log(me.unassignedNodes);\n            \n            return el;\n        }\n    }\n\n    private getNewRemoveChild(origRemoveChild: ((<T extends Node>(oldChild: T) => T)|(() => void)),\n        skipUpdateSelectors = false) {\n        const me = this;\n\n        return function<T extends Node>(this: SsvgElement, el: T & SsvgElement) {\n            if(!this) {\n                console.error('context not defined');\n                return el;\n            }\n            if(!me.isWithinSvg(el)) {\n                return origRemoveChild.apply(this, arguments);\n            }\n            const parentNode = me.domHandler.getNodeFromElement(this);\n            const node = me.domHandler.getNodeFromElement(el);\n\n            if(!node) {\n                console.error('node not found', node, el, this, parentNode);\n                return origRemoveChild.apply(this, arguments);\n            }\n\n            // Remove all child elements.\n            /*for(const childNode of node.children) {\n                const childEl = me.domHandler.getElementFromNode(childNode);\n                el.removeChild(childEl);\n            }*/\n\n            // Remove from current parent first.\n            Object.defineProperty(el, 'parentNode', {\n                writable: true,\n                value: undefined\n            });\n\n            //console.log('remove')\n            me.enterExitQueue.push({\n                cmd: 'EXIT',\n                childGlobalIndex: el.globalElementIndex,\n                parentGlobalIndex: parentNode.globalElementIndex\n            });\n\n            me.domHandler.removeNodeFromParent(el, node, parentNode);\n\n            // Fix child indices of all children.\n            if(!skipUpdateSelectors) {\n                if(!parentNode) {\n                    console.error('parent not found', parentNode, this, el);\n                }\n            }\n\n            delete el['selector'];\n\n            return el;\n        };\n    }\n\n    private replaceNativeRemoveChild() {\n        Element.prototype.removeChild = this.getNewRemoveChild(Element.prototype.removeChild);\n    }\n    \n    private getNewAppendChild(origAppend) {\n        const me = this;\n        \n        return function<T extends Node>(this: SsvgElement, el: T & SsvgElement) {\n            if(!me.svgAssignedAndSizeSet) {\n                if(!me.svg && el['tagName'] === 'svg') {\n                    const appended = origAppend.apply(this, arguments);\n                    me.setupElementsIfSvgExists(<SVGElement & SsvgElement> <any> el);\n                    return appended;\n                    \n                } else {\n                    return origAppend.apply(this, arguments);\n                }\n            }\n            \n            if(!me.isWithinSvg(this)) {\n                return origAppend.apply(this, arguments);\n            }\n\n            Object.defineProperty(el, 'ownerSVGElement', {\n                writable: true,\n                value: me.svg\n            });\n            el['appendChild'] = <T extends Node>(el2: T) => {\n                return me.getNewAppendChild(origAppend).call(el, el2);\n            };\n\n            const parentNode = me.domHandler.getNodeFromElement(this);\n            if(!parentNode) {\n                return console.error('parent node not found', this);\n            }\n            let node: VdomNode;\n            let keepChildren = false;\n\n            if(el['parentSelector']) {\n                node = me.domHandler.getVisNode(el);\n\n                me.getNewRemoveChild(() => {}).call(this, el);\n                keepChildren = true; // If the element is being moved around, keep children.\n            } else {\n                node = me.domHandler.getNodeDataFromEl(el);\n            }\n\n            Object.defineProperty(el, 'style', {\n                writable: true,\n                value: {\n                    setProperty: function(styleProp: string, value: string) {\n                        me.domHandler.queueSetAttributeOnElement(el, 'style;' + styleProp, value);\n                    },\n                    getPropertyValue: function(styleProp) {\n                        me.domHandler.enableFrontendDesignProperties();\n                        return node.style[styleProp];\n                    },\n                    removeProperty: function() {\n                        console.log('remove property not yet implemented.');\n                        //TODO implement removeProperty CSS function.\n                    }\n                }\n            });\n\n            Object.defineProperty(el, 'parentNode', {\n                writable: true,\n                value: this\n            });\n    \n            me.domHandler.linkNodeToElement(node, el);\n            me.vdom.addNodeToParent(node, parentNode.globalElementIndex);\n            me.domHandler.restyleNode(node);\n\n            if(me.useWorker) {\n                me.enterExitQueue.push({\n                    cmd: 'ENTER',\n                    node: node,\n                    parentGlobalIndex: parentNode.globalElementIndex,\n                    keepChildren: keepChildren\n                });\n            } else {\n                if(me.renderer.addNode) {\n                    me.renderer.addNode(node);\n                }\n            }\n    \n            if(me.unassignedNodes.indexOf(el) !== -1) {\n                const index = me.unassignedNodes.indexOf(el);\n                me.unassignedNodes.splice(index, 1);\n            }\n    \n            return el;\n        };\n    }\n    \n    private replaceNativeAppendChild() {\n        const origAppendChild = Element.prototype.appendChild;\n        const newAppend = this.getNewAppendChild(origAppendChild);\n    \n        Element.prototype.appendChild = newAppend;\n        Element.prototype.insertBefore = function<T extends Node>(newChild: T, refChild: Node|null) {\n    \n            newAppend.call(this, newChild);\n            \n            return newChild;\n        };\n    }\n\n    private replaceNativePathFunctions() {\n        const me = this;\n        //const origGetPointAtLength = SVGPathElement.prototype.getPointAtLength;\n        const origGetTotalLength = SVGPathElement.prototype.getTotalLength;\n\n        /*SVGPathElement.prototype.getPointAtLength = function() {\n            if(me.isWithinSvg(this)) {\n                const d = this.getAttribute('d');\n                me.origSetAttribute.call(this, 'd', d);\n            }\n            return origGetPointAtLength.apply(this, arguments);\n        };*/\n        SVGPathElement.prototype.getTotalLength = function() {\n            if(me.isWithinSvg(this)) {\n                const d = this.getAttribute('d');\n                me.origSetAttribute.call(this, 'd', d);\n            }\n\n            return origGetTotalLength.apply(this, arguments);\n        };\n    }\n\n    private origSetAttribute;\n\n    private replaceNativeAttribute() {\n        const origSetAttr = Element.prototype.setAttribute;\n        this.origSetAttribute = origSetAttr;\n        const origSetAttrNS = Element.prototype.setAttributeNS;\n        const origGetAttr = Element.prototype.getAttribute;\n        const me = this;\n    \n        Element.prototype.setAttribute = function(this: SsvgElement, name: string, value: any) {\n            if(name === 'easypz' || me.unassignedNodes.indexOf(this) !== -1) {\n                // Update the original SVG\n                origSetAttr.apply(this, arguments);\n                return;\n            }\n            if(name === 'class') {\n                origSetAttr.apply(this, arguments);\n            }\n            if(!me.isWithinSvg(this)) {\n                return origSetAttr.apply(this, arguments);\n            }\n            me.domHandler.queueSetAttributeOnElement(this, name, value);\n        };\n        //TODO: Figure out how to access the element when setting a style property.\n        /*CSSStyleDeclaration.prototype.setProperty = function(name: string, value: any) {\n            safeLog(this, arguments);\n            me.elementHandler.queueSetAttributeOnElement(this, 'style;' + name, value);\n        };*/\n        Element.prototype.setAttributeNS = function(this: SsvgElement, name: string, value: any) {\n            if(name === 'easypz' || me.unassignedNodes.indexOf(this) !== -1) {\n                // Update the original SVG\n                origSetAttrNS.apply(this, arguments);\n                return;\n            }\n            if(name === 'class') {\n                origSetAttrNS.apply(this, arguments);\n            }\n            if(!me.isWithinSvg(this)) {\n                return origSetAttrNS.apply(this, arguments);\n            }\n            me.domHandler.queueSetAttributeOnElement(this, name, value);\n        };\n    \n        Element.prototype.getAttribute = function(this: SsvgElement, name) {\n            if(me.unassignedNodes.indexOf(this) !== -1) {\n                return origGetAttr.apply(this, arguments);\n            } else {\n                try {\n                    return me.domHandler.getAttributeFromSelector(this, name);\n                } catch(e) {\n                    console.error(e);\n                    return origGetAttr.apply(this, arguments);\n                }\n            }\n        };\n    }\n    \n    private propagateMouseEvent(evt: MouseEvent, type?: string) {\n        return this.propagateEvent(new MouseEvent(type? type : evt.type, evt));\n    }\n\n    private duplicateTouchEvent(evt: TouchEvent, type?: string) {\n        const e = document.createEvent('TouchEvent');\n        if(!type) {\n            type = evt.type;\n        }\n        e.initEvent(type, true, false);\n        for(const prop in evt) {\n            if(prop !== 'isTrusted' && evt.hasOwnProperty(prop)) {\n                Object.defineProperty(e, prop, {\n                    writable: true,\n                    value: evt[prop],\n                });\n            }\n        }\n        Object.defineProperty(e, 'type', {\n            writable: true,\n            value: type,\n        });\n        const touches = [];\n        for(let i = 0; i < evt.touches.length; i++) {\n            const touch = evt.touches[i];\n            touches.push({identifier: touch.identifier, pageX: touch.pageX, pageY: touch.pageY,\n                clientX: touch.clientX, clientY: touch.clientY});\n        }\n        Object.defineProperty(e, 'touches', {\n            writable: true,\n            value: touches,\n        });\n        return e;\n    }\n\n    private propagateTouchEvent(evt: TouchEvent, type?: string) {\n        return this.propagateEvent(this.duplicateTouchEvent(evt, type));\n    }\n    \n    private propagateWheelEvent(evt: WheelEvent) {\n        return this.propagateEvent(new WheelEvent(evt.type, evt));\n    }\n    \n    private propagateEvent(new_event: MouseEvent|TouchEvent|WheelEvent): undefined|Element {\n        this.svg.dispatchEvent(new_event); // for EasyPZ\n\n        let triggeredElement: undefined|Element;\n        const {x, y} = SSVG.getMousePosition(new_event);\n\n        for(let interactionSel of this.interactionSelections)\n        {\n            let parentNode = this.domHandler.getVisNode(interactionSel)\n            \n            //let matchingVisParent = selectedNodes[i];\n            let j = 1;\n            \n            if(!parentNode) {\n                //console.error(interactionSel, parentSelector, parentNode);\n            } else {\n                for(let vdomNode of parentNode.children)\n                {\n                    let childNode = this.nodeAtPosition(vdomNode, x - 10, y - 10);\n\n                    if(childNode)\n                    {\n                        const svgEl = this.domHandler.getElementFromNode(vdomNode);\n                        const svgChildEl = this.domHandler.getElementFromNode(childNode);\n\n                        if(svgChildEl) {\n                            Object.defineProperty(new_event, 'target', {\n                                writable: true,\n                                value: svgChildEl\n                            });\n                        }\n\n                        if(svgChildEl) {\n                            triggeredElement = svgChildEl;\n                            svgChildEl.dispatchEvent(new_event);\n                        }\n\n                        if(svgEl !== svgChildEl) {\n                            if(!triggeredElement) {\n                                triggeredElement = svgEl;\n                            }\n                            svgEl.dispatchEvent(new_event);\n                        }\n                    }\n                    j++;\n                }\n            }\n        }\n        return triggeredElement;\n    }\n\n    //TODO move this function somewhere else.\n    private static getMousePosition(event: MouseEvent|TouchEvent) : {x: number, y: number}|null\n    {\n        let pos = {x: 0, y: 0};\n\n        const mouseEvents = ['wheel', 'click', 'mousemove', 'mousedown', 'mouseup', 'dblclick', 'contextmenu',\n            'mouseenter', 'mouseleave', 'mouseout', 'mouseover'];\n        if(mouseEvents.indexOf(event.type) !== -1 && event['clientX']) {\n            pos = {x: event['clientX'], y: event['clientY']};\n        } else if(event.type.substr(0,5) === 'touch') {\n            const touches = event['touches'] ? event['touches'] : [];\n            if(touches.length < 1) return null;\n            pos = {x: touches[0].clientX, y: touches[0].clientY};\n        } else {\n            safeErrorLog('no event pos for event type ', event);\n        }\n\n        return pos;\n    }\n    \n    private nodeAtPosition(visNode: VdomNode, x: number, y: number): false|VdomNode {\n        if (visNode.type === 'circle') {\n            let cx = this.vdom.get(visNode, 'cx') || 0;\n            let cy = this.vdom.get(visNode, 'cy') || 0;\n            if (visNode.transform) {\n                const transform = DrawingUtils.parseTransform(visNode.transform);\n                if (transform.translateX) {\n                    cx += transform.translateX;\n                }\n                if (transform.translateY) {\n                    cy += transform.translateY;\n                }\n            }\n            const distance = Math.sqrt(Math.pow(cx - x, 2) + Math.pow(cy - y, 2));\n            return distance < visNode.r ? visNode : false;\n        } else if(visNode.type === 'rect' || visNode.type === 'image') {\n\n            let elX = this.vdom.get(visNode, 'x') || 0;\n            let elY = this.vdom.get(visNode, 'y') || 0;\n            const width = visNode.width;\n            const height = visNode.height;\n\n            if (visNode.transform) {\n                const transform = DrawingUtils.parseTransform(visNode.transform);\n                if (transform.translateX) {\n                    elX += transform.translateX;\n                }\n                if (transform.translateY) {\n                    elY += transform.translateY;\n                }\n            }\n\n            const centerX = elX + width / 2;\n            const centerY = elY + height / 2;\n\n            const distanceX = Math.abs(centerX - x);\n            const distanceY = Math.abs(centerY - y);\n\n            return distanceX < width / 2 && distanceY < height / 2 ? visNode : false;\n\n        } else if(visNode.type === 'g') {\n\n            const transform = this.domHandler.getTotalTransformation(visNode);\n            if(transform.translateX) {\n                x -= transform.translateX;\n            }\n            if(transform.translateY) {\n                y -= transform.translateY;\n            }\n\n            let matchAny: false|VdomNode = false;\n            for(let i = 0; i < visNode.children.length; i++) {\n                if(this.nodeAtPosition(visNode.children[i], x, y)) {\n                    matchAny = visNode.children[i];\n                }\n            }\n            return matchAny;\n        }\n        return false;\n    }\n    \n    private logDrawn() {\n        this.lastCanvasDrawTimes.push(Date.now());\n        \n        if(this.lastCanvasDrawTimes.length > 100) {\n            this.lastCanvasDrawTimes.shift(); // Remove first item\n        }\n    }\n    \n    private updateFps() {\n        if(this.lastCanvasDrawTimes.length) {\n            const timeForTenDrawsMs = Date.now() - this.lastCanvasDrawTimes[0];\n            const fps = Math.round(this.lastCanvasDrawTimes.length / timeForTenDrawsMs * 1000);\n            this.getFps(fps);\n        }\n    }\n\n    private sendUpdateToWorker(queue) {\n        const msg: CanvasUpdateWorkerMessage = {\n            cmd: 'UPDATE_NODES',\n            data: {\n                enterExit: this.enterExitQueue,\n                update: queue,\n            }\n        };\n\n        this.sendToWorker(msg);\n        this.enterExitQueue = [];\n    }\n\n    private sendToWorker(msg: CanvasWorkerMessage, data?: any) {\n        this.worker.postMessage(msg, data);\n        //console.log(roughSizeOfObject(msg));\n    }\n}\n\n\nlet safeLogCount = 0;\nfunction safeLog(...logContents) {\n    \n    if(safeLogCount < 200) {\n        safeLogCount++;\n        console.log(...logContents);\n    }\n}\nfunction safeErrorLog(...logContents) {\n    \n    if(safeLogCount < 200) {\n        safeLogCount++;\n        console.error(...logContents);\n    }\n}\n","import {VDOM, VdomNode, VdomNodeType} from \"../util/vdom/vdom\";\nimport {VdomManager} from \"../util/vdom/vdom-manager\";\nimport DrawingUtils, {Transformation} from \"../canvasworker/drawingUtils\";\nimport drawingUtils from \"../canvasworker/drawingUtils\";\n\nexport const CSS_STYLES = ['stroke', 'stroke-opacity', 'stroke-width', 'stroke-linejoin',\n    'fill', 'fill-opacity', 'font', 'opacity', 'font-family', 'font-size'];\n\nexport default class Domhandler {\n    private readonly vdom: VdomManager;\n    nodes: {[globalElementIndex: number]: VdomNode} = {};\n    elements: {[globalElementIndex: number]: SsvgElement} = {};\n    private nodesToRestyle: VdomNode[] = [];\n    private globalElementIndexCounter = 0;\n\n    constructor(private svg: SVGElement & SsvgElement, useWorker: boolean, private ignoreDesign: boolean) {\n        const visData: VDOM = {\n            type: 'svg',\n            width: parseInt(this.svg.getAttribute('width')),\n            height: parseInt(this.svg.getAttribute('height')),\n            scale: 1,\n            children: [],\n            globalElementIndex: 0,\n            style: {},\n            css: {},\n        };\n\n        this.vdom = new VdomManager(visData, ignoreDesign, false);\n        this.linkNodeToElement(visData, this.svg);\n        this.svg.style.display = 'none';\n        this.svg['selector'] = 'svg';\n\n        this.addChildNodesToVisData(this.svg.childNodes, this.vdom.data);\n\n        window.setTimeout(() => {\n            // Re-do the styles.\n            this.nodesToRestyle = [];\n            // Can not use this.nodesToRestyle = this.nodesToElements.nodes because this links the object and adding\n            // to this.nodesToRestyle would break the nodesToElements mapping.\n            const currentNodes = Object.values(this.nodes);\n            for(const node of currentNodes) {\n                this.nodesToRestyle.push(node);\n            }\n        }, 100);\n    }\n\n    enableFrontendDesignProperties() {\n        this.ignoreDesign = false;\n        this.vdom.enableFrontendDesignProperties();\n    }\n    \n    getVDom() {\n        return this.vdom;\n    }\n    \n    queueSetAttributeOnElement(element: SsvgElement, attrName: string,\n                               value: (number|string|((el: HTMLElement) => (number|string)))) {\n        //TODO: merge with updatePropertiesFromQueue from VdomManager?\n        //let childIndex = element.childIndex;\n        this.vdom.ensureInitialized(attrName, false);\n\n        const node = this.getNodeFromElement(element);\n\n        const evaluatedValue = typeof value === \"function\" ?\n            value.call(element, element.__data__, element.__data__.index) : value;\n\n        if(!node) {\n            console.error('node not found for ', element);\n            return;\n        }\n        this.vdom.set(node, attrName, evaluatedValue, false);\n\n        if(attrName === \"href\") {\n            safeLog('href not yet supported.');\n            /*\n            try {\n                fetch(location.origin + evaluatedValue, {mode: 'cors'})\n                    .then(resp => resp.blob())\n                    .then(blob => createImageBitmap(blob))\n                    .then(bitmap => {\n                        this.vdom.ensureInitialized('image', false);\n                        this.vdom.set(node, 'image', <string> bitmap, false);\n                    });\n            }\n            catch(e) {console.log(e);}\n            */\n        }\n\n        if(attrName === 'class' || attrName.indexOf('style') !== -1) {\n            // Apply classes immediately so styles can be applied correctly.\n            if(attrName === 'class') {\n                node.className = evaluatedValue;\n                this.nodesToRestyle.push(node);\n            } else {\n                const styleName = attrName.substr(6);\n                if(!node.style) {\n                    console.error('no styles on node ', node);\n                }\n                node.style[styleName] = evaluatedValue;\n            }\n        }\n    }\n\n    queueSetAttributeOnSelection(elements: SsvgElement[], attrName: string, value) {\n        if(!elements.length) return;\n        if(!elements[0]) {\n            //console.error('selection elements not found', elements);\n            return;\n        }\n\n        this.vdom.ensureInitialized(attrName, true, this.globalElementIndexCounter);\n\n        for(let i = 0; i < elements.length; i++) {\n            const svgEl = elements[i];\n\n            const evaluatedValue = typeof value === \"function\" ? value(svgEl.__data__, svgEl.__data__.index) : value;\n\n            this.vdom.set(svgEl, attrName, evaluatedValue);\n\n            //TODO: re-implement.\n            /*if(attrName === \"href\") {\n                try {\n                    fetch(location.origin + evaluatedValue, {mode: 'cors'})\n                    .then(resp => resp.blob())\n                    .then(blob => createImageBitmap(blob))\n                    .then(bitmap => {\n                        //this.checkAttrName(parentSelector, \"image\", useSharedArray, parentNode);\n                        this.setAttrQueue.ensureInitialized(\"image\", false);\n                        this.setAttrQueue[parentSelector][\"image\"][indexOfParent] = bitmap;\n                    });\n                }\n                catch(e) {console.log(e);}\n            }*/\n        }\n\n        if(attrName === 'className' || attrName.indexOf('style') !== -1) {\n            // Apply classes immediately so styles can be applied correctly.\n            for(let i = 0; i < elements.length; i++) {\n                const node = this.getNodeFromElement(elements[i]);\n                const evaluatedValue = typeof value === \"function\" ? value(elements[i].__data__, i) : value;\n\n                if(attrName === 'className') {\n                    node.className = evaluatedValue;\n                    this.nodesToRestyle.push(node);\n                } else {\n                    const styleName = attrName.substr(6);\n                    node.style[styleName] = evaluatedValue;\n                }\n            }\n        }\n    }\n\n    getAttributeFromSelector(element: SsvgElement, name: string) {\n        const node = this.getNodeFromElement(element);\n        \n        if(!node) {\n            console.error('trying to get attribute for unfit selection', node, element, name);\n            throw Error('element not found');\n        }\n        \n        return node[name];\n    }\n    \n    getVisNode(element: SsvgElement): VdomNode|null {\n        if(element === this.svg) {\n            return this.vdom.data;\n        }\n        return this.vdom.getNodeFromIndex(element.globalElementIndex);\n        /*const selector = this.getElementSelector(element);\n\n        if(selector === null) {\n            return null;\n        }\n        \n        return this.vdom.getVisNodeFromSelector(selector);*/\n    }\n    \n    getNodeDataFromEl(el: HTMLElement): VdomNode {\n        const roundedAttrs = ['cx', 'cy', 'r', 'x', 'y', 'x1', 'x2', 'y1', 'y2', 'width', 'height', 'stroke-width'];\n\n        const node = {\n            type: el.tagName.toLowerCase() as VdomNodeType,\n            className: el.getAttribute('class'),\n            style: {},\n            css: {},\n            children: [],\n            globalElementIndex: -1,\n            text: !el.childNodes || (el.childNodes.length === 1 && !(el.childNodes[0] as HTMLElement).tagName)\n                ? el.textContent : undefined,\n        };\n\n        for(let i = 0; i < el.attributes.length; i++) {\n            let value: string|number = el.attributes[i].nodeValue;\n            if(value) {\n                if(roundedAttrs.indexOf(el.attributes[i].nodeName) !== -1) {\n                    value = parseFloat(value);\n                }\n                node[el.attributes[i].nodeName] = value;\n            }\n        }\n        node.style = {};\n\n        for(const styleProp in el.style) {\n            if(el.style.hasOwnProperty(styleProp)) {\n                const val = el.style[styleProp];\n                if(val) {\n                    if(val !== '' && typeof el.style[styleProp] !== 'function') {\n                        const kebabCase = styleProp.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n                        node.style[kebabCase] = el.style[styleProp];\n                    }\n                }\n            }\n        }\n\n        const clean = obj => {\n            const propNames = Object.getOwnPropertyNames(obj);\n            for (let i = 0; i < propNames.length; i++) {\n                const propName = propNames[i];\n                if (obj[propName] === null || obj[propName] === undefined) {\n                    delete obj[propName];\n                }\n            }\n        };\n        \n        clean(node);\n        \n        return node;\n    }\n\n    applyStyles() {\n        if(!this.nodesToRestyle || !this.nodesToRestyle.length) {\n            return;\n        }\n\n        for (let i = 0; i < document.styleSheets.length; i++) {\n            const sheet = document.styleSheets[i] as any;\n            const rules = (sheet.rules ? sheet.rules : sheet.cssRules) as CSSRuleList;\n        \n            for (let j = 0; j < rules.length; j++) {\n                const rule = rules[j] as any;\n                const selector = rule.selectorText as string;\n                if(!selector) {\n                    continue; // Skip @imports etc.\n                }\n                this.applyRuleToMatchingNodes(selector, rule);\n            }\n        }\n\n        this.nodesToRestyle = [];\n    }\n\n    private applyRuleToMatchingNodes(selectorString: string, rule: {style: {[settingName: string]: string}}): boolean {\n        selectorString = selectorString.trim();\n\n        const selector = selectorString\n            .replace(' >', '>')\n            .replace('> ', '>')\n            .replace('svg>', '');\n        \n        const selectorPartsLooseStrict = selector.split(' ')\n            .map(part => part.split('>'));\n\n        const parentsOfInterest = [];\n        for(const nodeToBeStyled of this.nodesToRestyle) {\n            if(nodeToBeStyled) { // I don't know why, but there are null values in there.\n                let parent = this.getNodeParent(nodeToBeStyled);\n                while(parent && parentsOfInterest.indexOf(parent) === -1) {\n                    parentsOfInterest.push(parent);\n                    parent = this.getNodeParent(parent);\n                }\n            }\n        }\n\n        const setStyle = (styleName: string, rule: {style: {[settingName: string]: string}}, child: VdomNode) => {\n            if(rule.style[styleName]) {\n                const longSpecName = `css;${selectorString};${styleName}`;\n                this.vdom.ensureInitialized(longSpecName);\n\n                this.vdom.set(child, longSpecName, rule.style[styleName]);\n            }\n        };\n\n        const checkNode = (currentNode: VdomNode, looseIndex = 0, strictIndex = 0): boolean => {\n            const selPart = selectorPartsLooseStrict[looseIndex][strictIndex];\n\n            for(let childIndex = 0; childIndex < currentNode.children.length; childIndex++) {\n                const child = currentNode.children[childIndex];\n                if(parentsOfInterest.indexOf(child) === -1 && this.nodesToRestyle.indexOf(child) === -1) {\n                    continue;\n                }\n                let partialMatch = VdomManager.isCssRulePartialMatch(selPart, child, currentNode);\n\n                if(partialMatch) {\n                    if(selectorPartsLooseStrict[looseIndex].length > strictIndex + 1) {\n                        checkNode(child, looseIndex, strictIndex + 1);\n                    } else if(selectorPartsLooseStrict.length > looseIndex + 1) {\n                        checkNode(child, looseIndex + 1, strictIndex);\n                    } else {\n                        if(!child.css[selectorString]) {\n                            for(const styleName of CSS_STYLES) {\n                                setStyle(styleName, rule, child);\n                            }\n                        }\n                    }\n                } else {\n                    if(child['removedClasses']) {\n                        // temporarily add the class, see if it matches this rule, and if so, un-apply its stuff.\n                        for(const removedClass of child['removedClasses']) {\n                            child.className += ' ' + removedClass;\n\n                            let newPartialMatch = VdomManager.isCssRulePartialMatch(selPart, child, currentNode);\n                            if(newPartialMatch) {\n                                this.removeRuleStylesFromNode(selectorString, child);\n                            }\n\n                            child.className = child.className.substr(0, child.className.length -\n                                removedClass.length - 1);\n                        }\n                        setTimeout(() => {\n                            delete child['removedClasses'];\n                        }); // After this frame, reset which classes have been removed.\n                    }\n                    checkNode(child, looseIndex, strictIndex);\n                }\n            }\n            return false;\n        };\n\n        return checkNode(this.vdom.data);\n    }\n\n    removeRuleStylesFromNode(selector: string, child: VdomNode) {\n        if(child.css[selector]) {\n            this.vdom.ensureInitialized(`css;${selector};*`);\n            this.vdom.set(child, `css;${selector};*`, '');\n        }\n    }\n\n    removeNodeFromParent(element: SsvgElement, node: VdomNode, parentNode: VdomNode) {\n        //console.log('removing', node, 'from', parentNode, [...parentNode.children], childIndex, childIndex2);\n        this.vdom.removeNode(node, parentNode);\n\n        this.nodes[node.globalElementIndex] = null;\n        this.elements[element.globalElementIndex] = null;\n\n        const restyleIndex = this.nodesToRestyle.indexOf(node);\n        if(restyleIndex !== -1) {\n            this.nodesToRestyle.splice(restyleIndex, 1);\n        }\n        /*let index = this.nodes.indexOf(node);\n        if(index === -1) {\n            return console.error('node not found', node);\n        }\n\n        this.nodesToElements.nodes.splice(index, 1);\n        this.nodesToElements.elements.splice(index, 1);*/\n        //safeLog('deleting from parent', element, node, parentNode);\n    }\n\n    restyleNode(node: VdomNode) {\n        if(!this.nodes[node.globalElementIndex] || this.nodes[node.globalElementIndex] !== node) {\n            console.error(node);\n            throw new Error('restyling incorrect node');\n        }\n        this.nodesToRestyle.push(node);\n    }\n    \n    private addChildNodesToVisData(childEls: SsvgElement[]|NodeList, parentNode: VdomNode): void {\n        const parentEl = this.getElementFromNode(parentNode);\n\n        for(let i  = 0; i < childEls.length; i++) {\n            let el = childEls[i] as SsvgElement;\n\n            try\n            {\n                const node = this.getNodeDataFromEl(el);\n\n                /*el.parentSelector = this.getElementSelector(parentEl);\n                el.selector = this.getElementSelector(el);*/\n                //el.childIndex = parentNode.children.length;\n\n                parentNode.children.push(node);\n                this.linkNodeToElement(node, el);\n                this.nodesToRestyle.push(node);\n                \n                if(el.childNodes)\n                {\n                    this.addChildNodesToVisData(el.childNodes, node);\n                }\n                if(node.type === 'tspan')\n                {\n                    //console.log(node, el, el.childNodes, el.textContent);\n                    //console.log(el.childNodes[0])\n                    //console.log(node, style.textAnchor);\n                }\n                if(node.type === 'text')\n                {\n                    //console.log(node, el, el.childNodes, el.textContent);\n                }\n            }\n            catch(e)\n            {\n                //console.log(e);\n                //console.log(el);\n            }\n        }\n    }\n\n    combineElementSelectors(parentSelector: string, elementType: string, childIndex: number) {\n        return parentSelector + ' > ' + elementType + ':nth-child(' + childIndex + ')';\n    }\n\n    getNodeParent(node: VdomNode): VdomNode|null {\n        if(node === this.vdom.data) {\n            return null;\n        }\n        const el = this.getElementFromNode(node);\n        if(!el) {\n            console.error('can not find element for node ', node);\n            return null;\n        }\n        const parentEl = el.parentNode as SsvgElement;\n        return this.getNodeFromElement(parentEl);\n    }\n\n    linkNodeToElement(node: VdomNode, element: SsvgElement) {\n        node.globalElementIndex = this.globalElementIndexCounter;\n        element.globalElementIndex = this.globalElementIndexCounter;\n        this.globalElementIndexCounter++;\n\n        this.nodes[node.globalElementIndex] = node;\n        this.elements[node.globalElementIndex] = element;\n\n        this.vdom.addNode(node);\n    }\n\n    getElementFromNode(node: VdomNode): SsvgElement {\n        if(node === this.vdom.data) {\n            return this.svg;\n        }\n        return this.elements[node.globalElementIndex];\n    }\n\n    getNodeFromElement(element: SsvgElement): VdomNode {\n        if(element === this.svg) {\n            return this.vdom.data;\n        }\n        return this.vdom.getNodeFromIndex(element.globalElementIndex);\n    }\n\n    getParentNode(node: VdomNode): VdomNode|null {\n        const element = this.getElementFromNode(node);\n        const parentElement = element.parentNode as SsvgElement;\n        return this.getNodeFromElement(parentElement);\n    }\n\n    getTotalTransformation(node: VdomNode): Transformation {\n        let parent = this.getParentNode(node);\n        const parents = [node];\n\n        while(parent) {\n            parents.push(parent);\n            parent = this.getParentNode(parent);\n        }\n\n        parent = parents.pop();\n        let totalTransform: Transformation = {\n            translateX: 0,\n            translateY: 0,\n            scaleX: 0,\n            scaleY: 0,\n            rotate: 0,\n            translateBeforeScale: false,\n            rotateLast: false,\n        };\n\n        while(parent) {\n            const transform = DrawingUtils.parseTransform(parent.transform);\n            totalTransform = DrawingUtils.addTransforms(totalTransform, transform);\n            parent = parents.pop();\n        }\n\n        return totalTransform;\n    }\n}\n\nlet safeLogCount = 0;\nfunction safeLog(...logContents) {\n    \n    if(safeLogCount < 50) {\n        safeLogCount++;\n        console.log(...logContents);\n    }\n}\nfunction safeErrorLog(...logContents) {\n    \n    if(safeLogCount < 50) {\n        safeLogCount++;\n        console.error(...logContents);\n    }\n}\n\nexport type SsvgElement = HTMLElement & {\n    __data__: any,\n    globalElementIndex: number,\n};\n","import DrawingUtils from \"../../canvasworker/drawingUtils\";\nimport SetPropertyQueueData, {AttrValues} from \"./set-property-queue-data\";\nimport {VDOM, VdomNode} from \"./vdom\";\nimport {SsvgElement} from \"../../frontend/domhandler\";\n\nexport class VdomManager {\n    private sharedData: {[attrName: string]: Int32Array} = {};\n    private queue: SetPropertyQueueData = {};\n    private useSharedArrayFor = ['cx', 'cy', 'x1', 'x2', 'y1', 'y2', 'x', 'y'];\n    private static IGNOREDESIGN_ATTRIBUTES = ['fill', 'stroke', 'opacity'];\n    private indexToNodeMap: {[index: number]: VdomNode} = {};\n    private static BUFFER_PRECISION_FACTOR = 10;\n    private changed = false;\n    private cachedBuffers: {[attrName: string]: {[index: number]: number}} = {};\n    \n    constructor(public data: VDOM, private ignoreDesign: boolean, private useBufferCache: boolean) {\n        this.ensureNodesMapped();\n    }\n\n    ensureInitialized(attrName: string, useBuffer = true, numNodes?: number) {\n        if(attrName === 'class') {\n            attrName = 'className';\n        }\n\n        if(!useBuffer || this.useSharedArrayFor.indexOf(attrName) === -1) {\n            if(!this.queue[attrName]) {\n                this.queue[attrName] = {};\n            }\n        } else {\n            const newLength = numNodes < 500 ? 1000 : numNodes * 2;\n\n            if(!this.sharedData[attrName]) {\n                let prevData: AttrValues;\n\n                // If values have been previously set without a buffer, transfer them.\n                if(this.queue[attrName] && !(this.queue[attrName] instanceof SharedArrayBuffer)) {\n                    prevData = <AttrValues> this.queue[attrName];\n                }\n\n                const {buffer, values} = this.createBufferTransferValues(newLength, prevData);\n\n                this.queue[attrName] = buffer;\n                this.sharedData[attrName] = values;\n            } else {\n                const newByteLength = Int32Array.BYTES_PER_ELEMENT * newLength;\n                if(this.sharedData[attrName].byteLength / newByteLength < 0.8) {\n                    // Need to allocate more space\n                    const {buffer, values} = this.createBufferTransferValues(newLength,\n                        this.sharedData[attrName]);\n                    this.queue[attrName] = buffer;\n                    this.sharedData[attrName] = values;\n                }\n            }\n        }\n    }\n\n    createBufferTransferValues(length: number, prevData?: AttrValues) {\n        const buffer = new SharedArrayBuffer(Int32Array.BYTES_PER_ELEMENT * length);\n        const values = new Int32Array(buffer);\n\n        // If values have been previously set without a buffer, transfer them.\n        if(prevData) {\n            for(const index in prevData) {\n                if(prevData.hasOwnProperty(index)) {\n                    let value = prevData[index];\n                    if(typeof value === 'string') {\n                        value = parseFloat(value);\n                    }\n                    values[index] = value * VdomManager.BUFFER_PRECISION_FACTOR;\n                }\n            }\n        }\n\n        return {buffer, values};\n    }\n\n    set(element: VdomNode|SsvgElement, attrName: string, value: string|number, useBuffer = true) {\n        if(attrName === 'class') {\n            attrName = 'className';\n        }\n        if(element.globalElementIndex === undefined) {\n            console.error('No index', element);\n            throw new Error('Element has no index');\n        }\n        const index = element.globalElementIndex;\n        const storage = useBuffer && this.useSharedArrayFor.indexOf(attrName) !== -1 ? 'shared' : 'raw';\n        try {\n            this.changed = true;\n            if(storage === 'shared') {\n                if(typeof value === 'string') {\n                    value = parseFloat(value);\n                }\n                value *= VdomManager.BUFFER_PRECISION_FACTOR;\n                value = Math.round(value); // This helps detect zeros.\n                if(value === 0) {\n                    value = 56938516; // magical constant\n                }\n\n                this.sharedData[attrName][index] = value;\n            } else {\n                this.queue[attrName][index] = value;\n                if(this.sharedData[attrName] && this.sharedData[attrName][index]) {\n                    // un-set.\n                    this.sharedData[attrName][index] = 0;\n                }\n            }\n        }\n        catch(e) {\n            console.error(e);\n            console.log(this.queue, this.sharedData, storage, attrName, element, index);\n        }\n    }\n\n    removePendingChanges(node: VdomNode) {\n        const index = node.globalElementIndex;\n        for(const attrName in this.queue) {\n            if(this.queue.hasOwnProperty(attrName)) {\n                delete this.queue[attrName][index];\n            }\n        }\n        for(const attrName in this.sharedData) {\n            if(this.sharedData.hasOwnProperty(attrName)) {\n                this.sharedData[attrName][index] = 0;\n            }\n        }\n    }\n\n    ensureNodesMapped() {\n        const addToMap = (node: VdomNode) => {\n            if(node.globalElementIndex === undefined) {\n                console.error('no element index', node);\n            }\n            this.indexToNodeMap[node.globalElementIndex] = node;\n            for(const child of node.children) {\n                addToMap(child);\n            }\n        };\n        addToMap(this.data);\n    }\n\n    enableFrontendDesignProperties() {\n        this.ignoreDesign = false;\n    }\n\n    addNodeToParent(nodeData: VdomNode, parentNodeIndex: number) {\n        if(nodeData.type !== 'svg') {\n            const parentNode = this.getNodeFromIndex(parentNodeIndex);\n            if(!parentNode) {\n                console.error('could not add node without parent', parentNodeIndex, nodeData,\n                    Object.keys(this.indexToNodeMap));\n                new Error('parent not found');\n                return;\n            }\n            this.applyParentStyles(parentNode, nodeData);\n            parentNode.children.push(nodeData);\n        }\n    }\n\n    addNode(node: VdomNode) {\n        this.indexToNodeMap[node.globalElementIndex] = node;\n    }\n\n    removeNode(node: VdomNode, parent: VdomNode) {\n        delete this.indexToNodeMap[node.globalElementIndex];\n        const childIndex = parent.children.indexOf(node);\n\n        parent.children.splice(childIndex, 1);\n        this.cachedListSelections = {}; //TODO only remove relevant cache.\n\n        this.removePendingChanges(node);\n    }\n\n    applyParentStyles(parentNode: VdomNode, childNode: VdomNode) {\n        for(const style in parentNode.style) {\n            if(!childNode.style[style]) {\n                childNode.style[style] = parentNode.style[style];\n            }\n        }\n    }\n\n    applyStyleToNodeAndChildren(node: VdomNode, styleName: string, styleValue: string,\n                                onNodeUpdated: (node: VdomNode, attrName: string) => void) {\n        node.style[styleName] = styleValue;\n        onNodeUpdated(node, styleName);\n\n        if(node.children) {\n            for(let child of node.children) {\n                this.applyStyleToNodeAndChildren(child, styleName, styleValue, onNodeUpdated);\n            }\n        }\n    }\n\n    applyCssToNodeAndChildren(node: VdomNode, selector: string, styleName: string, value: string,\n                              onNodeUpdated: (node: VdomNode, attrName: string) => void) {\n        if(styleName === '*' && !value) {\n            delete node.css[selector];\n        } else {\n            if(!node.css[selector]) {\n                node.css[selector] = {};\n            }\n            node.css[selector][styleName] = value;\n        }\n        onNodeUpdated(node, styleName);\n\n        if(node.children) {\n            for(let child of node.children) {\n                this.applyCssToNodeAndChildren(child, selector, styleName, value, onNodeUpdated);\n            }\n        }\n    }\n\n    getNodeFromIndex(index: number): VdomNode {\n        return this.indexToNodeMap[index];\n    }\n\n    getNodeById(id: string): VdomNode {\n        const filtered = Object.values(this.indexToNodeMap).filter(node => node.id === id);\n        if(!filtered || filtered.length > 1) {\n            safeLog('multiple nodes with this id!', Object.values(this.indexToNodeMap)\n                .filter(node => node.id).map(node => node.id), id);\n            safeLog(filtered.length, filtered);\n        }\n        return !filtered || filtered.length !== 1 ? null : filtered[0];\n    }\n\n    private static ROUNDED_ATTRS = ['cx', 'cy'];\n\n    get(node: VdomNode, attrs: string|string[]) {\n        if(Array.isArray(attrs)) {\n            return attrs.map(attrName => this.getSingle(node, attrName));\n        } else {\n            return this.getSingle(node, attrs);\n        }\n    }\n\n    private getSingle(node: VdomNode, attrName: string) {\n        const values = this.useBufferCache ? this.cachedBuffers : this.sharedData;\n        if(values[attrName] && values[attrName][node.globalElementIndex]) {\n            const value = values[attrName][node.globalElementIndex];\n            if(value === 56938516) {\n                return 0;\n            }\n            return value / VdomManager.BUFFER_PRECISION_FACTOR;\n        } else {\n            return node[attrName];\n        }\n    }\n\n    hasChanges() {\n        return this.changed;\n    }\n\n    getQueue() {\n        return this.queue;\n    }\n\n    clearQueue() {\n        this.queue = {};\n        this.changed = false;\n    }\n\n    cacheBuffers() {\n        if(this.useBufferCache) {\n            for(let attrName in this.sharedData) {\n                if(!this.cachedBuffers[attrName]) {\n                    this.cachedBuffers[attrName] = {};\n                }\n                for(let i = 0; i < this.sharedData[attrName].length; i++) {\n                    if(this.sharedData[attrName][i]) {\n                        this.cachedBuffers[attrName][i] = this.sharedData[attrName][i];\n                    }\n                }\n            }\n        }\n    }\n\n    updatePropertiesFromQueue(setAttrQueue: SetPropertyQueueData,\n                              onNodeUpdated: (node: VdomNode, attrName: string) => void = () => {}) {\n        for(let attrName in setAttrQueue) {\n            if(!setAttrQueue.hasOwnProperty(attrName)) {\n                continue;\n            }\n            const attrNameStart = attrName.substr(0, 'style;'.length);\n            if(this.ignoreDesign && (attrNameStart === 'style;' ||\n                VdomManager.IGNOREDESIGN_ATTRIBUTES.indexOf(attrName) !== -1)) {\n                continue;\n            }\n\n            let values: AttrValues|Int32Array;\n\n            if('SharedArrayBuffer' in self &&\n                setAttrQueue[attrName] instanceof SharedArrayBuffer) {\n                this.sharedData[attrName] = new Int32Array(<ArrayBuffer> setAttrQueue[attrName]);\n            } else {\n                values = setAttrQueue[attrName] as string[];\n\n                for(let childIndex in values) {\n                    if(!values.hasOwnProperty(childIndex)) {\n                        continue;\n                    }\n                    const index = parseInt(childIndex);\n                    const childNode = this.getNodeFromIndex(index);\n                    if(!childNode) {\n                        console.error('node not found at index', index)\n                        continue;\n                    }\n                    let value: string|number = values[childIndex];\n                    if(attrNameStart === 'style;') {\n                        const styleName = attrName.substr('style;'.length);\n                        this.applyStyleToNodeAndChildren(childNode, styleName, <string> value, onNodeUpdated);\n                    } else if(attrName.substr(0, 4) === 'css;') {\n                        const [selector, styleName] = attrName.substr(4).split(';');\n                        this.applyCssToNodeAndChildren(childNode, selector, styleName, <string> value, onNodeUpdated);\n                    } else {\n                        if(VdomManager.ROUNDED_ATTRS.indexOf(attrName) !== -1) {\n                            if(typeof value === 'string') {\n                                value = parseFloat(value);\n                            }\n                            value = Math.round(value);\n                        }\n\n                        childNode[attrName] = value;\n                        onNodeUpdated(childNode, attrName);\n                    }\n                }\n            }\n        }\n\n        this.cacheBuffers();\n    }\n    \n    private cachedListSelections: {[selector: string]: {[index: number]: VdomNode}} = {};\n    public getVisNodeFromSelector(selector: string): VdomNode|null {\n        const lastSplitPos = selector.lastIndexOf('>');\n        const selectorWithoutLast = selector.substr(0, lastSplitPos);\n        const lastPart = selector.substr(lastSplitPos + 1);\n        const parentSel = selectorWithoutLast ? this.cachedListSelections[selectorWithoutLast] : null;\n        let index = -1;\n        const nthChildPosition = lastPart.indexOf(':nth-child(');\n        if(nthChildPosition !== -1) {\n            index = parseInt(lastPart.substr(nthChildPosition + 11)); // length of ':nth-child('\n            if(parentSel && parentSel[index]) {\n                return parentSel[index];\n            }\n        }\n        \n        const selectedNodes: VdomNode[] = [];\n        this.findMatchingChildren(this.data, selector, 0, selectedNodes);\n        \n        if(selectedNodes && selectedNodes.length === 1) {\n            const el = selectedNodes[0];\n            if(index !== -1) {\n                if(!this.cachedListSelections[selectorWithoutLast]) {\n                    this.cachedListSelections[selectorWithoutLast] = {};\n                }\n                this.cachedListSelections[selectorWithoutLast][index] = el;\n            }\n            return el;\n        }\n        return null;\n    }\n    \n    public getVisNodesFromSelector(visNode: VdomNode, selector: string) {\n        const selectedNodes = [];\n        this.findMatchingChildren(visNode, selector, 0, selectedNodes);\n        return selectedNodes;\n    }\n\n    private findChildrenOfType(visNode: VdomNode, type: string, selectedNodes: VdomNode[]) {\n        const addDirectChildrenIfMatch = (node: VdomNode) => {\n            for(const child of node.children) {\n                if(child.type === type) {\n                    selectedNodes.push(child);\n                }\n                if(node.children.length !== 0) {\n                    addDirectChildrenIfMatch(child);\n                }\n            }\n        };\n        addDirectChildrenIfMatch(visNode);\n    }\n\n    public filterNodesBySelector(parentNode: VdomNode, nodes: VdomNode[], selector: string) {\n        return nodes.filter(node => VdomManager.isCssRulePartialMatch(selector, node, parentNode));\n    }\n    \n    private findMatchingChildren(visNode: VdomNode, selector: string, matchIndex: number, selectedNodes: VdomNode[],\n                                 selectedNodeSelectors: string[] = []) {\n        if(!selector && selector !== '') {\n            console.error(visNode, selector, matchIndex, selectedNodes, selectedNodeSelectors);\n            throw Error('undefined selector');\n        }\n\n        let selParts = selector.split('>').map(s => s.trim());\n        let selPart = selParts[matchIndex];\n        \n        if(matchIndex === 0 && selPart === 'svg') {\n            matchIndex++;\n            selPart = selParts[matchIndex];\n            if(matchIndex === selParts.length) {\n                selectedNodes.push(visNode);\n                selectedNodeSelectors.push(selector);\n                return;\n            }\n        }\n\n        if(selector.match(/^[a-z]+$/)) {\n            return this.findChildrenOfType(visNode, selector, selectedNodes);\n        }\n        \n        for(let i = 0; i < visNode.children.length; i++) {\n            let node = visNode.children[i];\n            let matching = false;\n            \n            if(VdomManager.isCssRulePartialMatch(selPart, node, visNode)) {\n                if(matchIndex === selParts.length - 1) {\n                    selectedNodes.push(node);\n                    selectedNodeSelectors.push(selector);\n                } else {\n                    matching = true;\n                }\n            }\n            \n            if(node.children && (matching || selParts.length < 2) && matchIndex + 1 < selParts.length) {\n                this.findMatchingChildren(node, selector, matchIndex + 1, selectedNodes, selectedNodeSelectors);\n            }\n        }\n    }\n\n    public static isCssRulePartialMatch(cssRuleSelectorPart: string, node: VdomNode, parentNode: VdomNode): boolean {\n        if(cssRuleSelectorPart.substr(0, 5) === ':not(') {\n            const newSelPart = cssRuleSelectorPart.substr(0, cssRuleSelectorPart.length - 1).substr(5);\n            return !VdomManager.isCssRulePartialMatch(newSelPart, node, parentNode);\n        }\n        if(cssRuleSelectorPart[0] === '.') { // Example: .className or .classnameA.classnameB\n            const searchClassNames = cssRuleSelectorPart.split('.');\n            searchClassNames.shift(); // remove empty first string.\n            if(node.className) {\n                let allTrue = true;\n                for(const searchClassName of searchClassNames) {\n                    if(node.className.split(' ').indexOf(searchClassName) === -1) {\n                        allTrue = false;\n                    }\n                }\n                return allTrue;\n            }\n        } else if(cssRuleSelectorPart[0] === '#') { // Example: #id\n            if(cssRuleSelectorPart.substr(1) === node.id) {\n                return true;\n            }\n        } else if(cssRuleSelectorPart.match(/^[a-z]+$/)) { // Example: rect\n            if(cssRuleSelectorPart === node.type) {\n                return true;\n            }\n        } else if(cssRuleSelectorPart.indexOf(':nth-child(') !== -1) {\n            let type = 'any';\n            let indexPart = cssRuleSelectorPart;\n\n            if(cssRuleSelectorPart[0] !== ':') {\n                type = cssRuleSelectorPart.substr(0, cssRuleSelectorPart.indexOf(':'));\n                indexPart = cssRuleSelectorPart.substr(cssRuleSelectorPart.indexOf(':'));\n            }\n\n            const targetIndex = parseInt(indexPart.substr(':nth-child('.length));\n            const index = parentNode.children.indexOf(node);\n\n            return (index === targetIndex - 1 && (type === 'any' || node.type === type));\n        }\n        else if(cssRuleSelectorPart.indexOf('.') !== -1) { // Example: rect.className\n            const cutoff = cssRuleSelectorPart.indexOf('.');\n            const typeName = cssRuleSelectorPart.substr(0, cutoff);\n            const className = cssRuleSelectorPart.substr(cutoff + 1);\n            if(typeName === node.type && node.className && node.className.split(' ').indexOf(className) !== -1) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\nlet safeLogCount = 0;\nfunction safeLog(...logContents) {\n    if(safeLogCount < 400) {\n        safeLogCount++;\n        console.log(...logContents);\n    }\n}\nfunction safeErrorLog(...logContents) {\n    if(safeLogCount < 400) {\n        safeLogCount++;\n        console.error(...logContents);\n    }\n}\n","import {VdomNode} from \"../util/vdom/vdom\";\nimport {VdomManager} from \"../util/vdom/vdom-manager\";\nimport DrawingUtils from \"./drawingUtils\";\nimport CanvasWorker from \"./canvasworker\";\n\ntype DrawMode = 'start'|'normal'|'end'|'forcesingle';\n\nexport default class Canvasrenderer implements CanvasWorker {\n    \n    private ctx: CanvasRenderingContext2D;\n    private parentValues: {[prop: string]: string|number} = {};\n    \n    constructor(private vdom: VdomManager, private canvas: HTMLCanvasElement,\n                private forceSingle = false, private onDrawn = () => {}) {\n        const ctx = canvas.getContext('2d');\n        if(!ctx) throw new Error('could not create canvas context');\n        \n        this.ctx = ctx;\n        this.ctx.scale(this.vdom.data.scale, this.vdom.data.scale);\n        this.ctx.save();\n        \n        this.draw();\n        \n        setTimeout(() => {\n            console.log(this.forceSingle, this.vdom.data);\n            this.draw();\n        }, 1000);\n    }\n    \n    private lastFullSecond = 0;\n    private countSinceLastFullSecond = 0;\n    \n    draw() {\n        const ctx = this.ctx;\n\n        ctx.restore();\n        ctx.save();\n        \n        //ctx.fillStyle = '#fff';\n        //ctx.fillRect(0, 0, this.vdom.data.width, this.vdom.data.height);\n        ctx.clearRect(0, 0, this.vdom.data.width, this.vdom.data.height);\n    \n        //this.lastDrawn = null;\n        this.drawLine(null, 'start');\n        this.drawCircle(null, 'start');\n        this.drawRect(null, 'start');\n        this.drawText(null, 'start');\n        this.drawImage(null, 'start');\n\n        this.drawNodeAndChildren(this.vdom.data, this.forceSingle);\n\n        this.drawLine(null, 'end');\n        this.drawCircle(null, 'end');\n        this.drawRect(null, 'end');\n        this.drawText(null, 'end');\n        this.drawImage(null, 'end');\n        \n        this.onDrawn();\n    \n        const fullSecond = Math.round(performance.now() / 1000);\n        if(fullSecond !== this.lastFullSecond) {\n            this.lastFullSecond = fullSecond;\n            //console.log(this.countSinceLastFullSecond);\n            this.countSinceLastFullSecond = 0;\n        }\n        this.countSinceLastFullSecond++;\n    }\n    \n    private drawNodeAndChildren(elData: VdomNode, forceSingle: boolean, drawClip?: Path2D) {\n        if(elData.type === 'clippath' && !drawClip) {\n            return;\n        }\n\n        const ctx = this.ctx;\n        const parentValuesBackup = {...this.parentValues};\n\n        if(!drawClip) {\n            ctx.save();\n        }\n\n        const hasTransformed = this.applyTransform(elData.transform);\n\n        if(elData.transform || drawClip) {\n            forceSingle = true;\n        }\n\n        if(elData['clip-path']) {\n            if(elData['clip-path'].substr(0, 5) === 'url(#') {\n                const clipPathId = elData['clip-path'].substr(5, elData['clip-path'].length - 6);\n                const clipNode = this.vdom.getNodeById(clipPathId);\n                forceSingle = true;\n\n                if(!clipNode) {\n                    //safeErrorLog('clip node not found', elData['clip-path'], clipPathId, this.vdom.data)\n                } else {\n                    const path = new Path2D();\n                    this.drawNodeAndChildren(clipNode, forceSingle, path);\n                    ctx.clip(path);\n                }\n            } else {\n                safeErrorLog('clip path format not supported:', elData['clip-path']);\n            }\n        }\n\n        if(!elData.style.display || elData.style.display !== 'none') {\n            if(!forceSingle) {\n                this.drawSingleNode(elData, 'normal', drawClip);\n            } else {\n                this.drawSingleNode(elData, 'forcesingle', drawClip);\n            }\n        }\n\n        if(elData.children) {\n            const fill = this.getFillStyle(elData, 'undefined');\n            if(fill !== 'undefined') {\n                this.parentValues['fill'] = fill;\n            }\n            const stroke = this.getStrokeStyle(elData, 'undefined');\n            if(stroke !== 'undefined') {\n                this.parentValues['stroke'] = stroke;\n            }\n            this.parentValues['opacity'] = elData.opacity;\n\n            for(let i = 0; i < elData.children.length; i++) {\n                this.drawNodeAndChildren(elData.children[i], forceSingle, drawClip);\n            }\n        }\n\n        if(!drawClip) {\n            //safeLog('restoring ctx', elData);\n            ctx.restore();\n            this.parentValues = parentValuesBackup;\n        }\n\n        if(hasTransformed) {\n            //ctx.restore();\n        }\n    }\n    \n    private drawSingleNode(elData: VdomNode, mode: DrawMode = 'normal', path?: Path2D) {\n        const type: string = elData.type;\n        const drawFct = this['draw' + type.substr(0,1).toUpperCase() + type.substr(1)];\n        if(!drawFct) {\n            return console.error('no draw function yet for ', type);\n        }\n        drawFct.call(this, elData, mode, path);\n    }\n\n    private drawClippath(elData: VdomNode) {\n        //safeLog('clippaths can not be rendered yet.')\n    }\n\n    private drawSvg() {}\n    private drawTitle() {}\n    private drawG() {}\n    \n    private circlesByColor: {[color: string]: VdomNode[]} = {};\n    private drawCircle(elData: VdomNode, mode: DrawMode = 'normal', path?: Path2D) {\n        if(mode === 'normal') {\n            let fill = this.getFillStyle(elData, '#000');\n            const stroke = this.getStrokeStyle(elData);\n            const handle = fill + ';' + stroke;\n            if(!this.circlesByColor[handle]) {\n                this.circlesByColor[handle] = [];\n            }\n            this.circlesByColor[handle].push(elData);\n        }\n        if(mode === 'start') {\n            this.circlesByColor = {};\n            return;\n        }\n        if(mode === 'end') {\n            for(let fillAndStrokeColor in this.circlesByColor) {\n                if(this.circlesByColor.hasOwnProperty(fillAndStrokeColor)) {\n                    const split = fillAndStrokeColor.split(';');\n                    const fillColor = split[0];\n                    const strokeColor = split[1];\n\n                    this.ctx.fillStyle = fillColor;\n                    let sampleData = this.circlesByColor[fillAndStrokeColor][0];\n                    const lineWidth = this.getStrokeWidth(sampleData);\n                    this.ctx.lineWidth = lineWidth !== undefined ? lineWidth : 1;\n                    this.ctx.strokeStyle = strokeColor;\n\n                    this.ctx.beginPath();\n                    for(let elData of this.circlesByColor[fillAndStrokeColor]) {\n                        // Round values so that paths are connected correctly and there are no rendering glitches\n                        const cx = Math.round(this.vdom.get(elData, 'cx')) || 0;\n                        const cy = Math.round(this.vdom.get(elData, 'cy')) || 0;\n                        const r = Math.round(this.vdom.get(elData, 'r'));\n                        this.ctx.save();\n                        this.applyTransform(elData.transform);\n                        this.ctx.moveTo(cx + r, cy);\n                        this.ctx.arc(cx, cy, r, 0, 2 * Math.PI);\n                        this.ctx.restore();\n                        //this.ctx.restore();\n                    }\n\n                    if(fillColor !== 'none'){\n                        this.ctx.fill();\n                    }\n\n                    if(strokeColor && strokeColor !== 'none') {\n                        this.ctx.stroke();\n                    }\n                }\n            }\n            return;\n        }\n        if(mode === 'forcesingle') {\n            let fill = this.getFillStyle(elData, '#000');\n            const strokeStyle = this.getStrokeStyle(elData);\n\n            const cx = this.vdom.get(elData, 'cx') || 0;\n            const cy = this.vdom.get(elData, 'cy') || 0;\n\n            this.ctx.beginPath();\n            this.ctx.fillStyle = fill;\n            this.ctx.strokeStyle = strokeStyle;\n            this.ctx.lineWidth = this.getStrokeWidth(elData);\n            this.ctx.moveTo(cx + elData.r, cy);\n            const context = path ? path : this.ctx;\n            context.arc(cx, cy, elData.r, 0, 2 * Math.PI);\n            if(fill !== 'none' && !path){\n                this.ctx.fill();\n            }\n\n            if(strokeStyle && strokeStyle !== 'none' && !path) {\n                this.ctx.stroke();\n            }\n        }\n    }\n\n    nodeUpdated(node: VdomNode, attr: string) {\n        if(attr === '*' || attr.includes('fill') || attr.includes('opacity')) {\n            delete node['fill-cache'];\n        }\n        if(attr === '*' || attr.includes('stroke') || attr.includes('opacity')) {\n            delete node['stroke-cache'];\n            delete node['strokewidth-cache'];\n        }\n    }\n\n    private getFillStyle(node: VdomNode, defaultColor = 'none'): string {\n        if('fill-cache' in node) {\n            return node['fill-cache'];\n        }\n        let fill = this.getAttributeStyleCss(node, 'fill');\n        let opacity = this.getAttributeStyleCss(node, 'opacity') || 1;\n        const fillOpacity = this.getAttributeStyleCss(node, 'fill-opacity') || 1;\n        opacity *= fillOpacity;\n\n        let defaultCol = '';\n        if(this.parentValues['fill']) {\n            defaultCol = this.parentValues['fill'] as string;\n        }\n        if(this.parentValues['style;fill']) {\n            defaultCol = this.parentValues['style;fill'] as string;\n        }\n        if(!this.parentValues['fill'] && !this.parentValues['style;fill']) {\n            defaultCol = defaultColor;\n        }\n\n        fill = DrawingUtils.colorToRgba(fill, opacity, defaultCol);\n        node['fill-cache'] = fill;\n        return fill;\n    }\n\n    private getAttributeStyleCss(node: VdomNode, style: string) {\n        if(node.style[style]) {\n            return node.style[style];\n        } else {\n            let value = node[style];\n\n            let highestSpec = -1;\n            for(const selector in node.css) {\n                if(node.css[selector][style]) {\n                    const specificity = DrawingUtils.getCssRuleSpecificityNumber(selector);\n                    if(specificity > highestSpec) {\n                        value = node.css[selector][style];\n                        highestSpec = specificity;\n                    }\n                }\n            }\n            return value;\n        }\n    }\n\n    private getStrokeStyle(node: VdomNode, defaultColor = 'none'): string {\n        if('stroke-cache' in node) {\n            return node['stroke-cache'];\n        }\n        const stroke = this.getAttributeStyleCss(node, 'stroke');\n        let opacity = this.getAttributeStyleCss(node, 'opacity') || 1;\n        const fillOpacity = this.getAttributeStyleCss(node, 'stroke-opacity') || 1;\n        opacity *= fillOpacity;\n\n        if(stroke !== undefined) {\n            node['stroke-cache'] = DrawingUtils.colorToRgba(stroke, opacity);\n        } else {\n            node['stroke-cache'] = defaultColor;\n        }\n        return node['stroke-cache'];\n    }\n\n    private getStrokeWidth(node: VdomNode) {\n        if('strokewidth-cache' in node) {\n            return node['strokewidth-cache'];\n        }\n        const width = this.getAttributeStyleCss(node, 'stroke-width');\n        node['strokewidth-cache'] = width === undefined ? undefined : parseFloat(width);\n\n        return node['strokewidth-cache'];\n    }\n\n    private rectsByColor = {};\n\n    private drawRect(elData: VdomNode, mode: DrawMode = 'normal', path?: Path2D) {\n        if(mode === 'normal') {\n            let fill = this.getFillStyle(elData, '#000');\n            const stroke = this.getStrokeStyle(elData);\n            const handle = fill + ';' + stroke;\n            if(!this.rectsByColor[handle]) {\n                this.rectsByColor[handle] = [];\n            }\n            this.rectsByColor[handle].push(elData);\n        }\n        if(mode === 'start') {\n            this.rectsByColor = {};\n            return;\n        }\n        if(mode === 'end') {\n            for(let fillAndStrokeColor in this.rectsByColor) {\n                if(this.rectsByColor.hasOwnProperty(fillAndStrokeColor)) {\n                    const split = fillAndStrokeColor.split(';');\n                    const fillColor = split[0];\n                    const strokeColor = split[1];\n                    this.ctx.fillStyle = fillColor;\n\n                    let sampleData = this.rectsByColor[fillAndStrokeColor][0];\n                    const lineWidth = this.getStrokeWidth(sampleData);\n                    this.ctx.lineWidth = lineWidth !== undefined ? lineWidth : 1;\n                    this.ctx.strokeStyle = strokeColor;\n\n                    this.ctx.beginPath();\n                    for(let elData of this.rectsByColor[fillAndStrokeColor]) {\n                        // Round values so that paths are connected correctly and there are no rendering glitches\n                        const x = Math.round(this.vdom.get(elData, 'x')) || 0;\n                        const y = Math.round(this.vdom.get(elData, 'y')) || 0;\n                        this.ctx.save();\n                        this.applyTransform(elData.transform);\n                        this.ctx.moveTo(x, y);\n                        this.ctx.rect(x, y, elData.width, elData.height);\n                        this.ctx.restore();\n                        //this.ctx.restore();\n                    }\n                    if(fillColor !== 'none'){\n                        this.ctx.fill();\n                    }\n\n                    if(strokeColor && strokeColor !== 'none') {\n                        this.ctx.stroke();\n                    }\n                }\n            }\n            return;\n        }\n        if(mode === 'forcesingle') {\n            let fill = this.getFillStyle(elData, '#000');\n            const stroke = this.getStrokeStyle(elData);\n\n            const x = this.vdom.get(elData, 'x') || 0;\n            const y = this.vdom.get(elData, 'y') || 0;\n\n            if(fill && fill !== 'none' && !path) {\n                this.ctx.fillStyle = fill;\n                this.ctx.fillRect(x, y, elData.width, elData.height);\n            }\n            if(path) {\n                path.rect(x, y, elData.width, elData.height);\n            }\n\n            if(stroke !== 'none' && !path) {\n                this.ctx.strokeStyle = stroke;\n                this.ctx.beginPath();\n                this.ctx.rect(x, y, elData.width, elData.height);\n                this.ctx.stroke();\n            }\n        }\n    }\n\n    private drawTexts: VdomNode[] = [];\n\n    private drawText(node: VdomNode, mode: DrawMode = 'normal', isClip = false) {\n        const drawSingle = (elData: VdomNode) => {\n            if(elData.text === '') {\n                return;\n            }\n            let fontFamily = this.getAttributeStyleCss(elData, 'font-family') || 'Times New Roman';\n\n            let fontSize = '16px';\n            const customSize = this.getAttributeStyleCss(elData, 'font-size');\n            if(customSize) {\n                fontSize = DrawingUtils.convertSizeToPx(customSize) + 'px';\n            }\n            let font = this.getAttributeStyleCss(elData, 'font');\n            if(!font) {\n                font = fontSize + ' ' + fontFamily;\n            }\n            let align = this.getAttributeStyleCss(elData, 'text-anchor');\n            if(align) {\n                if(align === 'middle') {\n                    align = 'center';\n                }\n                this.ctx.textAlign = align;\n            }\n            let fill = this.getAttributeStyleCss(elData, 'fill');\n            if(!fill) fill = '#000';\n            this.ctx.font = font;\n            this.ctx.fillStyle = fill;\n            let x = this.vdom.get(elData, 'x') || 0;\n            let y = this.vdom.get(elData, 'y') || 0;\n            let dx = DrawingUtils.convertSizeToPx(elData.dx, false) || 0;\n            let dy = DrawingUtils.convertSizeToPx(elData.dy, false) || 0;\n            this.ctx.fillText(elData.text, x + dx, y + dy);\n        };\n        if(mode === 'start') {\n            this.drawTexts = [];\n            return;\n        }\n        if(mode === 'normal') {\n            this.drawTexts.push(node);\n            return;\n        }\n        if(mode === 'forcesingle') {\n            return drawSingle(node);\n        }\n        if(mode === 'end') {\n            for(const currentNode of this.drawTexts) {\n                drawSingle(currentNode);\n            }\n            return;\n        }\n    }\n\n    private drawImages: VdomNode[] = [];\n\n    private drawImage(node: VdomNode, mode: DrawMode = 'normal') {\n        const drawSingle = (elData: VdomNode) => {\n            if(elData.href === '') {\n                return;\n            }\n            let fill = elData['fill'] ? elData['fill'] : elData.style['fill'];\n            if(!fill) fill = '#000';\n            this.ctx.fillStyle = fill;\n            let x = this.vdom.get(elData, 'x') || 0;\n            let y = this.vdom.get(elData, 'y') || 0;\n            let width = elData.width || 0;\n            let height = elData.height || 0;\n            if(elData.image) {\n                try {\n                    this.ctx.drawImage(elData.image, x, y, width, height);\n                } catch(e) {\n                    console.log(e);\n                }\n            }\n        };\n        if(mode === 'start') {\n            this.drawImages = [];\n            return;\n        }\n        if(mode === 'normal') {\n            this.drawImages.push(node);\n            return;\n        }\n        if(mode === 'forcesingle') {\n            return drawSingle(node);\n        }\n        if(mode === 'end') {\n            for(const currentNode of this.drawImages) {\n                drawSingle(currentNode);\n            }\n            return;\n        }\n    }\n\n    private drawPath(elData: VdomNode, mode: DrawMode = 'normal', path?: Path2D) {\n        if(mode !== 'normal' && mode !== 'forcesingle') return;\n\n        const fill = this.getFillStyle(elData, '#000');\n        const stroke = this.getStrokeStyle(elData);\n        const strokeWidth = this.getStrokeWidth(elData);\n\n        let p = new Path2D(elData.d);\n        this.ctx.fillStyle = fill;\n        if(stroke !== undefined && stroke !== 'none') {\n            if(strokeWidth !== undefined) {\n                this.ctx.lineWidth = strokeWidth;\n            }\n            this.ctx.strokeStyle = stroke;\n\n            const lineJoin = this.getAttributeStyleCss(elData, 'stroke-linejoin')\n\n            if(lineJoin) {\n                if(lineJoin === 'bevel' || lineJoin === 'round' || lineJoin === 'miter') {\n                    this.ctx.lineJoin = lineJoin;\n                } else {\n                    console.error('unknown line join value:', lineJoin)\n                }\n            }\n            if(!path) {\n                this.ctx.stroke(p);\n            }\n        }\n\n        if(fill && fill !== 'none' && !path) {\n            this.ctx.fill(p);\n        }\n        if(path) {\n            path.addPath(p);\n        }\n    }\n    \n    private drawTspan(elData: VdomNode, mode: DrawMode = 'normal') {\n        if(mode !== 'normal' && mode !== 'forcesingle') return;\n        \n        this.ctx.font = \"10px Arial\";\n        this.ctx.fillStyle = \"#000000\";\n        const textAlign = <CanvasTextAlign> (elData.style.textAnchor === \"middle\" ? \"center\" : elData.style.textAnchor);\n        this.ctx.textAlign = textAlign;\n        this.ctx.fillText(elData.text, this.vdom.get(elData, 'x'), this.vdom.get(elData, 'y'));\n    }\n\n    private drawTextpath(elData: VdomNode) {\n        console.warn('no draw function yet for textpath');\n    }\n\n    private linesByColor: {[color: string]: VdomNode[]} = {};\n    private drawLine(elData, mode: DrawMode = 'normal') {\n        if(this.vdom.data.scale > 1) {\n            //mode = 'forcesingle';\n            // In my tests, drawing a long connected path is very slow for high DPI devices.\n        }\n        if(mode === 'normal') {\n            const stroke = this.getStrokeStyle(elData);\n            const width = this.getStrokeWidth(elData);\n            if(stroke === 'none' || width === 0) {\n                return;\n            }\n            const selector = `${stroke};${width}`;\n            if(!this.linesByColor[selector]) {\n                this.linesByColor[selector] = [];\n            }\n            this.linesByColor[selector].push(elData);\n        }\n        if(mode === 'start') {\n            this.linesByColor = {};\n            return;\n        }\n        if(mode === 'end') {\n            //safeLog(Object.keys(this.linesByColor), this.linesByColor);\n            for(let selector in this.linesByColor) {\n                if(this.linesByColor.hasOwnProperty(selector)) {\n                    const split = selector.split(';');\n                    const strokeColor = split[0];\n                    const width = split[1];\n\n                    this.ctx.strokeStyle = strokeColor;\n                    this.ctx.lineWidth = parseFloat(width);\n\n                    this.ctx.beginPath();\n                    for(let elData of this.linesByColor[selector]) {\n                        if(elData.transform) {\n                            this.ctx.save();\n                            this.applyTransform(elData.transform);\n                        }\n\n                        const [x1, x2, y1, y2] = this.vdom.get(elData, ['x1', 'x2', 'y1', 'y2'])\n                            .map(val => Math.round(val) || 0);\n\n                        /*const dist = Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));\n                        if(dist > 50) {\n                            safeLog(elData, dist, x1, x2, y1, y2);\n                        }*/\n\n                        this.ctx.moveTo(x1, y1);\n                        this.ctx.lineTo(x2, y2);\n\n                        if(elData.transform) {\n                            //this.ctx.restore();\n                            this.ctx.restore();\n                        }\n                    }\n\n                    this.ctx.stroke();\n                }\n            }\n            return;\n        }\n        if(mode === 'forcesingle') {\n            this.ctx.beginPath();\n\n            const [x1, x2, y1, y2] = this.vdom.get(elData, ['x1', 'x2', 'y1', 'y2'])\n                .map(val => Math.round(val) || 0);\n\n            this.ctx.moveTo(x1, y1);\n            this.ctx.lineTo(x2, y2);\n\n            this.ctx.strokeStyle = this.getStrokeStyle(elData);\n            this.ctx.lineWidth = this.getStrokeWidth(elData);\n            //safeLog(stroke, this.ctx.strokeStyle);\n            this.ctx.stroke();\n        }\n    }\n\n    private drawDefs(node: VdomNode) {\n        //TODO figure out.\n    }\n\n    private drawMarker(node: VdomNode) {\n        //TODO figure out.\n    }\n    \n    private applyTransform(transformString: string) {\n        const transform = transformString ? DrawingUtils.parseTransform(transformString) : null;\n        if(transform) {\n            if(!transform.rotateLast) {\n                this.ctx.rotate(transform.rotate * Math.PI / 180);\n            }\n\n            const x = transform.translateBeforeScale ? transform.translateX : transform.translateX * transform.scaleX;\n            const y = transform.translateBeforeScale ? transform.translateY : transform.translateY * transform.scaleY;\n            this.ctx.transform(transform.scaleX, 0, 0, transform.scaleY, x, y);\n\n            if(transform.rotateLast) {\n                this.ctx.rotate(transform.rotate * Math.PI / 180);\n            }\n\n            return true;\n        }\n        return false;\n    }\n}\n\n\nlet safeLogCount = 0;\nfunction safeLog(...logContents) {\n    \n    if(safeLogCount < 300) {\n        safeLogCount++;\n        console.log(...logContents);\n    }\n}\nfunction safeErrorLog(...logContents) {\n    \n    if(safeLogCount < 50) {\n        safeLogCount++;\n        console.error(...logContents);\n    }\n}\n","import './custom';\nimport CanvasWorkerImporter = require('worker-loader?inline=true!./canvasworker');\n\nexport default CanvasWorkerImporter;","module.exports = function() {\n  return require(\"!!/home/micha/WebstormProjects/ssvg/node_modules/worker-loader/dist/workers/InlineWorker.js\")(\"!function(t){var e={};function s(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,s),i.l=!0,i.exports}s.m=t,s.c=e,s.d=function(t,e,r){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},s.r=function(t){\\\"undefined\\\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:\\\"Module\\\"}),Object.defineProperty(t,\\\"__esModule\\\",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&\\\"object\\\"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(s.r(r),Object.defineProperty(r,\\\"default\\\",{enumerable:!0,value:t}),2&e&&\\\"string\\\"!=typeof t)for(var i in t)s.d(r,i,function(e){return t[e]}.bind(null,i));return r},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,\\\"a\\\",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p=\\\"\\\",s(s.s=0)}([function(t,e,s){\\\"use strict\\\";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,\\\"__esModule\\\",{value:!0});const i=s(1),n=r(s(2));let o;const a=self;let l;a.onmessage=function(t){const e=t.data;if(e&&e.cmd)switch(e.cmd){case\\\"INIT\\\":l=new i.VdomManager(e.data.visData,!1,!0);const t=!!e.data.safeMode;o=new n.default(l,e.data.canvas,t,()=>{a.postMessage({msg:\\\"DRAWN\\\"})});break;case\\\"UPDATE_NODES\\\":const s=e;for(let t of s.data.enterExit)if(\\\"ENTER\\\"===t.cmd){const e=t.node;t.keepChildren||(e.children=[]),l.addNode(e),l.addNodeToParent(e,t.parentGlobalIndex),o.addNode&&o.addNode(e)}else if(\\\"EXIT\\\"===t.cmd){const e=l.getNodeFromIndex(t.childGlobalIndex),s=l.getNodeFromIndex(t.parentGlobalIndex);l.removeNode(e,s)}o.updatePropertiesFromQueue?o.updatePropertiesFromQueue(s.data.update):l.updatePropertiesFromQueue(s.data.update,o.nodeUpdated),o.draw();break;default:console.error(\\\"did not find command \\\",e.cmd)}}},function(t,e,s){\\\"use strict\\\";Object.defineProperty(e,\\\"__esModule\\\",{value:!0});class r{constructor(t,e,s){this.data=t,this.ignoreDesign=e,this.useBufferCache=s,this.sharedData={},this.queue={},this.useSharedArrayFor=[\\\"cx\\\",\\\"cy\\\",\\\"x1\\\",\\\"x2\\\",\\\"y1\\\",\\\"y2\\\",\\\"x\\\",\\\"y\\\"],this.indexToNodeMap={},this.changed=!1,this.cachedBuffers={},this.cachedListSelections={},this.ensureNodesMapped()}ensureInitialized(t,e=!0,s){if(\\\"class\\\"===t&&(t=\\\"className\\\"),e&&-1!==this.useSharedArrayFor.indexOf(t)){const e=s<500?1e3:2*s;if(this.sharedData[t]){const s=Int32Array.BYTES_PER_ELEMENT*e;if(this.sharedData[t].byteLength/s<.8){const{buffer:s,values:r}=this.createBufferTransferValues(e,this.sharedData[t]);this.queue[t]=s,this.sharedData[t]=r}}else{let s;!this.queue[t]||this.queue[t]instanceof SharedArrayBuffer||(s=this.queue[t]);const{buffer:r,values:i}=this.createBufferTransferValues(e,s);this.queue[t]=r,this.sharedData[t]=i}}else this.queue[t]||(this.queue[t]={})}createBufferTransferValues(t,e){const s=new SharedArrayBuffer(Int32Array.BYTES_PER_ELEMENT*t),i=new Int32Array(s);if(e)for(const t in e)if(e.hasOwnProperty(t)){let s=e[t];\\\"string\\\"==typeof s&&(s=parseFloat(s)),i[t]=s*r.BUFFER_PRECISION_FACTOR}return{buffer:s,values:i}}set(t,e,s,i=!0){if(\\\"class\\\"===e&&(e=\\\"className\\\"),void 0===t.globalElementIndex)throw console.error(\\\"No index\\\",t),new Error(\\\"Element has no index\\\");const n=t.globalElementIndex,o=i&&-1!==this.useSharedArrayFor.indexOf(e)?\\\"shared\\\":\\\"raw\\\";try{this.changed=!0,\\\"shared\\\"===o?(\\\"string\\\"==typeof s&&(s=parseFloat(s)),s*=r.BUFFER_PRECISION_FACTOR,0===(s=Math.round(s))&&(s=56938516),this.sharedData[e][n]=s):(this.queue[e][n]=s,this.sharedData[e]&&this.sharedData[e][n]&&(this.sharedData[e][n]=0))}catch(s){console.error(s),console.log(this.queue,this.sharedData,o,e,t,n)}}removePendingChanges(t){const e=t.globalElementIndex;for(const t in this.queue)this.queue.hasOwnProperty(t)&&delete this.queue[t][e];for(const t in this.sharedData)this.sharedData.hasOwnProperty(t)&&(this.sharedData[t][e]=0)}ensureNodesMapped(){const t=e=>{void 0===e.globalElementIndex&&console.error(\\\"no element index\\\",e),this.indexToNodeMap[e.globalElementIndex]=e;for(const s of e.children)t(s)};t(this.data)}enableFrontendDesignProperties(){this.ignoreDesign=!1}addNodeToParent(t,e){if(\\\"svg\\\"!==t.type){const s=this.getNodeFromIndex(e);if(!s)return console.error(\\\"could not add node without parent\\\",e,t,Object.keys(this.indexToNodeMap)),void new Error(\\\"parent not found\\\");this.applyParentStyles(s,t),s.children.push(t)}}addNode(t){this.indexToNodeMap[t.globalElementIndex]=t}removeNode(t,e){delete this.indexToNodeMap[t.globalElementIndex];const s=e.children.indexOf(t);e.children.splice(s,1),this.cachedListSelections={},this.removePendingChanges(t)}applyParentStyles(t,e){for(const s in t.style)e.style[s]||(e.style[s]=t.style[s])}applyStyleToNodeAndChildren(t,e,s,r){if(t.style[e]=s,r(t,e),t.children)for(let i of t.children)this.applyStyleToNodeAndChildren(i,e,s,r)}applyCssToNodeAndChildren(t,e,s,r,i){if(\\\"*\\\"!==s||r?(t.css[e]||(t.css[e]={}),t.css[e][s]=r):delete t.css[e],i(t,s),t.children)for(let n of t.children)this.applyCssToNodeAndChildren(n,e,s,r,i)}getNodeFromIndex(t){return this.indexToNodeMap[t]}getNodeById(t){const e=Object.values(this.indexToNodeMap).filter(e=>e.id===t);return(!e||e.length>1)&&(n(\\\"multiple nodes with this id!\\\",Object.values(this.indexToNodeMap).filter(t=>t.id).map(t=>t.id),t),n(e.length,e)),e&&1===e.length?e[0]:null}get(t,e){return Array.isArray(e)?e.map(e=>this.getSingle(t,e)):this.getSingle(t,e)}getSingle(t,e){const s=this.useBufferCache?this.cachedBuffers:this.sharedData;if(s[e]&&s[e][t.globalElementIndex]){const i=s[e][t.globalElementIndex];return 56938516===i?0:i/r.BUFFER_PRECISION_FACTOR}return t[e]}hasChanges(){return this.changed}getQueue(){return this.queue}clearQueue(){this.queue={},this.changed=!1}cacheBuffers(){if(this.useBufferCache)for(let t in this.sharedData){this.cachedBuffers[t]||(this.cachedBuffers[t]={});for(let e=0;e<this.sharedData[t].length;e++)this.sharedData[t][e]&&(this.cachedBuffers[t][e]=this.sharedData[t][e])}}updatePropertiesFromQueue(t,e=(()=>{})){for(let s in t){if(!t.hasOwnProperty(s))continue;const i=s.substr(0,\\\"style;\\\".length);if(this.ignoreDesign&&(\\\"style;\\\"===i||-1!==r.IGNOREDESIGN_ATTRIBUTES.indexOf(s)))continue;let n;if(\\\"SharedArrayBuffer\\\"in self&&t[s]instanceof SharedArrayBuffer)this.sharedData[s]=new Int32Array(t[s]);else{n=t[s];for(let t in n){if(!n.hasOwnProperty(t))continue;const o=parseInt(t),a=this.getNodeFromIndex(o);if(!a){console.error(\\\"node not found at index\\\",o);continue}let l=n[t];if(\\\"style;\\\"===i){const t=s.substr(\\\"style;\\\".length);this.applyStyleToNodeAndChildren(a,t,l,e)}else if(\\\"css;\\\"===s.substr(0,4)){const[t,r]=s.substr(4).split(\\\";\\\");this.applyCssToNodeAndChildren(a,t,r,l,e)}else-1!==r.ROUNDED_ATTRS.indexOf(s)&&(\\\"string\\\"==typeof l&&(l=parseFloat(l)),l=Math.round(l)),a[s]=l,e(a,s)}}}this.cacheBuffers()}getVisNodeFromSelector(t){const e=t.lastIndexOf(\\\">\\\"),s=t.substr(0,e),r=t.substr(e+1),i=s?this.cachedListSelections[s]:null;let n=-1;const o=r.indexOf(\\\":nth-child(\\\");if(-1!==o&&(n=parseInt(r.substr(o+11)),i&&i[n]))return i[n];const a=[];if(this.findMatchingChildren(this.data,t,0,a),a&&1===a.length){const t=a[0];return-1!==n&&(this.cachedListSelections[s]||(this.cachedListSelections[s]={}),this.cachedListSelections[s][n]=t),t}return null}getVisNodesFromSelector(t,e){const s=[];return this.findMatchingChildren(t,e,0,s),s}findChildrenOfType(t,e,s){const r=t=>{for(const i of t.children)i.type===e&&s.push(i),0!==t.children.length&&r(i)};r(t)}filterNodesBySelector(t,e,s){return e.filter(e=>r.isCssRulePartialMatch(s,e,t))}findMatchingChildren(t,e,s,i,n=[]){if(!e&&\\\"\\\"!==e)throw console.error(t,e,s,i,n),Error(\\\"undefined selector\\\");let o=e.split(\\\">\\\").map(t=>t.trim()),a=o[s];if(0===s&&\\\"svg\\\"===a&&(a=o[++s],s===o.length))return i.push(t),void n.push(e);if(e.match(/^[a-z]+$/))return this.findChildrenOfType(t,e,i);for(let l=0;l<t.children.length;l++){let h=t.children[l],c=!1;r.isCssRulePartialMatch(a,h,t)&&(s===o.length-1?(i.push(h),n.push(e)):c=!0),h.children&&(c||o.length<2)&&s+1<o.length&&this.findMatchingChildren(h,e,s+1,i,n)}}static isCssRulePartialMatch(t,e,s){if(\\\":not(\\\"===t.substr(0,5)){const i=t.substr(0,t.length-1).substr(5);return!r.isCssRulePartialMatch(i,e,s)}if(\\\".\\\"===t[0]){const s=t.split(\\\".\\\");if(s.shift(),e.className){let t=!0;for(const r of s)-1===e.className.split(\\\" \\\").indexOf(r)&&(t=!1);return t}}else if(\\\"#\\\"===t[0]){if(t.substr(1)===e.id)return!0}else if(t.match(/^[a-z]+$/)){if(t===e.type)return!0}else{if(-1!==t.indexOf(\\\":nth-child(\\\")){let r=\\\"any\\\",i=t;\\\":\\\"!==t[0]&&(r=t.substr(0,t.indexOf(\\\":\\\")),i=t.substr(t.indexOf(\\\":\\\")));const n=parseInt(i.substr(\\\":nth-child(\\\".length));return s.children.indexOf(e)===n-1&&(\\\"any\\\"===r||e.type===r)}if(-1!==t.indexOf(\\\".\\\")){const s=t.indexOf(\\\".\\\"),r=t.substr(0,s),i=t.substr(s+1);if(r===e.type&&e.className&&-1!==e.className.split(\\\" \\\").indexOf(i))return!0}}return!1}}e.VdomManager=r,r.IGNOREDESIGN_ATTRIBUTES=[\\\"fill\\\",\\\"stroke\\\",\\\"opacity\\\"],r.BUFFER_PRECISION_FACTOR=10,r.ROUNDED_ATTRS=[\\\"cx\\\",\\\"cy\\\"];let i=0;function n(...t){i<400&&(i++,console.log(...t))}},function(t,e,s){\\\"use strict\\\";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,\\\"__esModule\\\",{value:!0});const i=r(s(3));e.default=class{constructor(t,e,s=!1,r=(()=>{})){this.vdom=t,this.canvas=e,this.forceSingle=s,this.onDrawn=r,this.parentValues={},this.lastFullSecond=0,this.countSinceLastFullSecond=0,this.circlesByColor={},this.rectsByColor={},this.drawTexts=[],this.drawImages=[],this.linesByColor={};const i=e.getContext(\\\"2d\\\");if(!i)throw new Error(\\\"could not create canvas context\\\");this.ctx=i,this.ctx.scale(this.vdom.data.scale,this.vdom.data.scale),this.ctx.save(),this.draw(),setTimeout(()=>{console.log(this.forceSingle,this.vdom.data),this.draw()},1e3)}draw(){const t=this.ctx;t.restore(),t.save(),t.clearRect(0,0,this.vdom.data.width,this.vdom.data.height),this.drawLine(null,\\\"start\\\"),this.drawCircle(null,\\\"start\\\"),this.drawRect(null,\\\"start\\\"),this.drawText(null,\\\"start\\\"),this.drawImage(null,\\\"start\\\"),this.drawNodeAndChildren(this.vdom.data,this.forceSingle),this.drawLine(null,\\\"end\\\"),this.drawCircle(null,\\\"end\\\"),this.drawRect(null,\\\"end\\\"),this.drawText(null,\\\"end\\\"),this.drawImage(null,\\\"end\\\"),this.onDrawn();const e=Math.round(performance.now()/1e3);e!==this.lastFullSecond&&(this.lastFullSecond=e,this.countSinceLastFullSecond=0),this.countSinceLastFullSecond++}drawNodeAndChildren(t,e,s){if(\\\"clippath\\\"===t.type&&!s)return;const r=this.ctx,i=Object.assign({},this.parentValues);s||r.save();this.applyTransform(t.transform);if((t.transform||s)&&(e=!0),t[\\\"clip-path\\\"])if(\\\"url(#\\\"===t[\\\"clip-path\\\"].substr(0,5)){const s=t[\\\"clip-path\\\"].substr(5,t[\\\"clip-path\\\"].length-6),i=this.vdom.getNodeById(s);if(e=!0,i){const t=new Path2D;this.drawNodeAndChildren(i,e,t),r.clip(t)}else;}else!function(...t){n<50&&(n++,console.error(...t))}(\\\"clip path format not supported:\\\",t[\\\"clip-path\\\"]);if(t.style.display&&\\\"none\\\"===t.style.display||(e?this.drawSingleNode(t,\\\"forcesingle\\\",s):this.drawSingleNode(t,\\\"normal\\\",s)),t.children){const r=this.getFillStyle(t,\\\"undefined\\\");\\\"undefined\\\"!==r&&(this.parentValues.fill=r);const i=this.getStrokeStyle(t,\\\"undefined\\\");\\\"undefined\\\"!==i&&(this.parentValues.stroke=i),this.parentValues.opacity=t.opacity;for(let r=0;r<t.children.length;r++)this.drawNodeAndChildren(t.children[r],e,s)}s||(r.restore(),this.parentValues=i)}drawSingleNode(t,e=\\\"normal\\\",s){const r=t.type,i=this[\\\"draw\\\"+r.substr(0,1).toUpperCase()+r.substr(1)];if(!i)return console.error(\\\"no draw function yet for \\\",r);i.call(this,t,e,s)}drawClippath(t){}drawSvg(){}drawTitle(){}drawG(){}drawCircle(t,e=\\\"normal\\\",s){if(\\\"normal\\\"===e){const e=this.getFillStyle(t,\\\"#000\\\")+\\\";\\\"+this.getStrokeStyle(t);this.circlesByColor[e]||(this.circlesByColor[e]=[]),this.circlesByColor[e].push(t)}if(\\\"start\\\"!==e){if(\\\"end\\\"!==e){if(\\\"forcesingle\\\"===e){let e=this.getFillStyle(t,\\\"#000\\\");const r=this.getStrokeStyle(t),i=this.vdom.get(t,\\\"cx\\\")||0,n=this.vdom.get(t,\\\"cy\\\")||0;this.ctx.beginPath(),this.ctx.fillStyle=e,this.ctx.strokeStyle=r,this.ctx.lineWidth=this.getStrokeWidth(t),this.ctx.moveTo(i+t.r,n),(s||this.ctx).arc(i,n,t.r,0,2*Math.PI),\\\"none\\\"===e||s||this.ctx.fill(),r&&\\\"none\\\"!==r&&!s&&this.ctx.stroke()}}else for(let t in this.circlesByColor)if(this.circlesByColor.hasOwnProperty(t)){const e=t.split(\\\";\\\"),s=e[0],r=e[1];this.ctx.fillStyle=s;let i=this.circlesByColor[t][0];const n=this.getStrokeWidth(i);this.ctx.lineWidth=void 0!==n?n:1,this.ctx.strokeStyle=r,this.ctx.beginPath();for(let e of this.circlesByColor[t]){const t=Math.round(this.vdom.get(e,\\\"cx\\\"))||0,s=Math.round(this.vdom.get(e,\\\"cy\\\"))||0,r=Math.round(this.vdom.get(e,\\\"r\\\"));this.ctx.save(),this.applyTransform(e.transform),this.ctx.moveTo(t+r,s),this.ctx.arc(t,s,r,0,2*Math.PI),this.ctx.restore()}\\\"none\\\"!==s&&this.ctx.fill(),r&&\\\"none\\\"!==r&&this.ctx.stroke()}}else this.circlesByColor={}}nodeUpdated(t,e){(\\\"*\\\"===e||e.includes(\\\"fill\\\")||e.includes(\\\"opacity\\\"))&&delete t[\\\"fill-cache\\\"],(\\\"*\\\"===e||e.includes(\\\"stroke\\\")||e.includes(\\\"opacity\\\"))&&(delete t[\\\"stroke-cache\\\"],delete t[\\\"strokewidth-cache\\\"])}getFillStyle(t,e=\\\"none\\\"){if(\\\"fill-cache\\\"in t)return t[\\\"fill-cache\\\"];let s=this.getAttributeStyleCss(t,\\\"fill\\\"),r=this.getAttributeStyleCss(t,\\\"opacity\\\")||1;r*=this.getAttributeStyleCss(t,\\\"fill-opacity\\\")||1;let n=\\\"\\\";return this.parentValues.fill&&(n=this.parentValues.fill),this.parentValues[\\\"style;fill\\\"]&&(n=this.parentValues[\\\"style;fill\\\"]),this.parentValues.fill||this.parentValues[\\\"style;fill\\\"]||(n=e),s=i.default.colorToRgba(s,r,n),t[\\\"fill-cache\\\"]=s,s}getAttributeStyleCss(t,e){if(t.style[e])return t.style[e];{let s=t[e],r=-1;for(const n in t.css)if(t.css[n][e]){const o=i.default.getCssRuleSpecificityNumber(n);o>r&&(s=t.css[n][e],r=o)}return s}}getStrokeStyle(t,e=\\\"none\\\"){if(\\\"stroke-cache\\\"in t)return t[\\\"stroke-cache\\\"];const s=this.getAttributeStyleCss(t,\\\"stroke\\\");let r=this.getAttributeStyleCss(t,\\\"opacity\\\")||1;return r*=this.getAttributeStyleCss(t,\\\"stroke-opacity\\\")||1,t[\\\"stroke-cache\\\"]=void 0!==s?i.default.colorToRgba(s,r):e,t[\\\"stroke-cache\\\"]}getStrokeWidth(t){if(\\\"strokewidth-cache\\\"in t)return t[\\\"strokewidth-cache\\\"];const e=this.getAttributeStyleCss(t,\\\"stroke-width\\\");return t[\\\"strokewidth-cache\\\"]=void 0===e?void 0:parseFloat(e),t[\\\"strokewidth-cache\\\"]}drawRect(t,e=\\\"normal\\\",s){if(\\\"normal\\\"===e){const e=this.getFillStyle(t,\\\"#000\\\")+\\\";\\\"+this.getStrokeStyle(t);this.rectsByColor[e]||(this.rectsByColor[e]=[]),this.rectsByColor[e].push(t)}if(\\\"start\\\"!==e){if(\\\"end\\\"!==e){if(\\\"forcesingle\\\"===e){let e=this.getFillStyle(t,\\\"#000\\\");const r=this.getStrokeStyle(t),i=this.vdom.get(t,\\\"x\\\")||0,n=this.vdom.get(t,\\\"y\\\")||0;e&&\\\"none\\\"!==e&&!s&&(this.ctx.fillStyle=e,this.ctx.fillRect(i,n,t.width,t.height)),s&&s.rect(i,n,t.width,t.height),\\\"none\\\"===r||s||(this.ctx.strokeStyle=r,this.ctx.beginPath(),this.ctx.rect(i,n,t.width,t.height),this.ctx.stroke())}}else for(let t in this.rectsByColor)if(this.rectsByColor.hasOwnProperty(t)){const e=t.split(\\\";\\\"),s=e[0],r=e[1];this.ctx.fillStyle=s;let i=this.rectsByColor[t][0];const n=this.getStrokeWidth(i);this.ctx.lineWidth=void 0!==n?n:1,this.ctx.strokeStyle=r,this.ctx.beginPath();for(let e of this.rectsByColor[t]){const t=Math.round(this.vdom.get(e,\\\"x\\\"))||0,s=Math.round(this.vdom.get(e,\\\"y\\\"))||0;this.ctx.save(),this.applyTransform(e.transform),this.ctx.moveTo(t,s),this.ctx.rect(t,s,e.width,e.height),this.ctx.restore()}\\\"none\\\"!==s&&this.ctx.fill(),r&&\\\"none\\\"!==r&&this.ctx.stroke()}}else this.rectsByColor={}}drawText(t,e=\\\"normal\\\",s=!1){const r=t=>{if(\\\"\\\"===t.text)return;let e=this.getAttributeStyleCss(t,\\\"font-family\\\")||\\\"Times New Roman\\\",s=\\\"16px\\\";const r=this.getAttributeStyleCss(t,\\\"font-size\\\");r&&(s=i.default.convertSizeToPx(r)+\\\"px\\\");let n=this.getAttributeStyleCss(t,\\\"font\\\");n||(n=s+\\\" \\\"+e);let o=this.getAttributeStyleCss(t,\\\"text-anchor\\\");o&&(\\\"middle\\\"===o&&(o=\\\"center\\\"),this.ctx.textAlign=o);let a=this.getAttributeStyleCss(t,\\\"fill\\\");a||(a=\\\"#000\\\"),this.ctx.font=n,this.ctx.fillStyle=a;let l=this.vdom.get(t,\\\"x\\\")||0,h=this.vdom.get(t,\\\"y\\\")||0,c=i.default.convertSizeToPx(t.dx,!1)||0,d=i.default.convertSizeToPx(t.dy,!1)||0;this.ctx.fillText(t.text,l+c,h+d)};if(\\\"start\\\"!==e)if(\\\"normal\\\"!==e){if(\\\"forcesingle\\\"===e)return r(t);if(\\\"end\\\"!==e);else for(const t of this.drawTexts)r(t)}else this.drawTexts.push(t);else this.drawTexts=[]}drawImage(t,e=\\\"normal\\\"){const s=t=>{if(\\\"\\\"===t.href)return;let e=t.fill?t.fill:t.style.fill;e||(e=\\\"#000\\\"),this.ctx.fillStyle=e;let s=this.vdom.get(t,\\\"x\\\")||0,r=this.vdom.get(t,\\\"y\\\")||0,i=t.width||0,n=t.height||0;if(t.image)try{this.ctx.drawImage(t.image,s,r,i,n)}catch(t){console.log(t)}};if(\\\"start\\\"!==e)if(\\\"normal\\\"!==e){if(\\\"forcesingle\\\"===e)return s(t);if(\\\"end\\\"!==e);else for(const t of this.drawImages)s(t)}else this.drawImages.push(t);else this.drawImages=[]}drawPath(t,e=\\\"normal\\\",s){if(\\\"normal\\\"!==e&&\\\"forcesingle\\\"!==e)return;const r=this.getFillStyle(t,\\\"#000\\\"),i=this.getStrokeStyle(t),n=this.getStrokeWidth(t);let o=new Path2D(t.d);if(this.ctx.fillStyle=r,void 0!==i&&\\\"none\\\"!==i){void 0!==n&&(this.ctx.lineWidth=n),this.ctx.strokeStyle=i;const e=this.getAttributeStyleCss(t,\\\"stroke-linejoin\\\");e&&(\\\"bevel\\\"===e||\\\"round\\\"===e||\\\"miter\\\"===e?this.ctx.lineJoin=e:console.error(\\\"unknown line join value:\\\",e)),s||this.ctx.stroke(o)}r&&\\\"none\\\"!==r&&!s&&this.ctx.fill(o),s&&s.addPath(o)}drawTspan(t,e=\\\"normal\\\"){if(\\\"normal\\\"!==e&&\\\"forcesingle\\\"!==e)return;this.ctx.font=\\\"10px Arial\\\",this.ctx.fillStyle=\\\"#000000\\\";const s=\\\"middle\\\"===t.style.textAnchor?\\\"center\\\":t.style.textAnchor;this.ctx.textAlign=s,this.ctx.fillText(t.text,this.vdom.get(t,\\\"x\\\"),this.vdom.get(t,\\\"y\\\"))}drawTextpath(t){console.warn(\\\"no draw function yet for textpath\\\")}drawLine(t,e=\\\"normal\\\"){if(this.vdom.data.scale,\\\"normal\\\"===e){const e=this.getStrokeStyle(t),s=this.getStrokeWidth(t);if(\\\"none\\\"===e||0===s)return;const r=`${e};${s}`;this.linesByColor[r]||(this.linesByColor[r]=[]),this.linesByColor[r].push(t)}if(\\\"start\\\"!==e){if(\\\"end\\\"!==e){if(\\\"forcesingle\\\"===e){this.ctx.beginPath();const[e,s,r,i]=this.vdom.get(t,[\\\"x1\\\",\\\"x2\\\",\\\"y1\\\",\\\"y2\\\"]).map(t=>Math.round(t)||0);this.ctx.moveTo(e,r),this.ctx.lineTo(s,i),this.ctx.strokeStyle=this.getStrokeStyle(t),this.ctx.lineWidth=this.getStrokeWidth(t),this.ctx.stroke()}}else for(let t in this.linesByColor)if(this.linesByColor.hasOwnProperty(t)){const e=t.split(\\\";\\\"),s=e[0],r=e[1];this.ctx.strokeStyle=s,this.ctx.lineWidth=parseFloat(r),this.ctx.beginPath();for(let e of this.linesByColor[t]){e.transform&&(this.ctx.save(),this.applyTransform(e.transform));const[t,s,r,i]=this.vdom.get(e,[\\\"x1\\\",\\\"x2\\\",\\\"y1\\\",\\\"y2\\\"]).map(t=>Math.round(t)||0);this.ctx.moveTo(t,r),this.ctx.lineTo(s,i),e.transform&&this.ctx.restore()}this.ctx.stroke()}}else this.linesByColor={}}drawDefs(t){}drawMarker(t){}applyTransform(t){const e=t?i.default.parseTransform(t):null;if(e){e.rotateLast||this.ctx.rotate(e.rotate*Math.PI/180);const t=e.translateBeforeScale?e.translateX:e.translateX*e.scaleX,s=e.translateBeforeScale?e.translateY:e.translateY*e.scaleY;return this.ctx.transform(e.scaleX,0,0,e.scaleY,t,s),e.rotateLast&&this.ctx.rotate(e.rotate*Math.PI/180),!0}return!1}};let n=0},function(t,e,s){\\\"use strict\\\";Object.defineProperty(e,\\\"__esModule\\\",{value:!0});class r{static parseTransform(t){const e={translateX:0,translateY:0,scaleX:1,scaleY:1,rotate:0,translateBeforeScale:!1,rotateLast:!1};if(t){if(\\\"string\\\"!=typeof t)return e.scaleX=t.k,e.scaleY=t.k,e.translateX=t.x,e.translateY=t.y,e.translateBeforeScale=!0,e;let s=t;s=s.replace(/ /g,\\\"\\\");const r=/\\\\s*translate\\\\(([-0-9.]+),([-0-9.]+)\\\\)/.exec(s);r&&(e.translateX=parseFloat(r[1]),e.translateY=parseFloat(r[2]));const i=/\\\\s*scale\\\\(([-0-9.]+)(,[-0-9.]+)?\\\\)/.exec(s);i&&(e.scaleX=parseFloat(i[1]),e.scaleY=i[2]?parseFloat(i[2].substr(1)):parseFloat(i[1]));const n=/\\\\s*rotate\\\\(([-0-9.]+)\\\\)/.exec(s);n&&(e.rotate=parseFloat(n[1])),/\\\\s*translate\\\\(([-0-9.]+),([-0-9.]+)\\\\)scale\\\\(([-0-9.,]+)\\\\)/.exec(s)&&(e.translateBeforeScale=!0),/\\\\s*rotate\\\\(([-0-9.,]+)\\\\)$/.exec(s)&&(e.rotateLast=!0);const o=/\\\\s*matrix\\\\(([-0-9.]+),([-0-9.]+),([-0-9.]+),([-0-9.]+),([-0-9.]+),([-0-9.]+)\\\\)/.exec(s);o&&(e.scaleX=parseFloat(o[1]),e.scaleY=parseFloat(o[4]),e.translateX=parseFloat(o[5]),e.translateY=parseFloat(o[6]))}return e}static addTransforms(t,e){return{translateX:t.translateX+e.translateX,translateY:t.translateY+e.translateY,scaleX:t.scaleX*e.scaleX,scaleY:t.scaleY*e.scaleY,rotate:t.rotate+e.rotate,translateBeforeScale:!1,rotateLast:!1}}static convertSizeToPx(t,e=!0){const s=e?14:void 0;return void 0===t?s:\\\"number\\\"==typeof t?t:\\\"em\\\"===t.substr(-2)?Math.round(12*parseFloat(t)):\\\"px\\\"===t.substr(-2)?parseInt(t):t.match(/^[0-9]+$/)?parseInt(t):(console.warn(\\\"size in unsupported format: \\\",t),s)}static colorToRgba(t,e=1,s=\\\"none\\\"){if(\\\"none\\\"===t)return t;t||(t=s);const i=`${t}-${e}`;if(r.rgbaCache[i])return r.rgbaCache[i];if(t=r.CssNamedColorToHex(t),1===e&&\\\"string\\\"==typeof t)return r.rgbaCache[i]=t,t;let n;if(\\\"string\\\"==typeof t&&\\\"#\\\"===t[0]){let s;if(!/^#([A-Fa-f0-9]{3}){1,2}$/.test(t))throw new Error(\\\"Bad Hex\\\");s=t.substring(1),3==s.length&&(s=s[0]+s[0]+s[1]+s[1]+s[2]+s[2]),s=\\\"0x\\\"+s,n=\\\"rgba(\\\"+[s>>16&255,s>>8&255,255&s].join(\\\",\\\")+\\\",\\\"+e+\\\")\\\"}else if(\\\"object\\\"==typeof t){if(\\\"r\\\"in t)n=\\\"rgba(\\\"+t.r+\\\",\\\"+t.g+\\\",\\\"+t.b+\\\",\\\"+e+\\\")\\\";else if(\\\"h\\\"in t){const s=r.hslToRgb(t.h/360,t.s,t.l);n=\\\"rgba(\\\"+s.r+\\\",\\\"+s.g+\\\",\\\"+s.b+\\\",\\\"+e+\\\")\\\"}}else\\\"rgb(\\\"===t.substr(0,4)&&(n=t.substr(0,t.length-1).replace(\\\"rgb\\\",\\\"rgba\\\")+\\\", \\\"+e+\\\")\\\");return r.rgbaCache[i]=n,n}static hslToRgb(t,e,s){var r,i,n;if(0==e)r=i=n=s;else{var o=function(t,e,s){return s<0&&(s+=1),s>1&&(s-=1),s<1/6?t+6*(e-t)*s:s<.5?e:s<2/3?t+(e-t)*(2/3-s)*6:t},a=s<.5?s*(1+e):s+e-s*e,l=2*s-a;r=o(l,a,t+1/3),i=o(l,a,t),n=o(l,a,t-1/3)}return{r:Math.round(255*r),g:Math.round(255*i),b:Math.round(255*n)}}static CssNamedColorToHex(t){return\\\"string\\\"==typeof t&&i[t.toUpperCase()]?i[t.toUpperCase()]:t}static getCssRuleSpecificityNumber(t){let e=0;t=t.replace(/ >/g,\\\">\\\").replace(/> /g,\\\">\\\");const s=[].concat.apply([],t.split(\\\" \\\").map(t=>t.split(\\\">\\\")));for(const t of s){e+=100;const s=t[0];if(\\\"#\\\"===s)e+=1e3;else if(\\\".\\\"===s){const s=t.split(\\\".\\\").length-1;e+=Math.min(900,100*s)}}return e}}e.default=r,r.rgbaCache={};const i={ALICEBLUE:\\\"#F0F8FF\\\",ANTIQUEWHITE:\\\"#FAEBD7\\\",AQUA:\\\"#00FFFF\\\",AQUAMARINE:\\\"#7FFFD4\\\",AZURE:\\\"#F0FFFF\\\",BEIGE:\\\"#F5F5DC\\\",BISQUE:\\\"#FFE4C4\\\",BLACK:\\\"#000000\\\",BLANCHEDALMOND:\\\"#FFEBCD\\\",BLUE:\\\"#0000FF\\\",BLUEVIOLET:\\\"#8A2BE2\\\",BROWN:\\\"#A52A2A\\\",BURLYWOOD:\\\"#DEB887\\\",CADETBLUE:\\\"#5F9EA0\\\",CHARTREUSE:\\\"#7FFF00\\\",CHOCOLATE:\\\"#D2691E\\\",CORAL:\\\"#FF7F50\\\",CORNFLOWERBLUE:\\\"#6495ED\\\",CORNSILK:\\\"#FFF8DC\\\",CRIMSON:\\\"#DC143C\\\",CYAN:\\\"#00FFFF\\\",DARKBLUE:\\\"#00008B\\\",DARKCYAN:\\\"#008B8B\\\",DARKGOLDENROD:\\\"#B8860B\\\",DARKGRAY:\\\"#A9A9A9\\\",DARKGREY:\\\"#A9A9A9\\\",DARKGREEN:\\\"#006400\\\",DARKKHAKI:\\\"#BDB76B\\\",DARKMAGENTA:\\\"#8B008B\\\",DARKOLIVEGREEN:\\\"#556B2F\\\",DARKORANGE:\\\"#FF8C00\\\",DARKORCHID:\\\"#9932CC\\\",DARKRED:\\\"#8B0000\\\",DARKSALMON:\\\"#E9967A\\\",DARKSEAGREEN:\\\"#8FBC8F\\\",DARKSLATEBLUE:\\\"#483D8B\\\",DARKSLATEGRAY:\\\"#2F4F4F\\\",DARKSLATEGREY:\\\"#2F4F4F\\\",DARKTURQUOISE:\\\"#00CED1\\\",DARKVIOLET:\\\"#9400D3\\\",DEEPPINK:\\\"#FF1493\\\",DEEPSKYBLUE:\\\"#00BFFF\\\",DIMGRAY:\\\"#696969\\\",DIMGREY:\\\"#696969\\\",DODGERBLUE:\\\"#1E90FF\\\",FIREBRICK:\\\"#B22222\\\",FLORALWHITE:\\\"#FFFAF0\\\",FORESTGREEN:\\\"#228B22\\\",FUCHSIA:\\\"#FF00FF\\\",GAINSBORO:\\\"#DCDCDC\\\",GHOSTWHITE:\\\"#F8F8FF\\\",GOLD:\\\"#FFD700\\\",GOLDENROD:\\\"#DAA520\\\",GRAY:\\\"#808080\\\",GREY:\\\"#808080\\\",GREEN:\\\"#008000\\\",GREENYELLOW:\\\"#ADFF2F\\\",HONEYDEW:\\\"#F0FFF0\\\",HOTPINK:\\\"#FF69B4\\\",INDIANRED:\\\"#CD5C5C\\\",INDIGO:\\\"#4B0082\\\",IVORY:\\\"#FFFFF0\\\",KHAKI:\\\"#F0E68C\\\",LAVENDER:\\\"#E6E6FA\\\",LAVENDERBLUSH:\\\"#FFF0F5\\\",LAWNGREEN:\\\"#7CFC00\\\",LEMONCHIFFON:\\\"#FFFACD\\\",LIGHTBLUE:\\\"#ADD8E6\\\",LIGHTCORAL:\\\"#F08080\\\",LIGHTCYAN:\\\"#E0FFFF\\\",LIGHTGOLDENRODYELLOW:\\\"#FAFAD2\\\",LIGHTGRAY:\\\"#D3D3D3\\\",LIGHTGREY:\\\"#D3D3D3\\\",LIGHTGREEN:\\\"#90EE90\\\",LIGHTPINK:\\\"#FFB6C1\\\",LIGHTSALMON:\\\"#FFA07A\\\",LIGHTSEAGREEN:\\\"#20B2AA\\\",LIGHTSKYBLUE:\\\"#87CEFA\\\",LIGHTSLATEGRAY:\\\"#778899\\\",LIGHTSLATEGREY:\\\"#778899\\\",LIGHTSTEELBLUE:\\\"#B0C4DE\\\",LIGHTYELLOW:\\\"#FFFFE0\\\",LIME:\\\"#00FF00\\\",LIMEGREEN:\\\"#32CD32\\\",LINEN:\\\"#FAF0E6\\\",MAGENTA:\\\"#FF00FF\\\",MAROON:\\\"#800000\\\",MEDIUMAQUAMARINE:\\\"#66CDAA\\\",MEDIUMBLUE:\\\"#0000CD\\\",MEDIUMORCHID:\\\"#BA55D3\\\",MEDIUMPURPLE:\\\"#9370DB\\\",MEDIUMSEAGREEN:\\\"#3CB371\\\",MEDIUMSLATEBLUE:\\\"#7B68EE\\\",MEDIUMSPRINGGREEN:\\\"#00FA9A\\\",MEDIUMTURQUOISE:\\\"#48D1CC\\\",MEDIUMVIOLETRED:\\\"#C71585\\\",MIDNIGHTBLUE:\\\"#191970\\\",MINTCREAM:\\\"#F5FFFA\\\",MISTYROSE:\\\"#FFE4E1\\\",MOCCASIN:\\\"#FFE4B5\\\",NAVAJOWHITE:\\\"#FFDEAD\\\",NAVY:\\\"#000080\\\",OLDLACE:\\\"#FDF5E6\\\",OLIVE:\\\"#808000\\\",OLIVEDRAB:\\\"#6B8E23\\\",ORANGE:\\\"#FFA500\\\",ORANGERED:\\\"#FF4500\\\",ORCHID:\\\"#DA70D6\\\",PALEGOLDENROD:\\\"#EEE8AA\\\",PALEGREEN:\\\"#98FB98\\\",PALETURQUOISE:\\\"#AFEEEE\\\",PALEVIOLETRED:\\\"#DB7093\\\",PAPAYAWHIP:\\\"#FFEFD5\\\",PEACHPUFF:\\\"#FFDAB9\\\",PERU:\\\"#CD853F\\\",PINK:\\\"#FFC0CB\\\",PLUM:\\\"#DDA0DD\\\",POWDERBLUE:\\\"#B0E0E6\\\",PURPLE:\\\"#800080\\\",REBECCAPURPLE:\\\"#663399\\\",RED:\\\"#FF0000\\\",ROSYBROWN:\\\"#BC8F8F\\\",ROYALBLUE:\\\"#4169E1\\\",SADDLEBROWN:\\\"#8B4513\\\",SALMON:\\\"#FA8072\\\",SANDYBROWN:\\\"#F4A460\\\",SEAGREEN:\\\"#2E8B57\\\",SEASHELL:\\\"#FFF5EE\\\",SIENNA:\\\"#A0522D\\\",SILVER:\\\"#C0C0C0\\\",SKYBLUE:\\\"#87CEEB\\\",SLATEBLUE:\\\"#6A5ACD\\\",SLATEGRAY:\\\"#708090\\\",SLATEGREY:\\\"#708090\\\",SNOW:\\\"#FFFAFA\\\",SPRINGGREEN:\\\"#00FF7F\\\",STEELBLUE:\\\"#4682B4\\\",TAN:\\\"#D2B48C\\\",TEAL:\\\"#008080\\\",THISTLE:\\\"#D8BFD8\\\",TOMATO:\\\"#FF6347\\\",TURQUOISE:\\\"#40E0D0\\\",VIOLET:\\\"#EE82EE\\\",WHEAT:\\\"#F5DEB3\\\",WHITE:\\\"#FFFFFF\\\",WHITESMOKE:\\\"#F5F5F5\\\",YELLOW:\\\"#FFFF00\\\",YELLOWGREEN:\\\"#9ACD32\\\"}}]);\\n//# sourceMappingURL=ef807c20923205793074.worker.js.map\", __webpack_public_path__ + \"ef807c20923205793074.worker.js\");\n};","'use strict';\n\n// http://stackoverflow.com/questions/10343913/how-to-create-a-web-worker-from-a-string\n\nvar URL = window.URL || window.webkitURL;\n\nmodule.exports = function (content, url) {\n  try {\n    try {\n      var blob;\n\n      try {\n        // BlobBuilder = Deprecated, but widely implemented\n        var BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;\n\n        blob = new BlobBuilder();\n\n        blob.append(content);\n\n        blob = blob.getBlob();\n      } catch (e) {\n        // The proposed API\n        blob = new Blob([content]);\n      }\n\n      return new Worker(URL.createObjectURL(blob));\n    } catch (e) {\n      return new Worker('data:application/javascript,' + encodeURIComponent(content));\n    }\n  } catch (e) {\n    if (!url) {\n      throw Error('Inline worker is not supported');\n    }\n\n    return new Worker(url);\n  }\n};"],"sourceRoot":""}