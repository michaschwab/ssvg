{"version":3,"sources":["webpack://SSVG/webpack/universalModuleDefinition","webpack://SSVG/webpack/bootstrap","webpack://SSVG/./canvasworker/drawingUtils.ts","webpack://SSVG/./util/vdom/set-property-queue.ts","webpack://SSVG/./frontend/exporter.ts","webpack://SSVG/./frontend/ssvg.ts","webpack://SSVG/./frontend/domhandler.ts","webpack://SSVG/./util/vdom/vdom-manager.ts","webpack://SSVG/./canvasworker/canvasrenderer.ts","webpack://SSVG/./canvasworker/index.ts","webpack://SSVG/./canvasworker/canvasworker.ts","webpack://SSVG/./node_modules/worker-loader/dist/workers/InlineWorker.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","DrawingUtils","transform","transformObject","translateX","translateY","scaleX","scaleY","rotate","translateBeforeScale","transformString","replace","translate","exec","parseFloat","scale","substr","matrix","transformA","transformB","size","fallback","defaultValue","undefined","Math","round","parseInt","match","console","warn","color","opacity","defaultColor","CssNamedColorToHex","test","substring","length","join","Error","g","b","rgb","hslToRgb","h","hue2rgb","q","COLOR_HEXES","toUpperCase","selector","specificity","parts","concat","apply","split","map","part","start","countClasses","min","ALICEBLUE","ANTIQUEWHITE","AQUA","AQUAMARINE","AZURE","BEIGE","BISQUE","BLACK","BLANCHEDALMOND","BLUE","BLUEVIOLET","BROWN","BURLYWOOD","CADETBLUE","CHARTREUSE","CHOCOLATE","CORAL","CORNFLOWERBLUE","CORNSILK","CRIMSON","CYAN","DARKBLUE","DARKCYAN","DARKGOLDENROD","DARKGRAY","DARKGREY","DARKGREEN","DARKKHAKI","DARKMAGENTA","DARKOLIVEGREEN","DARKORANGE","DARKORCHID","DARKRED","DARKSALMON","DARKSEAGREEN","DARKSLATEBLUE","DARKSLATEGRAY","DARKSLATEGREY","DARKTURQUOISE","DARKVIOLET","DEEPPINK","DEEPSKYBLUE","DIMGRAY","DIMGREY","DODGERBLUE","FIREBRICK","FLORALWHITE","FORESTGREEN","FUCHSIA","GAINSBORO","GHOSTWHITE","GOLD","GOLDENROD","GRAY","GREY","GREEN","GREENYELLOW","HONEYDEW","HOTPINK","INDIANRED","INDIGO","IVORY","KHAKI","LAVENDER","LAVENDERBLUSH","LAWNGREEN","LEMONCHIFFON","LIGHTBLUE","LIGHTCORAL","LIGHTCYAN","LIGHTGOLDENRODYELLOW","LIGHTGRAY","LIGHTGREY","LIGHTGREEN","LIGHTPINK","LIGHTSALMON","LIGHTSEAGREEN","LIGHTSKYBLUE","LIGHTSLATEGRAY","LIGHTSLATEGREY","LIGHTSTEELBLUE","LIGHTYELLOW","LIME","LIMEGREEN","LINEN","MAGENTA","MAROON","MEDIUMAQUAMARINE","MEDIUMBLUE","MEDIUMORCHID","MEDIUMPURPLE","MEDIUMSEAGREEN","MEDIUMSLATEBLUE","MEDIUMSPRINGGREEN","MEDIUMTURQUOISE","MEDIUMVIOLETRED","MIDNIGHTBLUE","MINTCREAM","MISTYROSE","MOCCASIN","NAVAJOWHITE","NAVY","OLDLACE","OLIVE","OLIVEDRAB","ORANGE","ORANGERED","ORCHID","PALEGOLDENROD","PALEGREEN","PALETURQUOISE","PALEVIOLETRED","PAPAYAWHIP","PEACHPUFF","PERU","PINK","PLUM","POWDERBLUE","PURPLE","REBECCAPURPLE","RED","ROSYBROWN","ROYALBLUE","SADDLEBROWN","SALMON","SANDYBROWN","SEAGREEN","SEASHELL","SIENNA","SILVER","SKYBLUE","SLATEBLUE","SLATEGRAY","SLATEGREY","SNOW","SPRINGGREEN","STEELBLUE","TAN","TEAL","THISTLE","TOMATO","TURQUOISE","VIOLET","WHEAT","WHITE","WHITESMOKE","YELLOW","YELLOWGREEN","SetPropertyQueue","data","useSharedArrayFor","attrName","useBuffer","numNodes","this","indexOf","shared","newLength","newByteLength","Int32Array","BYTES_PER_ELEMENT","byteLength","log","buffer","SharedArrayBuffer","values","oldVals","raw","forEach","index","BUFFER_PRECISION_FACTOR","element","error","storage","e","node","SSVG","options","unassignedNodes","interactionSelections","svgAssignedAndSizeSet","lastTenCanvasDrawTimes","enterExitQueue","safeMode","useWorker","getFps","maxPixelRatio","canvas","document","createElement","worker","onmessage","msg","logDrawn","updateCanvas","raf","updateFps","requestAnimationFrame","captureD3On","svg","setupElementsIfSvgExists","addEventListener","propagateMouseEvent","propagateTouchEvent","lastHovered","hoveredElement","dispatchEvent","MouseEvent","duplicateTouchEvent","propagateWheelEvent","replaceNativeRemoveChild","replaceNativeAttribute","replaceNativePathFunctions","replaceNativeCreateElement","replaceNativeAppendChild","replaceD3Attr","replaceNativeSelect","replaceNativeGetComputedStyle","replaceD3Select","replaceD3Remove","setTimeout","vdom","svgEl","getElementsByTagName","urlConnector","location","href","svgSwitchUrl","svgSwitchComment","createComment","parent","parentElement","nextSibling","next","insertBefore","appendChild","domHandler","getVDom","setCanvasSize","useAttrQueue","queue","keys","sendUpdateToWorker","renderer","updatePropertiesFromQueue","draw","width","height","devicePixelRatio","style","offscreen","transferControlToOffscreen","sendToWorker","cmd","visData","ensureNodesMapped","isWithinSvg","parentEl","parentNode","d3","originalOn","selection","on","me","el","_parents","children","push","arguments","getReplacement","original","_groups","getVisNode","childElements","getVisNodesFromSelector","getElementFromNode","returnValue","childNode","childEl","selectAll","select","origFilter","filter","selectorString","elements","firstElement","getNodeFromElement","nodes","selectors","sel","trim","filteredNodes","matchingNodes","filterNodesBySelector","filteredElements","origGetComputedStyle","getComputedStyle","getPropertyValue","propertyName","origQuerySelector","Element","querySelector","childNodes","globalElementIndex","originalFct","prefix","els","returnVal","getAttributeFromSelector","getElementSelector","getVisNodeFromSelector","child","queueSetAttributeOnElement","queueSetAttributeOnSelection","origSelectionAttr","attr","origSelectionStyle","originalClassed","classed","className","enableFrontendDesignProperties","indexOfParent","childIndex","parentSelector","getParentNodeFromSelector","prevClassNames","evaluatedValue","__data__","newClassNames","originalTransition","transition","originalText","text","newRemove","getNewRemoveChild","d3Remove","updateChildSelectors","remove","origCreate","createElementNS","newArgs","Array","from","getNewAppendChild","childElement","nodesToElements","oldSelector","combineElementSelectors","type","updateNodeSelector","origRemoveChild","skipUpdateSelectors","writable","parentGlobalIndex","removeNodeFromParent","removeChild","origAppend","appended","el2","keepChildren","getNodeDataFromEl","setProperty","styleProp","removeProperty","linkNodeToElement","addNodeToParent","parentNodeIndex","addNode","splice","origAppendChild","newAppend","newChild","refChild","origGetTotalLength","SVGPathElement","getTotalLength","getAttribute","origSetAttribute","origSetAttr","setAttribute","origSetAttrNS","setAttributeNS","origGetAttr","evt","propagateEvent","createEvent","initEvent","prop","touches","touch","identifier","pageX","pageY","clientX","clientY","WheelEvent","new_event","triggeredElement","interactionSel","j","vdomNode","x","y","getMousePosition","nodeAtPosition","svgChildEl","event","pos","visNode","cx","cy","parseTransform","sqrt","pow","elX","elY","centerX","centerY","distanceX","abs","distanceY","getTotalTransformation","matchAny","Date","now","shift","timeForTenDrawsMs","fps","enterExit","update","postMessage","CSS_STYLES","ignoreDesign","setAttrQueue","nodesToRestyle","logged","VdomManager","display","addChildNodesToVisData","safeLog","ensureInitialized","set","fetch","origin","then","resp","blob","createImageBitmap","bitmap","styleName","useSharedArray","self","ensureElementIndex","cb","applyStyles","getData","clearData","getRoundedAttr","val","tagName","toLowerCase","id","fill","x1","x2","y1","y2","stroke","textContent","styleSpecificity","kebabCase","obj","propNames","getOwnPropertyNames","propName","clean","styleSheets","sheet","rules","cssRules","rule","selectorText","applyRuleToMatchingNodes","newSelector","selectorPartsLooseStrict","parentsOfInterest","nodeToBeStyled","getNodeParent","getCssRuleSpecificityNumber","setStyle","longName","longSpecName","setValue","checkNode","currentNode","looseIndex","strictIndex","selPart","isCssRulePartialMatch","getNodeSelector","removedClass","removeRuleStylesFromNode","colorToRgba","removeNode","removePendingChanges","childEls","localName","elementType","elementIndex","getParentNode","parents","pop","totalTransform","addTransforms","safeLogCount","logContents","sharedData","indexToNodeMap","cachedListSelections","addToMap","nodeData","getNodeFromIndex","applyParentStyles","JSON","stringify","styleValue","applyStyleToNodeAndChildren","attrNameStart","ATTRIBUTES_NOT_IGNORED_WITH_IGNOREDESIGN","specificityAttrName","matchingSpecificity","updateDeducedStyles","ROUNDED_ATTRS","strokeOpacity","lastSplitPos","lastIndexOf","selectorWithoutLast","lastPart","parentSel","nthChildPosition","selectedNodes","findMatchingChildren","addDirectChildrenIfMatch","matchIndex","selectedNodeSelectors","selParts","findChildrenOfType","matching","cssRuleSelectorPart","newSelPart","searchClassNames","allTrue","searchClassName","indexPart","targetIndex","cutoff","typeName","forceSingle","onDrawn","lastFullSecond","countSinceLastFullSecond","circlesByColor","rectsByColor","drawTexts","drawImages","linesByColor","ctx","getContext","save","restore","clearRect","drawLine","drawCircle","drawRect","drawText","drawImage","drawNodeAndChildren","fullSecond","performance","elData","applyTransform","drawSingleNode","drawFct","handle","getFillStyle","getStrokeStyle","beginPath","fillStyle","strokeStyle","lineWidth","getStrokeWidth","arc","PI","fillAndStrokeColor","fillColor","strokeColor","sampleData","moveTo","fillOpacity","fillOpacityStyle","fillRect","rect","drawSingle","fontFamily","fontSize","convertSizeToPx","font","align","textAlign","dx","dy","fillText","image","strokeWidth","Path2D","lineJoin","textAnchor","lineTo","CanvasWorkerImporter","URL","webkitURL","content","url","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","append","getBlob","Blob","Worker","createObjectURL","encodeURIComponent"],"mappings":"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","file":"ssvg.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SSVG\"] = factory();\n\telse\n\t\troot[\"SSVG\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","export type Transformation = {\n    translateX: number,\n    translateY: number,\n    scaleX: number,\n    scaleY: number,\n    rotate: number,\n    translateBeforeScale: boolean\n}\n\nexport default class DrawingUtils {\n    static parseTransform(transform: string|{}): Transformation {\n        const transformObject = {translateX: 0, translateY: 0, scaleX: 1, scaleY: 1, rotate: 0, translateBeforeScale: false};\n        \n        if (transform) {\n            if(typeof transform !== \"string\") {\n                transformObject.scaleX = transform['k'];\n                transformObject.scaleY = transform['k'];\n                transformObject.translateX = transform['x'];\n                transformObject.translateY = transform['y'];\n                return transformObject;\n            }\n            let transformString = <string> transform;\n            transformString = transformString.replace(/ /g, '');\n            \n            //let translate  = /translate\\((\\d+),(\\d+)\\)/.exec(transform);\n            const translate = /\\s*translate\\(([-0-9.]+),([-0-9.]+)\\)/.exec(transformString);\n            if (translate) {\n                transformObject.translateX = parseFloat(translate[1]);\n                transformObject.translateY = parseFloat(translate[2]);\n            }\n            else {\n                //console.error('no translate found', transform);\n            }\n            \n            const scale = /\\s*scale\\(([-0-9.]+)(,[-0-9.]+)?\\)/.exec(transformString);\n            if (scale) {\n                transformObject.scaleX = parseFloat(scale[1]);\n                transformObject.scaleY = scale[2] ? parseFloat(scale[2].substr(1)) : parseFloat(scale[1]);\n            }\n            else {\n                //console.error('no scale found', transform);\n            }\n            \n            const rotate = /\\s*rotate\\(([-0-9.]+)\\)/.exec(transformString);\n            if (rotate) {\n                transformObject.rotate = parseFloat(rotate[1]);\n            }\n            else {\n                //console.error('no rotate found', transform);\n            }\n            \n            const translateScale = /\\s*translate\\(([-0-9.]+),([-0-9.]+)\\)scale\\(([-0-9.,]+)\\)/.exec(transformString);\n            if (translateScale) {\n                transformObject.translateBeforeScale = true;\n            }\n            \n            const matrix = /\\s*matrix\\(([-0-9.]+),([-0-9.]+),([-0-9.]+),([-0-9.]+),([-0-9.]+),([-0-9.]+)\\)/.exec(transformString);\n            if(matrix) {\n                transformObject.scaleX = parseFloat(matrix[1]);\n                // 2 is horizontal skewing\n                // 3 is vertical skewing\n                transformObject.scaleY = parseFloat(matrix[4]);\n                transformObject.translateX = parseFloat(matrix[5]);\n                transformObject.translateY = parseFloat(matrix[6]);\n            }\n        }\n        \n        return transformObject;\n    }\n\n    static addTransforms(transformA: Transformation, transformB: Transformation): Transformation {\n        return {\n            translateX: transformA.translateX + transformB.translateX,\n            translateY: transformA.translateY + transformB.translateY,\n            scaleX: transformA.scaleX * transformB.scaleX,\n            scaleY: transformA.scaleY * transformB.scaleY,\n            rotate: transformA.rotate + transformB.rotate,\n            translateBeforeScale: false\n        };\n        //TODO: consider translateBeforeScale\n    }\n\n    static convertSizeToPx(size: string|number, fallback = true): number|undefined {\n        const defaultValue = fallback ? 14 : undefined;\n        if(size === undefined) {\n            return defaultValue;\n        }\n        if(typeof size === \"number\") {\n            return size;\n        }\n        if(size.substr(-2) === 'em') {\n            return Math.round(parseFloat(size) * 12);\n        }\n        if(size.substr(-2) === 'px') {\n            return parseInt(size);\n        }\n        if(size.match(/^[0-9]+$/)) {\n            return parseInt(size);\n        }\n        console.warn('size in unsupported format: ', size);\n        return defaultValue;\n    }\n    \n    static colorToRgba(color: string|{r: number, g: number, b: number}|{h: number, s: number, l: number},\n                       opacity: string|number = 1,\n                       defaultColor ='none'): string {\n        if(color === 'none') {\n            return color;\n        }\n        if(!color) {\n            return defaultColor;\n        }\n        color = DrawingUtils.CssNamedColorToHex(color);\n        if(opacity === 1 && typeof color === 'string') {\n            return color;\n        }\n        if(typeof color === 'string' && color[0] === '#') {\n            let c; // From https://stackoverflow.com/questions/21646738/convert-hex-to-rgba\n            if(/^#([A-Fa-f0-9]{3}){1,2}$/.test(color)){\n                c = color.substring(1);\n                if(c.length == 3){\n                    c = c[0] + c[0] + c[1] + c[1] + c[2] + c[2];\n                }\n                c = '0x' + c;\n                return 'rgba('+[(c>>16)&255, (c>>8)&255, c&255].join(',')+',' + opacity + ')';\n            }\n            throw new Error('Bad Hex');\n        } else if(typeof color === 'object') {\n            if('r' in color) {\n                return 'rgba(' + color.r + ',' + color.g + ',' + color.b + ',' + opacity + ')';\n            }\n            if('h' in color) {\n                const rgb = DrawingUtils.hslToRgb(color.h / 360, color.s, color.l);\n                return 'rgba(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ',' + opacity + ')';\n            }\n        } else if(color.substr(0, 4) === 'rgb(') {\n            return color.substr(0, color.length - 1).replace('rgb','rgba') +\n                ', ' + opacity + ')';\n        }\n        return color;\n    }\n\n    // From https://stackoverflow.com/questions/2353211/hsl-to-rgb-color-conversion\n    static hslToRgb(h, s, l) {\n        var r, g, b;\n\n        if(s == 0){\n            r = g = b = l; // achromatic\n        } else {\n            var hue2rgb = function hue2rgb(p, q, t){\n                if(t < 0) t += 1;\n                if(t > 1) t -= 1;\n                if(t < 1/6) return p + (q - p) * 6 * t;\n                if(t < 1/2) return q;\n                if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;\n                return p;\n            };\n\n            var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n            var p = 2 * l - q;\n            r = hue2rgb(p, q, h + 1/3);\n            g = hue2rgb(p, q, h);\n            b = hue2rgb(p, q, h - 1/3);\n        }\n\n        return {r: Math.round(r * 255), g: Math.round(g * 255), b: Math.round(b * 255)};\n    }\n\n    static CssNamedColorToHex(color: any) {\n        if(typeof color === 'string' && COLOR_HEXES[color.toUpperCase()]) {\n            return COLOR_HEXES[color.toUpperCase()];\n        }\n        return color;\n    }\n\n    /**\n     * Basic implementation to get a sense of specificity. Numbers are completely made up.\n     * Should eventually be more sophisticated, e.g. using https://github.com/keeganstreet/specificity.\n     * @param selector CSS rule as string.\n     */\n    static getCssRuleSpecificityNumber(selector: string) {\n        let specificity = 0;\n\n        selector = selector\n            .replace(/ >/g, '>')\n            .replace(/> /g, '>');\n\n        const parts = [].concat.apply([], selector.split(' ')\n            .map(part => part.split('>')));\n\n        // Rough logic: the more stuff, the more specific. IDs and classes are more specific than other things.\n        for(const part of parts) {\n            specificity += 100;\n            const start = part[0];\n\n            if(start === '#') {\n                specificity += 1000;\n            } else if(start === '.') {\n                // More classes are more specific, but never more specific than an ID.\n                const countClasses = part.split('.').length - 1;\n                specificity += Math.min(900, countClasses * 100);\n            }\n        }\n\n        return specificity;\n    }\n}\n\nconst COLOR_HEXES = {\n    ALICEBLUE: '#F0F8FF',\n    ANTIQUEWHITE: '#FAEBD7',\n    AQUA: '#00FFFF',\n    AQUAMARINE: '#7FFFD4',\n    AZURE: '#F0FFFF',\n    BEIGE: '#F5F5DC',\n    BISQUE: '#FFE4C4',\n    BLACK: '#000000',\n    BLANCHEDALMOND: '#FFEBCD',\n    BLUE: '#0000FF',\n    BLUEVIOLET: '#8A2BE2',\n    BROWN: '#A52A2A',\n    BURLYWOOD: '#DEB887',\n    CADETBLUE: '#5F9EA0',\n    CHARTREUSE: '#7FFF00',\n    CHOCOLATE: '#D2691E',\n    CORAL: '#FF7F50',\n    CORNFLOWERBLUE: '#6495ED',\n    CORNSILK: '#FFF8DC',\n    CRIMSON: '#DC143C',\n    CYAN: '#00FFFF',\n    DARKBLUE: '#00008B',\n    DARKCYAN: '#008B8B',\n    DARKGOLDENROD: '#B8860B',\n    DARKGRAY: '#A9A9A9',\n    DARKGREY: '#A9A9A9',\n    DARKGREEN: '#006400',\n    DARKKHAKI: '#BDB76B',\n    DARKMAGENTA: '#8B008B',\n    DARKOLIVEGREEN: '#556B2F',\n    DARKORANGE: '#FF8C00',\n    DARKORCHID: '#9932CC',\n    DARKRED: '#8B0000',\n    DARKSALMON: '#E9967A',\n    DARKSEAGREEN: '#8FBC8F',\n    DARKSLATEBLUE: '#483D8B',\n    DARKSLATEGRAY: '#2F4F4F',\n    DARKSLATEGREY: '#2F4F4F',\n    DARKTURQUOISE: '#00CED1',\n    DARKVIOLET: '#9400D3',\n    DEEPPINK: '#FF1493',\n    DEEPSKYBLUE: '#00BFFF',\n    DIMGRAY: '#696969',\n    DIMGREY: '#696969',\n    DODGERBLUE: '#1E90FF',\n    FIREBRICK: '#B22222',\n    FLORALWHITE: '#FFFAF0',\n    FORESTGREEN: '#228B22',\n    FUCHSIA: '#FF00FF',\n    GAINSBORO: '#DCDCDC',\n    GHOSTWHITE: '#F8F8FF',\n    GOLD: '#FFD700',\n    GOLDENROD: '#DAA520',\n    GRAY: '#808080',\n    GREY: '#808080',\n    GREEN: '#008000',\n    GREENYELLOW: '#ADFF2F',\n    HONEYDEW: '#F0FFF0',\n    HOTPINK: '#FF69B4',\n    INDIANRED: '#CD5C5C',\n    INDIGO: '#4B0082',\n    IVORY: '#FFFFF0',\n    KHAKI: '#F0E68C',\n    LAVENDER: '#E6E6FA',\n    LAVENDERBLUSH: '#FFF0F5',\n    LAWNGREEN: '#7CFC00',\n    LEMONCHIFFON: '#FFFACD',\n    LIGHTBLUE: '#ADD8E6',\n    LIGHTCORAL: '#F08080',\n    LIGHTCYAN: '#E0FFFF',\n    LIGHTGOLDENRODYELLOW: '#FAFAD2',\n    LIGHTGRAY: '#D3D3D3',\n    LIGHTGREY: '#D3D3D3',\n    LIGHTGREEN: '#90EE90',\n    LIGHTPINK: '#FFB6C1',\n    LIGHTSALMON: '#FFA07A',\n    LIGHTSEAGREEN: '#20B2AA',\n    LIGHTSKYBLUE: '#87CEFA',\n    LIGHTSLATEGRAY: '#778899',\n    LIGHTSLATEGREY: '#778899',\n    LIGHTSTEELBLUE: '#B0C4DE',\n    LIGHTYELLOW: '#FFFFE0',\n    LIME: '#00FF00',\n    LIMEGREEN: '#32CD32',\n    LINEN: '#FAF0E6',\n    MAGENTA: '#FF00FF',\n    MAROON: '#800000',\n    MEDIUMAQUAMARINE: '#66CDAA',\n    MEDIUMBLUE: '#0000CD',\n    MEDIUMORCHID: '#BA55D3',\n    MEDIUMPURPLE: '#9370DB',\n    MEDIUMSEAGREEN: '#3CB371',\n    MEDIUMSLATEBLUE: '#7B68EE',\n    MEDIUMSPRINGGREEN: '#00FA9A',\n    MEDIUMTURQUOISE: '#48D1CC',\n    MEDIUMVIOLETRED: '#C71585',\n    MIDNIGHTBLUE: '#191970',\n    MINTCREAM: '#F5FFFA',\n    MISTYROSE: '#FFE4E1',\n    MOCCASIN: '#FFE4B5',\n    NAVAJOWHITE: '#FFDEAD',\n    NAVY: '#000080',\n    OLDLACE: '#FDF5E6',\n    OLIVE: '#808000',\n    OLIVEDRAB: '#6B8E23',\n    ORANGE: '#FFA500',\n    ORANGERED: '#FF4500',\n    ORCHID: '#DA70D6',\n    PALEGOLDENROD: '#EEE8AA',\n    PALEGREEN: '#98FB98',\n    PALETURQUOISE: '#AFEEEE',\n    PALEVIOLETRED: '#DB7093',\n    PAPAYAWHIP: '#FFEFD5',\n    PEACHPUFF: '#FFDAB9',\n    PERU: '#CD853F',\n    PINK: '#FFC0CB',\n    PLUM: '#DDA0DD',\n    POWDERBLUE: '#B0E0E6',\n    PURPLE: '#800080',\n    REBECCAPURPLE: '#663399',\n    RED: '#FF0000',\n    ROSYBROWN: '#BC8F8F',\n    ROYALBLUE: '#4169E1',\n    SADDLEBROWN: '#8B4513',\n    SALMON: '#FA8072',\n    SANDYBROWN: '#F4A460',\n    SEAGREEN: '#2E8B57',\n    SEASHELL: '#FFF5EE',\n    SIENNA: '#A0522D',\n    SILVER: '#C0C0C0',\n    SKYBLUE: '#87CEEB',\n    SLATEBLUE: '#6A5ACD',\n    SLATEGRAY: '#708090',\n    SLATEGREY: '#708090',\n    SNOW: '#FFFAFA',\n    SPRINGGREEN: '#00FF7F',\n    STEELBLUE: '#4682B4',\n    TAN: '#D2B48C',\n    TEAL: '#008080',\n    THISTLE: '#D8BFD8',\n    TOMATO: '#FF6347',\n    TURQUOISE: '#40E0D0',\n    VIOLET: '#EE82EE',\n    WHEAT: '#F5DEB3',\n    WHITE: '#FFFFFF',\n    WHITESMOKE: '#F5F5F5',\n    YELLOW: '#FFFF00',\n    YELLOWGREEN: '#9ACD32'\n};\n\n","import SetPropertyQueueData from \"./set-property-queue-data\";\nimport {VdomNode} from \"./vdom\";\n\nclass CompleteSetPropertyQueueData {\n    'raw': SetPropertyQueueData;\n    'shared': {\n        [attrName: string]: Int32Array\n    };\n}\n\nexport default class SetPropertyQueue {\n    private data: CompleteSetPropertyQueueData = {'raw': {}, 'shared': {}};\n    //private sharedData: {[attrName: string]: SharedArrayBuffer} = {};\n    private useSharedArrayFor = ['cx', 'cy', 'x1', 'x2', 'y1', 'y2', 'x', 'y'];\n    public static BUFFER_PRECISION_FACTOR = 10;\n\n    ensureInitialized(attrName: string, useBuffer: boolean, numNodes?: number) {\n        if(attrName === 'class') {\n            attrName = 'className';\n        }\n\n        if(!useBuffer || this.useSharedArrayFor.indexOf(attrName) === -1) {\n            if(!this.data.raw[attrName]) {\n                this.data.raw[attrName] = [];\n            }\n        } else {\n            if(!this.data.shared[attrName]) {\n                const length = numNodes < 500 ? 1000 : numNodes * 2;\n                const buffer = new SharedArrayBuffer(Int32Array.BYTES_PER_ELEMENT * length);\n                const values = new Int32Array(buffer);\n\n                // If values have been previously set without a buffer, transfer them.\n                if(this.data.raw[attrName] &&\n                    !(this.data.raw[attrName] instanceof SharedArrayBuffer)) {\n                    const prevData: string[] = <any> this.data.raw[attrName];\n\n                    prevData.forEach((value, index) => {\n                        values[index] = parseFloat(value) * SetPropertyQueue.BUFFER_PRECISION_FACTOR;\n                    });\n                }\n\n                this.data.raw[attrName] = buffer;\n                this.data.shared[attrName] = values;\n            } else {\n                const newLength = numNodes < 500 ? 1000 : numNodes * 2;\n                const newByteLength = Int32Array.BYTES_PER_ELEMENT * newLength;\n                if(this.data.shared[attrName].byteLength / newByteLength < 0.8) {\n                    // Need to allocate more space\n                    console.log('more space needed. prev:', this.data.shared[attrName].byteLength / Int32Array.BYTES_PER_ELEMENT, 'new', newLength);\n                    const buffer = new SharedArrayBuffer(newByteLength);\n                    const values = new Int32Array(buffer);\n                    const oldVals = new Int32Array(this.data.shared[attrName]);\n\n                    for(const i in oldVals) {\n                        values[i] = oldVals[i];\n                    }\n                }\n            }\n        }\n    }\n\n    set(element: VdomNode|HTMLElement, attrName: string, value: any, useBuffer: boolean) {\n        if(attrName === 'class') {\n            attrName = 'className';\n        }\n        if(element['globalElementIndex'] === undefined) {\n            console.error('No index', element);\n            throw new Error('Element has no index');\n        }\n        const index = element['globalElementIndex'];\n        const storage = useBuffer && this.useSharedArrayFor.indexOf(attrName) !== -1 ? 'shared' : 'raw';\n        try {\n            if(storage === 'shared') {\n                value *= SetPropertyQueue.BUFFER_PRECISION_FACTOR;\n                if(value === 0) {\n                    value = 133713371337; // magical constant\n                }\n            }\n            this.data[storage][attrName][index] = value;\n        }\n        catch(e) {\n            console.log(e);\n            console.log(this.data, storage, attrName, element, index);\n        }\n    }\n\n    removePendingChanges(node: VdomNode) {\n        /*const selector = element['selector'];\n        delete this.setAttrQueue[selector];\n\n        // Update indices\n        for(let i = index; i < this.nodesToElements.nodes.length; i++) {\n            this.nodesToElements.nodes[i].globalElementIndex = i;\n        }\n\n        for(let attrName in this.setAttrQueue[parentSelector]) {\n            for(let i = childIndex + 1; i < this.setAttrQueue[parentSelector][attrName].length; i++) {\n                this.setAttrQueue[parentSelector][attrName][i-1] = this.setAttrQueue[parentSelector][attrName][i];\n            }\n        }*/\n    }\n\n    get(node: VdomNode, attrName: string) {\n        const index = node['globalElementIndex'];\n        return this.data.raw[attrName][index];\n    }\n\n    getData() {\n        return this.data.raw;\n    }\n\n    clearData() {\n        this.data = {'raw': {}, 'shared': {}};\n    }\n}\n","import SSVG from \"./ssvg\";\n\nexport = SSVG;","import {VdomManager} from \"../util/vdom/vdom-manager\";\nimport {VdomNode} from \"../util/vdom/vdom\";\nimport {CanvasWorkerMessage, CanvasUpdateWorkerMessage, CanvasUpdateData} from \"../util/canvas-worker-message\"\nimport Domhandler from \"./domhandler\";\nimport CanvasWorker from \"../canvasworker/canvasworker\";\nimport Canvasrenderer from \"../canvasworker/canvasrenderer\";\nimport DrawingUtils from \"../canvasworker/drawingUtils\";\nimport CanvasWorkerImporter from '../canvasworker';\n\nexport default class SSVG {\n    private unassignedNodes: Node[] = [];\n    private worker: Worker;\n    private domHandler: Domhandler;\n    private vdom: VdomManager;\n    private interactionSelections: HTMLElement[] = [];\n    \n    private renderer: CanvasWorker;\n\n    private svg: SVGElement|undefined;\n    private readonly canvas: HTMLCanvasElement;\n    private svgAssignedAndSizeSet = false;\n    \n    private lastTenCanvasDrawTimes: number[] = [];\n    \n    private enterExitQueue: CanvasUpdateData[] = [];\n\n    private readonly safeMode: boolean = false;\n    private readonly maxPixelRatio: number|undefined;\n    private readonly useWorker: boolean = true;\n    private readonly getFps: (fps: number) => void = () => {};\n\n    private hoveredElement: Element|undefined;\n\n    constructor(options?: {\n        safeMode?: boolean,\n        maxPixelRatio?: number,\n        useWorker?: boolean,\n        getFps?: (fps: number) => void,\n        svg?: SVGElement,\n    }) {\n        if(options) {\n            if(options.safeMode !== undefined) {\n                this.safeMode = options.safeMode;\n            }\n            this.maxPixelRatio = options.maxPixelRatio;\n            if(options.useWorker !== undefined) {\n                this.useWorker = options.useWorker;\n            }\n            if(options.getFps !== undefined) {\n                this.getFps = options.getFps;\n            }\n        }\n\n        this.canvas = document.createElement('canvas');\n        if(!('OffscreenCanvas' in window)) {\n            this.useWorker = false;\n        }\n        \n        if(this.useWorker) {\n            this.worker = new CanvasWorkerImporter();\n    \n            this.worker.onmessage = e => {\n                if(e.data && e.data.msg && e.data.msg === 'DRAWN') {\n                    this.logDrawn();\n                    this.updateCanvas();\n                }\n            };\n            const raf = () => {\n                this.updateFps();\n                requestAnimationFrame(raf);\n            };\n            raf();\n        } else {\n            const raf = () => {\n                this.updateFps();\n                this.logDrawn();\n                this.updateCanvas();\n                requestAnimationFrame(raf);\n            };\n            raf();\n        }\n\n        this.captureD3On();\n        const svg = options && options.svg ? options.svg : undefined;\n        this.setupElementsIfSvgExists(svg);\n        \n        this.canvas.addEventListener('mousedown', e => this.propagateMouseEvent(e));\n        this.canvas.addEventListener('touchstart', e => this.propagateTouchEvent(e));\n        this.canvas.addEventListener('mousemove', e => {\n            const lastHovered = this.hoveredElement;\n            this.hoveredElement = this.propagateMouseEvent(e);\n            if(lastHovered !== this.hoveredElement) {\n                if(lastHovered) {\n                    lastHovered.dispatchEvent(new MouseEvent('mouseout', e));\n                }\n            }\n            this.propagateMouseEvent(e, 'mouseover');\n        });\n        this.canvas.addEventListener('touchmove', e => {\n            const lastHovered = this.hoveredElement;\n            this.hoveredElement = this.propagateTouchEvent(e);\n            if(lastHovered !== this.hoveredElement) {\n                if(lastHovered) {\n                    lastHovered.dispatchEvent(this.duplicateTouchEvent(e, 'mouseout'));\n                }\n            }\n            this.propagateTouchEvent(e, 'mouseover');\n        });\n        this.canvas.addEventListener('mouseup', e => this.propagateMouseEvent(e));\n        this.canvas.addEventListener('touchend', e => this.propagateTouchEvent(e));\n        this.canvas.addEventListener('click', e => this.propagateMouseEvent(e));\n        this.canvas.addEventListener('wheel', e => this.propagateWheelEvent(e));\n\n        this.replaceNativeRemoveChild();\n        this.replaceNativeAttribute();\n        this.replaceNativePathFunctions();\n        this.replaceNativeCreateElement();\n        this.replaceNativeAppendChild();\n        this.replaceD3Attr();\n        this.replaceNativeSelect();\n        this.replaceNativeGetComputedStyle();\n        this.replaceD3Select();\n        this.replaceD3Remove();\n\n        setTimeout(() => {\n            console.log(this.vdom.data);\n        }, 1000);\n    }\n    \n    private setupElementsIfSvgExists(svgEl?: SVGElement) {\n        \n        if(this.svg) {\n            return true;\n        }\n\n        const svg = !svgEl ? document.getElementsByTagName('svg')[0] : svgEl;\n        \n        if(!svg) {\n            return false;\n        }\n\n        const urlConnector = document.location.href.indexOf('?') === -1 ? '?' : '&';\n        const svgSwitchUrl = document.location.href + urlConnector + 'svg';\n        const svgSwitchComment = document.createComment(' This project uses SSVG.io to render a SVG as Canvas.\\r\\n' +\n            'To inspect the SVG, please open the following URL:\\r\\n' +\n            svgSwitchUrl + '\\r\\n');\n        \n        this.svg = svg;\n        const parent = this.svg.parentElement;\n\n        if(this.svg.nextSibling) {\n            const next = this.svg.nextSibling;\n            parent.insertBefore(svgSwitchComment, next);\n            parent.insertBefore(this.canvas, next);\n        } else {\n            parent.appendChild(svgSwitchComment);\n            parent.appendChild(this.canvas);\n        }\n\n        this.domHandler = new Domhandler(this.svg, this.useWorker, this.useWorker);\n        this.vdom = this.domHandler.getVDom();\n\n        this.setCanvasSize();\n        \n        return true;\n    }\n    \n    private updateCanvas() {\n        if(!this.svgAssignedAndSizeSet) {\n            return;\n        }\n        if(this.useWorker) {\n            this.domHandler.useAttrQueue(queue => {\n                if(Object.keys(queue).length === 0) {\n                    //requestAnimationFrame(() => this.updateCanvas());\n                    setTimeout(() => this.updateCanvas(), 1);\n                    return;\n                }\n\n                /*for(let operation of this.enterExitQueue) {\n                    if(operation.cmd === 'ENTER') {\n                        if(!operation.keepChildren) {\n                            operation.node.children = [];\n                        }\n                        this.vdom.addNode(operation.node, operation.parentNodeIndex);\n                    } else if(operation.cmd === 'EXIT') {\n                        this.vdom.removeNode(operation.childIndex, operation.parentNodeSelector);\n                    }\n                }*/\n                this.sendUpdateToWorker(queue);\n            });\n        } else {\n            this.domHandler.useAttrQueue(queue => {\n                if(this.renderer.updatePropertiesFromQueue) {\n                    this.renderer.updatePropertiesFromQueue(queue);\n                }\n                this.renderer.draw();\n            });\n        }\n    }\n    \n    private setCanvasSize() {\n        if(!this.svg || !this.vdom.data.width || !this.vdom.data.height) {\n            return;\n        }\n        this.vdom.data.scale = window.devicePixelRatio;\n        if(this.maxPixelRatio !== undefined && this.vdom.data.scale > this.maxPixelRatio) {\n            this.vdom.data.scale = this.maxPixelRatio;\n        }\n    \n        this.canvas.style.width = this.vdom.data.width + 'px';\n        this.canvas.style.height = this.vdom.data.height + 'px';\n        this.canvas.width = this.vdom.data.width * this.vdom.data.scale;\n        this.canvas.height = this.vdom.data.height * this.vdom.data.scale;\n        \n        if(this.useWorker) {\n            const offscreen = (this.canvas as any).transferControlToOffscreen();\n            this.sendToWorker({cmd: 'INIT', data: {\n                    canvas: offscreen,\n                    visData: this.vdom.data,\n                    safeMode: this.safeMode\n                }\n            }, [offscreen]);\n            this.vdom.ensureNodesMapped();\n        } else {\n            this.renderer = new Canvasrenderer(this.vdom, this.canvas, this.safeMode, () => {});\n        }\n        \n        this.svgAssignedAndSizeSet = true;\n    }\n\n    private isWithinSvg(element: Element) {\n        let isWithinSvg = false;\n        let parentEl = element;\n\n        while(parentEl && parentEl.parentNode) {\n            if(parentEl === this.svg) {\n                isWithinSvg = true;\n            }\n            parentEl = <Element> parentEl.parentNode;\n        }\n        return isWithinSvg;\n    }\n    \n    private captureD3On() {\n        if((window as any)['d3']) {\n            const d3 = (window as any)['d3'];\n            const originalOn = d3.selection.prototype.on;\n            const me = this;\n\n            d3.selection.prototype.on = function()\n            {\n                let el = this._parents && this._parents.length ? this._parents[0] : this[0].parentNode;\n                if(el === document.children[0]) {\n                    el = me.svg;\n                }\n                let isWithinSvg = me.isWithinSvg(el);\n\n                if(el && isWithinSvg && me.interactionSelections.indexOf(el) === -1)\n                {\n                    me.interactionSelections.push(el); // This one works for native get/setAttribute\n                    //interactionSelections.push(this); // This one works for d3 .attr.\n                }\n        \n                return originalOn.apply(this, arguments);\n            };\n        }\n    }\n    \n    private replaceD3Select() {\n        if((window as any)['d3']) {\n            const me = this;\n            const d3 = (window as any)['d3'];\n\n            const getReplacement = (original) => {\n                return function(selector: string|(()=>{})) {\n                    if(typeof selector === 'string') {\n\n                        let element: HTMLElement|SVGElement;\n                        if(this === d3) {\n                            element = me.svg;\n                        } else {\n                            element = this._groups ? this._groups[0][0] : this[0][0];\n                        }\n\n                        if(!element) {\n                            console.error('no element', this, selector);\n                            return original.apply(this, arguments);\n                        }\n                        const node = me.domHandler.getVisNode(element);\n\n                        if(!node) {\n                            console.warn('node not found', element);\n                            return original.apply(this, arguments);\n                        }\n\n                        const childNodes = me.vdom.getVisNodesFromSelector(node, selector);\n                        const childElements = childNodes.map(node => {\n                            return me.domHandler.getElementFromNode(node);\n                        });\n\n                        const returnValue = original.apply(this, arguments);\n                        const elementsOutsideSvg: NodeList = returnValue._groups ? returnValue._groups[0]\n                            : returnValue[0];\n                        elementsOutsideSvg.forEach(childNode => {\n                            const childEl = <Element> <any> childNode;\n                            if(childElements.indexOf(childEl) === -1) {\n                                childElements.push();\n                            }\n                        });\n\n                        if(returnValue._groups) {\n                            returnValue._groups[0] = childElements;\n                        } else {\n                            // Older d3 versions\n                            const parentNode = returnValue[0].parentNode;\n                            returnValue[0] = childElements;\n                            returnValue[0].parentNode = parentNode;\n                        }\n\n                        return returnValue;\n                    }\n\n                    return original.apply(this, arguments);\n                }\n            };\n\n            d3.selection.prototype.selectAll = getReplacement(d3.selection.prototype.selectAll);\n            d3.selectAll = getReplacement(d3.selectAll);\n            d3.selection.prototype.select = getReplacement(d3.selection.prototype.select);\n            d3.select = getReplacement(d3.select);\n\n            const origFilter = d3.selection.prototype.filter;\n            d3.selection.prototype.filter = function(selectorString: string) {\n                const elements = this._groups ? this._groups[0] : this[0];\n                if(typeof selectorString !== 'string') {\n                    return origFilter.apply(this, arguments);\n                }\n                let firstElement = elements[0];\n                let i = 1;\n                while(!firstElement && i < elements.length) {\n                    i++;\n                    firstElement = elements[i];\n                }\n\n                const parentNode = firstElement ? me.domHandler.getNodeFromElement(firstElement.parentNode) : null;\n                const nodes = elements.map(element => me.domHandler.getNodeFromElement(element));\n\n                const selectors = selectorString.split(',').map(sel => sel.trim());\n                const filteredNodes = [];\n\n                for(const selector of selectors) {\n                    const matchingNodes = me.vdom.filterNodesBySelector(parentNode, nodes, selector);\n\n                    for(const node of matchingNodes) {\n                        if(filteredNodes.indexOf(node) === -1) {\n                            filteredNodes.push(node);\n                        }\n                    }\n                }\n\n                const filteredElements = filteredNodes.map(node => me.domHandler.getElementFromNode(node));\n\n                const returnValue = origFilter.apply(this, arguments);\n\n                if(returnValue._groups) {\n                    returnValue._groups[0] = filteredElements;\n                } else {\n                    // Older d3 versions\n                    const parentNode = returnValue[0].parentNode;\n                    returnValue[0] = filteredElements;\n                    returnValue[0].parentNode = parentNode;\n                }\n                return returnValue;\n            }\n        }\n    }\n\n    private replaceNativeGetComputedStyle() {\n        const origGetComputedStyle = window.getComputedStyle;\n        const me = this;\n\n        window.getComputedStyle = function(element: HTMLElement) {\n            if(element && !me.isWithinSvg(element) && (<Window> <any> element) !== window) {\n                return origGetComputedStyle.call(this, element);\n            }\n\n            const node = me.domHandler.getNodeFromElement(element);\n            if(!node) {\n                console.warn('node not found for ', this, element);\n                return origGetComputedStyle.call(this, element);\n            }\n            return {\n                getPropertyValue(propertyName: string): string {\n                    //console.log(propertyName, node, node.style[propertyName]);\n                    return node.style[propertyName];\n                }\n            } as CSSStyleDeclaration;\n        };\n    }\n\n    private replaceNativeSelect() {\n        const origQuerySelector = Element.prototype.querySelector;\n        const me = this;\n\n        Element.prototype.querySelector = function(selector: string) {\n            if(!me.isWithinSvg(this)) {\n                return origQuerySelector.apply(this, arguments);\n            }\n\n            const node = me.domHandler.getVisNode(this);\n            const childNodes = me.vdom.getVisNodesFromSelector(node, selector);\n            if(childNodes.length === 0) {\n                console.warn('could not find selection', this, node, node.globalElementIndex, selector);\n                return null;\n            }\n            return me.domHandler.getElementFromNode(childNodes[0]);\n        };\n    }\n\n    private replaceD3Attr() {\n\n        const me = this;\n\n        function getReplacement(originalFct, prefix = '') {\n            return function(name, value) {\n                \n                if(value === undefined) {\n\n                    if(me.unassignedNodes.indexOf(this) !== -1) {\n                        return originalFct.apply(this, arguments);\n                    } else {\n                        // Dealing with d3 v3.\n                        const els = this._groups ? this._groups[0] : this[0];\n                        if(els[0] && !me.isWithinSvg(els[0])) {\n                            return originalFct.apply(this, arguments);\n                        }\n                        if(els.length > 1) {\n                            const returnVal = [];\n                            for(const el of els) {\n                                returnVal.push(me.domHandler.getAttributeFromSelector(el, name))\n                            }\n                            return returnVal;\n                        } else {\n                            return me.domHandler.getAttributeFromSelector(els[0], name);\n                        }\n                    }\n                } else {\n                    if(name === 'class' || !me.svg) {\n                        return originalFct.apply(this, arguments);\n                    }\n                    // For d3 v4, this would just be this.groups[0]. The rest is for\n                    // earlier versions, where selectAll() returned other values.\n                    let elements = this._groups ? this._groups[0] : this[0];\n\n                    if(typeof elements === 'object' && Object.keys(elements).length === 1 && elements.parentNode) {\n                        const parentElement = elements.parentNode;\n                        let parentNode: VdomNode;\n                        if(parentElement !== document.children[0]) {\n                            const selector = me.domHandler.getElementSelector(parentElement);\n                            if(selector === null) {\n                                console.error('selector not found', parentElement, elements);\n                                throw Error('selector not found');\n                            }\n                            parentNode = me.vdom.getVisNodeFromSelector(selector);\n                        } else {\n                            parentNode = me.vdom.data;\n                        }\n\n                        elements = [];\n                        for(const child of parentNode.children) {\n                            elements.push(me.domHandler.getElementFromNode(child));\n                        }\n                    }\n                    if(!elements) {\n                        return originalFct.apply(this, arguments);\n                    }\n                    const filteredElements = [];\n                    try {\n                        for (const element of elements) {\n                            if (element) {\n                                filteredElements.push(element);\n                            }\n                        }\n                    } catch(e) {\n                        console.error(elements, this);\n                        console.error(e);\n                    }\n                    if(filteredElements.length === 1) {\n                        const element = filteredElements[0];\n                        if(!element) {\n                            console.warn('element not found', this, name, value);\n                            return this;\n                        }\n                        if(!me.isWithinSvg(element)) {\n                            return originalFct.apply(this, arguments);\n                        }\n                        me.domHandler.queueSetAttributeOnElement(element, prefix + name, value);\n                    } else {\n                        if(!me.isWithinSvg(elements[0])) {\n                            return originalFct.apply(this, arguments);\n                        }\n                        me.domHandler.queueSetAttributeOnSelection(filteredElements, prefix + name, value);\n                    }\n                    \n                    if(filteredElements[0] === me.svg && (name === 'width' || name === 'height')) {\n                        me.vdom.data[name] = parseInt(value);\n                        me.setCanvasSize();\n                    }\n                \n                    return this;\n                }\n            };\n        }\n    \n        if((window as any)['d3']) {\n            const d3 = (window as any)['d3'];\n\n            const origSelectionAttr = d3.selection.prototype.attr;\n            d3.selection.prototype.attr = getReplacement(origSelectionAttr);\n\n            const origSelectionStyle = d3.selection.prototype.style;\n            d3.selection.prototype.style = getReplacement(origSelectionStyle, 'style;');\n\n            const originalClassed = d3.selection.prototype.classed;\n            d3.selection.prototype.classed = function(className: string,\n                                                      value?: boolean|((data: any, index: number) => boolean)) {\n                if(value !== undefined) {\n                    me.domHandler.enableFrontendDesignProperties();\n                    let elements = this._groups ? this._groups[0] : this[0];\n                    let i = 0;\n                    for(let element of elements) {\n                        if(element) {\n                            const indexOfParent = element.childIndex;\n                            const parentSelector = element['parentSelector'];\n                            const parent = me.vdom.getParentNodeFromSelector(parentSelector);\n                            const node = parent.children[indexOfParent];\n                            if(!node) {\n                                console.warn('node not found', element, parent, indexOfParent, className);\n                                continue;\n                            }\n                            const prevClassNames = node.className || '';\n                            const evaluatedValue = typeof value === \"function\" ? value((<any> element).__data__, i) : value;\n                            if(evaluatedValue === true) {\n                                if(prevClassNames.indexOf(className) === -1) {\n                                    let newClassNames = (prevClassNames + ' ' + className).trim();\n\n                                    me.domHandler.queueSetAttributeOnElement(element, 'class', newClassNames);\n                                }\n                            } else if(evaluatedValue === false) {\n                                const containedPreviously = prevClassNames.indexOf(className) !== -1;\n                                if(containedPreviously) {\n                                    const newClassNames = prevClassNames.replace(className, '').replace('  ', ' ');\n                                    me.domHandler.queueSetAttributeOnElement(element, 'class', newClassNames);\n\n                                    if(!node['removedClasses']) {\n                                        node['removedClasses'] = [];\n                                    }\n                                    node['removedClasses'].push(className); // For removing associated styles.\n                                }\n                            }\n                        }\n\n                        i++;\n                    }\n                }\n                return originalClassed.apply(this, arguments);\n            };\n\n            const originalTransition = d3.selection.prototype.transition;\n            d3.selection.prototype.transition = function() {\n                me.domHandler.enableFrontendDesignProperties();\n                return originalTransition.apply(this, arguments);\n            };\n\n            const originalText = d3.selection.prototype.text;\n            d3.selection.prototype.text = function(value?: boolean|((data: any, index: number) => boolean)) {\n                if(value !== undefined) {\n                    let elements = this._groups ? this._groups[0] : this[0];\n                    let i = 0;\n                    for(let element of elements) {\n                        if(element && me.isWithinSvg(element)) {\n                            const evaluatedValue = typeof value === \"function\" ? value((<any> element).__data__, i) : value;\n                            me.domHandler.queueSetAttributeOnElement(element, 'text', evaluatedValue);\n                        }\n\n                        i++;\n                    }\n                }\n                return originalText.apply(this, arguments);\n            };\n        }\n    }\n\n    private replaceD3Remove() {\n        if(window['d3']) {\n            const d3 = window['d3'];\n            const me = this;\n\n            const newRemove = this.getNewRemoveChild(() => {}, true);\n            const d3Remove = function() {\n                let elements = this._groups ? this._groups[0] : this[0];\n\n                if(elements.length) {\n                    let parentElement: HTMLElement = null;\n                    for(let i = elements.length - 1; i > -1; i--) {\n                        const element = elements[i];\n                        if(element) {\n                            parentElement = element.parentNode;\n                            if(!parentElement) {\n                                console.error('element has no parent node', element);\n                            }\n                            newRemove.call(parentElement, element);\n                        }\n                    }\n                    if(parentElement) {\n                        me.updateChildSelectors(parentElement);\n                    }\n                }\n                return this;\n            };\n            d3.selection.prototype.remove = d3Remove;\n            //d3.transition.prototype.remove = d3Remove;\n        }\n    }\n    \n    private replaceNativeCreateElement() {\n        const origCreate = document.createElementNS;\n        const me = this;\n        \n        document.createElementNS = function() {\n            let newArgs = Array.from(arguments);\n            const el = origCreate.apply(this, newArgs);\n            \n            /*el.appendChild = () => {\n                console.log('hi!!', el, arguments);\n                //return el;\n            };*/\n    \n            el.appendChild = me.getNewAppendChild(el.appendChild);\n            \n            me.unassignedNodes.push(el);\n    \n            //console.log(me.unassignedNodes);\n            \n            return el;\n        }\n    }\n\n    private updateChildSelectors(parentElement: Element, parentNode?: VdomNode) {\n        const parentSelector = parentElement['selector'];\n        if(!parentSelector) {\n            console.error('this node has no selector', parentElement)\n        }\n        if(!parentNode) {\n            parentNode = this.vdom.getParentNodeFromSelector(parentSelector);\n        }\n        for(let i = 0; i < parentNode.children.length; i++) {\n            const childNode: VdomNode = parentNode.children[i];\n            const childElement = this.domHandler.getElementFromNode(childNode);\n            if(!childElement) {\n                console.error('element not found', childNode, parentNode.children.length, i);\n                console.log('current elements:', [...this.domHandler.nodesToElements.elements]);\n                console.log('current nodes:', [...this.domHandler.nodesToElements.nodes]);\n                console.log('parent node: ', parentNode);\n                console.log('children:', [...parentNode.children]);\n                continue;\n            }\n            const oldSelector = childElement['selector'];\n\n            childElement['childIndex'] = i;\n            childElement['parentSelector'] = parentSelector;\n            childElement['selector'] = this.domHandler.combineElementSelectors(parentSelector, childNode.type, i+1);\n\n            this.domHandler.updateNodeSelector(oldSelector, childElement['selector']);\n\n            this.updateChildSelectors(childElement, childNode);\n        }\n    }\n\n    private getNewRemoveChild(origRemoveChild: ((<T extends Node>(oldChild: T) => T)|(() => void)),\n        skipUpdateSelectors = false) {\n        const me = this;\n\n        return function<T extends Node>(this: Element, el: T) {\n            if(!this) {\n                console.error('context not defined');\n                return el;\n            }\n            if(!me.isWithinSvg(<Element> <any> el)) {\n                return origRemoveChild.apply(this, arguments);\n            }\n            const parentNode = me.domHandler.getNodeFromElement(<Element> <any> this);\n            const parentSelector = this['selector'];\n            const node = me.domHandler.getNodeFromElement(<Element> <any> el);\n\n            if(!node) {\n                console.error('node not found', node, el, this, parentNode);\n                return origRemoveChild.apply(this, arguments);\n            }\n\n            // Remove all child elements.\n            for(const childNode of node.children) {\n                const childEl = me.domHandler.getElementFromNode(childNode);\n                //el.removeChild(childEl);\n            }\n\n            // Remove from current parent first.\n            Object.defineProperty(el, 'parentNode', {\n                writable: true,\n                value: undefined\n            });\n\n            //console.log('remove')\n            me.enterExitQueue.push({\n                cmd: 'EXIT',\n                childIndex: el['childIndex'],\n                parentGlobalIndex: parentNode.globalElementIndex\n            });\n\n            me.domHandler.removeNodeFromParent(<Element> <any> el, node, parentNode);\n\n            // Fix child indices of all children.\n            if(!skipUpdateSelectors) {\n                if(!parentSelector) {\n                    console.error('parent not found', parentNode, parentSelector, this, el);\n                }\n                me.updateChildSelectors(this);\n            }\n\n            delete el['selector'];\n\n            return el;\n        };\n    }\n\n    private replaceNativeRemoveChild() {\n        Element.prototype.removeChild = this.getNewRemoveChild(Element.prototype.removeChild);\n    }\n    \n    private getNewAppendChild(origAppend) {\n        const me = this;\n        \n        return function<T extends Node>(this: Element, el: T) {\n            if(!me.svgAssignedAndSizeSet) {\n                if(!me.svg && el['tagName'] === 'svg') {\n                    const appended = origAppend.apply(this, arguments);\n                    me.setupElementsIfSvgExists(<SVGElement> <any> el);\n                    return appended;\n                    \n                } else {\n                    return origAppend.apply(this, arguments);\n                }\n            }\n            \n            if(!me.isWithinSvg(this)) {\n                return origAppend.apply(this, arguments);\n            }\n\n            Object.defineProperty(el, 'ownerSVGElement', {\n                writable: true,\n                value: me.svg\n            });\n            el['appendChild'] = <T extends Node>(el2: T) => {\n                return me.getNewAppendChild(origAppend).call(el, el2);\n            };\n            const parentSelector = me.domHandler.getElementSelector(this);\n            if(parentSelector === null) {\n                return origAppend.apply(this, arguments);\n            }\n\n            const parentNode = me.domHandler.getNodeFromElement(this);\n            if(!parentNode) {\n                return console.error('parent node not found', parentSelector, this);\n            }\n            let node: VdomNode;\n            let keepChildren = false;\n\n            if(el['parentSelector']) {\n                node = me.domHandler.getVisNode(<Element> <any> el);\n\n                me.getNewRemoveChild(() => {}).call(this, el);\n                keepChildren = true; // If the element is being moved around, keep children.\n            } else {\n                node = me.domHandler.getNodeDataFromEl(<HTMLElement><any> el);\n            }\n\n            (el as any)['parentSelector'] = parentSelector;\n            (el as any)['selector'] = me.domHandler.getElementSelector(<Element><any> el, parentNode);\n            (el as any)['childIndex'] = parentNode.children.length;\n\n            Object.defineProperty(el, 'style', {\n                writable: true,\n                value: {\n                    setProperty: function(styleProp: string, value: string) {\n                        me.domHandler.queueSetAttributeOnElement(el as any, 'style;' + styleProp, value);\n                    },\n                    getPropertyValue: function(styleProp) {\n                        me.domHandler.enableFrontendDesignProperties();\n                        return node.style[styleProp];\n                    },\n                    removeProperty: function() {\n                        console.log('remove property not yet implemented.');\n                        //TODO implement removeProperty CSS function.\n                    }\n                }\n            });\n\n            Object.defineProperty(el, 'parentNode', {\n                writable: true,\n                value: this\n            });\n    \n            me.domHandler.linkNodeToElement(node, el);\n            me.domHandler.addNodeToParent(parentNode, node);\n            me.updateChildSelectors(el as unknown as Element, node);\n            \n            if(me.useWorker) {\n                me.enterExitQueue.push({\n                    cmd: 'ENTER',\n                    node: node,\n                    parentNodeIndex: parentNode.globalElementIndex,\n                    keepChildren: keepChildren\n                });\n            } else {\n                if(me.renderer.addNode) {\n                    me.renderer.addNode(node);\n                }\n            }\n    \n            if(me.unassignedNodes.indexOf(el) !== -1) {\n                const index = me.unassignedNodes.indexOf(el);\n                me.unassignedNodes.splice(index, 1);\n            }\n    \n            return el;\n        };\n    }\n    \n    private replaceNativeAppendChild() {\n        const origAppendChild = Element.prototype.appendChild;\n        const newAppend = this.getNewAppendChild(origAppendChild);\n    \n        Element.prototype.appendChild = newAppend;\n        Element.prototype.insertBefore = function<T extends Node>(newChild: T, refChild: Node|null) {\n    \n            newAppend.call(this, newChild);\n            \n            return newChild;\n        };\n    }\n\n    private replaceNativePathFunctions() {\n        const me = this;\n        //const origGetPointAtLength = SVGPathElement.prototype.getPointAtLength;\n        const origGetTotalLength = SVGPathElement.prototype.getTotalLength;\n\n        /*SVGPathElement.prototype.getPointAtLength = function() {\n            if(me.isWithinSvg(this)) {\n                const d = this.getAttribute('d');\n                me.origSetAttribute.call(this, 'd', d);\n            }\n            return origGetPointAtLength.apply(this, arguments);\n        };*/\n        SVGPathElement.prototype.getTotalLength = function() {\n            if(me.isWithinSvg(this)) {\n                const d = this.getAttribute('d');\n                me.origSetAttribute.call(this, 'd', d);\n            }\n\n            return origGetTotalLength.apply(this, arguments);\n        };\n    }\n\n    private origSetAttribute;\n\n    private replaceNativeAttribute() {\n        const origSetAttr = Element.prototype.setAttribute;\n        this.origSetAttribute = origSetAttr;\n        const origSetAttrNS = Element.prototype.setAttributeNS;\n        const origGetAttr = Element.prototype.getAttribute;\n        const me = this;\n    \n        Element.prototype.setAttribute = function(name: string, value: any) {\n            if(name === 'easypz' || me.unassignedNodes.indexOf(this) !== -1) {\n                // Update the original SVG\n                origSetAttr.apply(this, arguments);\n                return;\n            }\n            if(name === 'class') {\n                origSetAttr.apply(this, arguments);\n            }\n            if(!me.isWithinSvg(this)) {\n                return origSetAttr.apply(this, arguments);\n            }\n            me.domHandler.queueSetAttributeOnElement(this, name, value);\n        };\n        //TODO: Figure out how to access the element when setting a style property.\n        /*CSSStyleDeclaration.prototype.setProperty = function(name: string, value: any) {\n            safeLog(this, arguments);\n            me.elementHandler.queueSetAttributeOnElement(this, 'style;' + name, value);\n        };*/\n        Element.prototype.setAttributeNS = function(name: string, value: any) {\n            if(name === 'easypz' || me.unassignedNodes.indexOf(this) !== -1) {\n                // Update the original SVG\n                origSetAttrNS.apply(this, arguments);\n                return;\n            }\n            if(name === 'class') {\n                origSetAttrNS.apply(this, arguments);\n            }\n            if(!me.isWithinSvg(this)) {\n                return origSetAttrNS.apply(this, arguments);\n            }\n            me.domHandler.queueSetAttributeOnElement(this, name, value);\n        };\n    \n        Element.prototype.getAttribute = function(name) {\n            if(me.unassignedNodes.indexOf(this) !== -1) {\n                return origGetAttr.apply(this, arguments);\n            } else {\n                try {\n                    return me.domHandler.getAttributeFromSelector(this, name);\n                } catch(e) {\n                    console.error(e);\n                    return origGetAttr.apply(this, arguments);\n                }\n            }\n        };\n    }\n    \n    private propagateMouseEvent(evt: MouseEvent, type?: string) {\n        return this.propagateEvent(new MouseEvent(type? type : evt.type, evt));\n    }\n\n    private duplicateTouchEvent(evt: TouchEvent, type?: string) {\n        const e = document.createEvent('TouchEvent');\n        if(!type) {\n            type = evt.type;\n        }\n        e.initEvent(type, true, false);\n        for(const prop in evt) {\n            if(prop !== 'isTrusted' && evt.hasOwnProperty(prop)) {\n                Object.defineProperty(e, prop, {\n                    writable: true,\n                    value: evt[prop],\n                });\n            }\n        }\n        Object.defineProperty(e, 'type', {\n            writable: true,\n            value: type,\n        });\n        const touches = [];\n        for(let i = 0; i < evt.touches.length; i++) {\n            const touch = evt.touches[i];\n            touches.push({identifier: touch.identifier, pageX: touch.pageX, pageY: touch.pageY,\n                clientX: touch.clientX, clientY: touch.clientY});\n        }\n        Object.defineProperty(e, 'touches', {\n            writable: true,\n            value: touches,\n        });\n        return e;\n    }\n\n    private propagateTouchEvent(evt: TouchEvent, type?: string) {\n        return this.propagateEvent(this.duplicateTouchEvent(evt, type));\n    }\n    \n    private propagateWheelEvent(evt: WheelEvent) {\n        return this.propagateEvent(new WheelEvent(evt.type, evt));\n    }\n    \n    private propagateEvent(new_event: MouseEvent|TouchEvent|WheelEvent): undefined|Element {\n        this.svg.dispatchEvent(new_event); // for EasyPZ\n\n        let triggeredElement: undefined|Element;\n\n        for(let interactionSel of this.interactionSelections)\n        {\n            let parentSelector = this.domHandler.getElementSelector(interactionSel);\n            let parentNode = this.vdom.getVisNodeFromSelector(parentSelector);\n            \n            //let matchingVisParent = selectedNodes[i];\n            let j = 1;\n            \n            if(!parentNode) {\n                //console.error(interactionSel, parentSelector, parentNode);\n            } else {\n                for(let vdomNode of parentNode.children)\n                {\n                    const {x, y} = SSVG.getMousePosition(new_event);\n                    let childNode = this.nodeAtPosition(vdomNode, x - 10, y - 10);\n                    if(childNode)\n                    {\n                        //console.log(childNode);\n                        /*let selector = parentSelector + ' > :nth-child(' + j + ')';\n                        let svgEl = this.svg.querySelector(selector);*/\n                        const svgEl = this.domHandler.getElementFromNode(vdomNode);\n                        const svgChildEl = this.domHandler.getElementFromNode(childNode);\n\n                        if(svgChildEl) {\n                            Object.defineProperty(new_event, 'target', {\n                                writable: true,\n                                value: svgChildEl\n                            });\n                        }\n\n                        if(svgChildEl) {\n                            triggeredElement = svgChildEl;\n                            svgChildEl.dispatchEvent(new_event);\n                        }\n\n                        if(svgEl && !triggeredElement) {\n                            triggeredElement = svgEl;\n                            svgEl.dispatchEvent(new_event);\n                        }\n                    }\n                    j++;\n                }\n            }\n        }\n        return triggeredElement;\n    }\n\n    //TODO move this function somewhere else.\n    private static getMousePosition(event: MouseEvent|TouchEvent) : {x: number, y: number}|null\n    {\n        let pos = {x: 0, y: 0};\n\n        if(event.type.substr(0,5) === 'mouse' && event['clientX'])\n        {\n            pos = {x: event['clientX'], y: event['clientY']};\n        }\n        else if(event.type.substr(0,5) === 'touch')\n        {\n            const touches = event['touches'] ? event['touches'] : [];\n            if(touches.length < 1) return null;\n            pos = {x: touches[0].clientX, y: touches[0].clientY};\n        }\n\n        return pos;\n    }\n    \n    private nodeAtPosition(visNode: VdomNode, x: number, y: number): false|VdomNode {\n        if (visNode.type === 'circle') {\n            let cx = visNode.cx || 0;\n            let cy = visNode.cy || 0;\n            if (visNode.transform) {\n                const transform = DrawingUtils.parseTransform(visNode.transform);\n                if (transform.translateX) {\n                    cx += transform.translateX;\n                }\n                if (transform.translateY) {\n                    cy += transform.translateY;\n                }\n            }\n            const distance = Math.sqrt(Math.pow(cx - x, 2) + Math.pow(cy - y, 2));\n            return distance < visNode.r ? visNode : false;\n        } else if(visNode.type === 'rect' || visNode.type === 'image') {\n\n            let elX = visNode.x || 0;\n            let elY = visNode.y || 0;\n            const width = visNode.width;\n            const height = visNode.height;\n\n            if (visNode.transform) {\n                const transform = DrawingUtils.parseTransform(visNode.transform);\n                if (transform.translateX) {\n                    elX += transform.translateX;\n                }\n                if (transform.translateY) {\n                    elY += transform.translateY;\n                }\n            }\n\n            const centerX = elX + width / 2;\n            const centerY = elY + height / 2;\n\n            const distanceX = Math.abs(centerX - x);\n            const distanceY = Math.abs(centerY - y);\n\n            return distanceX < width / 2 && distanceY < height / 2 ? visNode : false;\n\n        } else if(visNode.type === 'g') {\n\n            const transform = this.domHandler.getTotalTransformation(visNode);\n            if(transform.translateX) {\n                x -= transform.translateX;\n            }\n            if(transform.translateY) {\n                y -= transform.translateY;\n            }\n\n            let matchAny: false|VdomNode = false;\n            for(let i = 0; i < visNode.children.length; i++) {\n                if(this.nodeAtPosition(visNode.children[i], x, y)) {\n                    matchAny = visNode.children[i];\n                }\n            }\n            return matchAny;\n        }\n        return false;\n    }\n    \n    private logDrawn() {\n        this.lastTenCanvasDrawTimes.push(Date.now());\n        \n        if(this.lastTenCanvasDrawTimes.length > 100) {\n            this.lastTenCanvasDrawTimes.shift(); // Remove first item\n        }\n    }\n    \n    private updateFps() {\n        if(this.lastTenCanvasDrawTimes.length) {\n            const timeForTenDrawsMs = Date.now() - this.lastTenCanvasDrawTimes[0];\n            const fps = Math.round(this.lastTenCanvasDrawTimes.length / timeForTenDrawsMs * 1000);\n            this.getFps(fps);\n        }\n    }\n\n    private sendUpdateToWorker(queue) {\n        const msg: CanvasUpdateWorkerMessage = {\n            cmd: 'UPDATE_NODES',\n            data: {\n                enterExit: this.enterExitQueue,\n                update: queue,\n            }\n        };\n\n        this.sendToWorker(msg);\n\n        this.enterExitQueue = [];\n    }\n\n    private sendToWorker(msg: CanvasWorkerMessage, data?: any) {\n        this.worker.postMessage(msg, data);\n        //console.log(roughSizeOfObject(msg));\n    }\n}\n\n\nlet safeLogCount = 0;\nfunction safeLog(...logContents) {\n    \n    if(safeLogCount < 50) {\n        safeLogCount++;\n        console.log(...logContents);\n    }\n}\nfunction safeErrorLog(...logContents) {\n    \n    if(safeLogCount < 50) {\n        safeLogCount++;\n        console.error(...logContents);\n    }\n}\n","import {VdomNode, VdomNodeType} from \"../util/vdom/vdom\";\nimport SetPropertyQueue from \"../util/vdom/set-property-queue\";\nimport {VdomManager} from \"../util/vdom/vdom-manager\";\nimport DrawingUtils, {Transformation} from \"../canvasworker/drawingUtils\";\nimport drawingUtils from \"../canvasworker/drawingUtils\";\n\nexport const CSS_STYLES = ['stroke', 'stroke-opacity', 'stroke-width', 'stroke-linejoin',\n    'fill', 'fill-opacity', 'font', 'opacity', 'font-family', 'font-size'];\n\nexport default class Domhandler {\n    private readonly vdom: VdomManager;\n    private setAttrQueue = new SetPropertyQueue();\n    public nodesToElements: { nodes: VdomNode[], elements: Element[]} = { nodes: [], elements: []};\n    private nodesToRestyle: VdomNode[] = [];\n\n    constructor(private svg: SVGElement, useWorker: boolean, private ignoreDesign: boolean) {\n        const visData: any = {\n            width: parseInt(this.svg.getAttribute('width')),\n            height: parseInt(this.svg.getAttribute('height')),\n            scale: 1,\n            children: [],\n            globalElementIndex: 0,\n        };\n\n        this.vdom = new VdomManager(visData, ignoreDesign);\n        this.linkNodeToElement(visData, this.svg);\n        this.svg.style.display = 'none';\n        this.svg['selector'] = 'svg';\n\n        this.addChildNodesToVisData(this.svg.childNodes, this.vdom.data);\n\n        window.setTimeout(() => {\n            // Re-do the styles.\n            this.nodesToRestyle = [];\n            // Can not use this.nodesToRestyle = this.nodesToElements.nodes because this links the object and adding\n            // to this.nodesToRestyle would break the nodesToElements mapping.\n            for(const node of this.nodesToElements.nodes) {\n                this.nodesToRestyle.push(node);\n            }\n        }, 100);\n    }\n\n    enableFrontendDesignProperties() {\n        this.ignoreDesign = false;\n        this.vdom.enableFrontendDesignProperties();\n    }\n    \n    getVDom() {\n        return this.vdom;\n    }\n    \n    queueSetAttributeOnElement(element: Element, attrName: string, value: any) {\n        //TODO: merge with updatePropertiesFromQueue from VdomManager?\n        const parent = element.parentNode;\n        let parentSelector = parent === this.svg ? \"svg\" : (element as any)['parentSelector'] as string;\n        let childIndex = (element as any)['childIndex'];\n    \n        if(!parentSelector && element === this.svg) {\n            parentSelector = 'SVG_PARENT';\n            childIndex = 0;\n        }\n    \n        if(!parentSelector) {\n            safeLog(element, parent);\n            console.error('selector not found');\n            return;\n        }\n\n        if(element === this.svg && attrName.indexOf('style;') === 0) {\n            attrName = attrName.substr('style;'.length);\n        }\n        //attrName = this.checkAttrName(parentSelector, attrName, false);\n        this.setAttrQueue.ensureInitialized(attrName, false, this.nodesToElements.nodes.length);\n\n        const evaluatedValue = typeof value === \"function\" ? value.call(<any> element, (<any> element).__data__, childIndex) : value;\n        //const node = this.getNodeFromElement(element);\n        //this.setAttrQueue.set(node, attrName, evaluatedValue, false);\n        const node = this.getNodeFromElement(element);\n        this.setAttrQueue.set(node, attrName, evaluatedValue, false);\n\n        if(attrName === \"href\") {\n            try {\n                fetch(location.origin + evaluatedValue, {mode: 'cors'})\n                    .then(resp => resp.blob())\n                    .then(blob => createImageBitmap(blob))\n                    .then(bitmap => {\n                        //this.checkAttrName(parentSelector, \"image\", false);\n                        this.setAttrQueue.ensureInitialized(\"image\", false, this.nodesToElements.nodes.length);\n                        this.setAttrQueue[parentSelector][\"image\"][childIndex] = bitmap;\n                    });\n            }\n            catch(e) {console.log(e);}\n        }\n\n        if(attrName === 'class' || attrName.indexOf('style') !== -1) {\n            // Apply classes immediately so styles can be applied correctly.\n\n            if(attrName === 'class') {\n                node.className = evaluatedValue;\n                this.nodesToRestyle.push(node);\n            } else {\n                const styleName = attrName.substr(6);\n                if(!node.style) {\n                    console.error('no styles on node ', node);\n                }\n                node.style[styleName] = evaluatedValue;\n            }\n        }\n    }\n\n    logged = 0;\n    queueSetAttributeOnSelection(elements: (HTMLElement & {__data__: any})[], attrName: string, value) {\n        if(!elements.length) return;\n        if(!elements[0]) {\n            //console.error('selection elements not found', elements);\n            return;\n        }\n        const useSharedArray = 'SharedArrayBuffer' in self;\n\n        let parentElement = elements[0].parentNode;\n        let parentSelector = parentElement === this.svg ? \"svg\" : parentElement['selector'];\n        if(!parentSelector) {\n            safeLog(elements, parentElement);\n            console.error('selector not found');\n        }\n\n        this.setAttrQueue.ensureInitialized(attrName, useSharedArray, this.nodesToElements.nodes.length);\n\n        for(let i = 0; i < elements.length; i++) {\n            const svgEl = elements[i];\n\n            const evaluatedValue = typeof value === \"function\" ? value(svgEl.__data__, i) : value;\n            this.ensureElementIndex(svgEl);\n\n            this.setAttrQueue.set(svgEl, attrName, evaluatedValue, useSharedArray);\n\n            //TODO: re-implement.\n            /*if(attrName === \"href\") {\n                try {\n                    fetch(location.origin + evaluatedValue, {mode: 'cors'})\n                    .then(resp => resp.blob())\n                    .then(blob => createImageBitmap(blob))\n                    .then(bitmap => {\n                        //this.checkAttrName(parentSelector, \"image\", useSharedArray, parentNode);\n                        this.setAttrQueue.ensureInitialized(\"image\", false);\n                        this.setAttrQueue[parentSelector][\"image\"][indexOfParent] = bitmap;\n                    });\n                }\n                catch(e) {console.log(e);}\n            }*/\n        }\n\n        if(attrName === 'className' || attrName.indexOf('style') !== -1) {\n            // Apply classes immediately so styles can be applied correctly.\n            for(let i = 0; i < elements.length; i++) {\n                const node = this.getNodeFromElement(elements[i]);\n                const evaluatedValue = typeof value === \"function\" ? value(elements[i].__data__, i) : value;\n\n                if(attrName === 'className') {\n                    node.className = evaluatedValue;\n                    this.nodesToRestyle.push(node);\n                } else {\n                    const styleName = attrName.substr(6);\n                    node.style[styleName] = evaluatedValue;\n                }\n            }\n        }\n    }\n\n    ensureElementIndex(svgEl: HTMLElement) {\n        if(!svgEl['globalElementIndex']) {\n            const node = this.getNodeFromElement(svgEl);\n            svgEl['globalElementIndex'] = node.globalElementIndex;\n        }\n    }\n\n    useAttrQueue(cb: (data) => void = () => {}) {\n        if(this.nodesToRestyle) {\n            this.applyStyles();\n        }\n\n        const data = this.setAttrQueue.getData();\n        cb(data);\n        this.vdom.updatePropertiesFromQueue(data);\n\n        //this.setAttrQueue = {};\n        this.setAttrQueue.clearData();\n    }\n\n    getAttributeFromSelector(element: Element, name: string) {\n        const node = this.getNodeFromElement(element);\n        \n        if(!node) {\n            console.error('trying to get attribute for unfit selection', node, element, name);\n            throw Error('element not found');\n        }\n        \n        return node[name];\n    }\n    \n    getVisNode(element: Element): VdomNode|null {\n        const selector = this.getElementSelector(element);\n\n        if(selector === null) {\n            return null;\n        }\n        \n        return this.vdom.getVisNodeFromSelector(selector);\n    }\n    \n    getNodeDataFromEl(el: HTMLElement): VdomNode {\n        const getRoundedAttr = (el: Element, attrName: string) => {\n            const val = el.getAttribute(attrName);\n            return val ? parseFloat(val) : null;\n        };\n        \n        const node = {\n            type: el.tagName.toLowerCase() as VdomNodeType,\n            transform: el.getAttribute('transform'),\n            d: el.getAttribute('d'),\n            className: el.getAttribute('class'),\n            id: el.getAttribute('id'),\n            r: getRoundedAttr(el, 'r'),\n            fill: el.getAttribute('fill'),\n            cx: getRoundedAttr(el, 'cx'),\n            cy: getRoundedAttr(el, 'cy'),\n            x: getRoundedAttr(el, 'x'),\n            y: getRoundedAttr(el, 'y'),\n            x1: getRoundedAttr(el, 'x1'),\n            x2: getRoundedAttr(el, 'x2'),\n            y1: getRoundedAttr(el, 'y1'),\n            y2: getRoundedAttr(el, 'y2'),\n            opacity: getRoundedAttr(el, 'opacity'),\n            width: getRoundedAttr(el, 'width'),\n            height: getRoundedAttr(el, 'height'),\n            stroke: el.getAttribute('stroke'),\n            \"stroke-width\": getRoundedAttr(el, 'stroke-width'),\n            text: !el.childNodes || (el.childNodes.length === 1 && !(el.childNodes[0] as HTMLElement).tagName) ? el.textContent : undefined,\n            'font-size': el.getAttribute('font-size'),\n            'font-family': el.getAttribute('font-family'),\n            'font': el.getAttribute('font'),\n            'text-anchor': el.getAttribute('text-anchor'),\n            href: el.getAttribute('href'),\n            style: {},\n            styleSpecificity: {},\n            children: [],\n            globalElementIndex: -1,\n        };\n\n        for(const styleProp in el.style) {\n            if(el.style.hasOwnProperty(styleProp)) {\n                const val = el.style[styleProp];\n                if(val !== '' && typeof el.style[styleProp] !== 'function') {\n                    const kebabCase = styleProp.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n                    node.style[kebabCase] = el.style[styleProp];\n                }\n            }\n        }\n\n        const clean = obj => {\n            const propNames = Object.getOwnPropertyNames(obj);\n            for (let i = 0; i < propNames.length; i++) {\n                const propName = propNames[i];\n                if (obj[propName] === null || obj[propName] === undefined) {\n                    delete obj[propName];\n                }\n            }\n        };\n        \n        clean(node);\n        \n        return node;\n    }\n\n    private applyStyles() {\n        for (let i = 0; i < document.styleSheets.length; i++) {\n            const sheet = document.styleSheets[i] as any;\n            const rules = (sheet.rules ? sheet.rules : sheet.cssRules) as CSSRuleList;\n        \n            for (let j = 0; j < rules.length; j++) {\n                const rule = rules[j] as any;\n                const selector = rule.selectorText as string;\n                if(!selector) {\n                    continue; // Skip @imports etc.\n                }\n                this.applyRuleToMatchingNodes(selector, rule);\n            }\n        }\n\n        this.nodesToRestyle = [];\n    }\n\n    updateNodeSelector(oldSelector: string, newSelector: string) {\n        /*if(oldSelector === newSelector) {\n            return;\n        }\n        if(this.setAttrQueue[newSelector]) {\n            console.warn('having problems rearranging the elements! old:', oldSelector, ', new:', newSelector,\n                this.setAttrQueue[oldSelector], this.setAttrQueue[newSelector]);\n            delete this.setAttrQueue[oldSelector];\n        } else {\n            this.setAttrQueue[newSelector] = this.setAttrQueue[oldSelector];\n            delete this.setAttrQueue[oldSelector];\n        }*/\n    }\n\n    private applyRuleToMatchingNodes(selectorString: string, rule: {style: {[settingName: string]: string}}): boolean {\n        selectorString = selectorString.trim();\n\n        const selector = selectorString\n            .replace(' >', '>')\n            .replace('> ', '>')\n            .replace('svg>', '');\n        \n        const selectorPartsLooseStrict = selector.split(' ')\n            .map(part => part.split('>'));\n\n\n        const parentsOfInterest = [];\n        for(const nodeToBeStyled of this.nodesToRestyle) {\n            let parent = this.getNodeParent(nodeToBeStyled);\n            while(parent && parentsOfInterest.indexOf(parent) === -1) {\n                parentsOfInterest.push(parent);\n                parent = this.getNodeParent(parent);\n            }\n        }\n        const specificity = DrawingUtils.getCssRuleSpecificityNumber(selectorString);\n\n        const setStyle = (styleName: string, rule: {style: {[settingName: string]: string}}, child: VdomNode) => {\n            if(rule.style[styleName]) {\n                const longName = 'style;' + styleName;\n                const longSpecName = 'styleSpecificity;' + styleName;\n                this.setAttrQueue.ensureInitialized(longName, false, this.nodesToElements.nodes.length);\n                this.setAttrQueue.ensureInitialized(longSpecName, false, this.nodesToElements.nodes.length);\n                /*this.checkAttrName(parentSelector, longName);\n                this.checkAttrName(parentSelector, longSpecName);*/\n                let setValue = false;\n\n                if(!this.setAttrQueue.get(child, longName) && !child.style[styleName]) {\n                    setValue = true;\n                } else {\n                    if(child.styleSpecificity[styleName]) {\n                        // If a later rule has the same or higher specificity, apply.\n                        // Hence, later rules override earlier rules.\n                        if(child.styleSpecificity[styleName] <= specificity) {\n                            if(this.setAttrQueue.get(child, longSpecName)) {\n                                setValue = this.setAttrQueue.get(child, longSpecName) <= specificity;\n                            } else {\n                                setValue = true;\n                            }\n                        } else {\n                            setValue = this.setAttrQueue.get(child, longSpecName) <= specificity;\n                        }\n                    } else {\n                        setValue = this.setAttrQueue.get(child, longSpecName) <= specificity;\n                    }\n                }\n\n                if(setValue) {\n                    this.setAttrQueue.set(child, longName, rule.style[styleName], false);\n                    this.setAttrQueue.set(child, longSpecName, specificity, false);\n                    /*this.setAttrQueue[parentSelector][longName][childIndex] = rule.style[styleName];\n                    this.setAttrQueue[parentSelector][longSpecName][childIndex] = specificity;*/\n                }\n            }\n        };\n\n        const checkNode = (currentNode: VdomNode, looseIndex = 0, strictIndex = 0): boolean => {\n            const selPart = selectorPartsLooseStrict[looseIndex][strictIndex];\n\n            for(let childIndex = 0; childIndex < currentNode.children.length; childIndex++) {\n                const child = currentNode.children[childIndex];\n                if(parentsOfInterest.indexOf(child) === -1 && this.nodesToRestyle.indexOf(child) === -1) {\n                    continue;\n                }\n                let partialMatch = VdomManager.isCssRulePartialMatch(selPart, child, currentNode);\n\n                if(partialMatch) {\n                    if(selectorPartsLooseStrict[looseIndex].length > strictIndex + 1) {\n                        checkNode(child, looseIndex, strictIndex + 1);\n                    } else if(selectorPartsLooseStrict.length > looseIndex + 1) {\n                        checkNode(child, looseIndex + 1, strictIndex);\n                    } else {\n                        const parentSelector = this.getNodeSelector(currentNode);\n\n                        for(const styleName of CSS_STYLES) {\n                            setStyle(styleName, rule, child);\n                        }\n                    }\n                } else {\n                    if(child['removedClasses']) {\n                        // temporarily add the class, see if it matches this rule, and if so, un-apply its stuff.\n                        for(const removedClass of child['removedClasses']) {\n                            child.className += ' ' + removedClass;\n\n                            let newPartialMatch = VdomManager.isCssRulePartialMatch(selPart, child, currentNode);\n                            if(newPartialMatch) {\n                                const parentSelector = this.getNodeSelector(currentNode);\n                                this.removeRuleStylesFromNode(parentSelector, child, childIndex, rule);\n                            }\n\n                            child.className = child.className.substr(0, child.className.length -\n                                removedClass.length - 1);\n                        }\n                        setTimeout(() => {\n                            delete child['removedClasses'];\n                        }); // After this frame, reset which classes have been removed.\n                    }\n                    checkNode(child, looseIndex, strictIndex);\n                }\n            }\n            return false;\n        };\n\n        return checkNode(this.vdom.data);\n    }\n\n    removeRuleStylesFromNode(parentSelector: string, child: VdomNode, childIndex: number,\n                             rule: {style: {[settingName: string]: string}}) {\n        if(rule.style['stroke']) {\n            const color = drawingUtils.colorToRgba(rule.style['stroke']);\n            if(child.style['stroke'] === color || child.style['stroke-rgba'] === color) {\n                //this.checkAttrName(parentSelector, 'style;stroke');\n                //this.setAttrQueue[parentSelector]['style;stroke'][childIndex] = '';\n                //this.checkAttrName(parentSelector, 'style;stroke-rgba');\n                //this.setAttrQueue[parentSelector]['style;stroke-rgba'][childIndex] = '';\n\n                this.setAttrQueue.ensureInitialized('style;stroke', false, this.nodesToElements.nodes.length);\n                this.setAttrQueue.ensureInitialized('style;stroke-rgba', false, this.nodesToElements.nodes.length);\n                this.setAttrQueue.set(child, 'style;stroke', '', false);\n                this.setAttrQueue.set(child, 'style;troke-rgba', '', false);\n            }\n        }\n        //TODO remove other styles.\n    }\n\n    removeNodeFromParent(element: Element, node: VdomNode, parentNode: VdomNode) {\n        const childIndex = element['childIndex'];\n        //console.log('removing', node, 'from', parentNode, [...parentNode.children], childIndex, childIndex2);\n        this.vdom.removeNode(childIndex, parentNode.globalElementIndex);\n        let index = this.nodesToElements.nodes.indexOf(node);\n        if(index === -1) {\n            return console.error('node not found', node);\n        }\n\n        this.nodesToElements.nodes.splice(index, 1);\n        this.nodesToElements.elements.splice(index, 1);\n\n        // Remove all pending changes on this element\n        this.setAttrQueue.removePendingChanges(node);\n    }\n\n    addNodeToParent(parentNode, node) {\n        parentNode.children.push(node);\n        this.nodesToRestyle.push(node);\n    }\n    \n    private addChildNodesToVisData(childEls: HTMLElement[]|NodeList, parentNode: VdomNode): void {\n        const parentEl = this.getElementFromNode(parentNode);\n\n        for(let i  = 0; i < childEls.length; i++) {\n            let el = childEls[i] as HTMLElement;\n            \n            try\n            {\n                const node = this.getNodeDataFromEl(el);\n\n                (el as any)['parentSelector'] = this.getElementSelector(parentEl);\n                (el as any)['selector'] = this.getElementSelector(<Element><any> el);\n                (el as any)['childIndex'] = parentNode.children.length;\n\n                parentNode.children.push(node);\n                this.linkNodeToElement(node, el);\n                this.nodesToRestyle.push(node);\n                \n                if(el.childNodes)\n                {\n                    this.addChildNodesToVisData(el.childNodes, node);\n                }\n                if(node.type === 'tspan')\n                {\n                    //console.log(node, el, el.childNodes, el.textContent);\n                    //console.log(el.childNodes[0])\n                    //console.log(node, style.textAnchor);\n                }\n                if(node.type === 'text')\n                {\n                    //console.log(node, el, el.childNodes, el.textContent);\n                }\n            }\n            catch(e)\n            {\n                //console.log(e);\n                //console.log(el);\n            }\n        }\n    }\n\n    getNodeSelector(node: VdomNode): string {\n        if(node === this.vdom.data) {\n            return 'svg';\n        }\n        const element = this.getElementFromNode(node);\n        if(!element) {\n            console.error('could not find element for node ', node);\n            return '';\n        }\n        return this.getElementSelector(element, undefined, node);\n    }\n    \n    getElementSelector(element: Element, parentNode?: VdomNode, node?: VdomNode): string|null {\n        let sel = (element as any)['selector'];\n        \n        if(sel)\n        {\n            return sel;\n        }\n        else\n        {\n            if(element === this.svg) {\n                sel = 'svg';\n            } else {\n                let parentSelector = (element as any)['parentSelector'] ?\n                    (element as any)['parentSelector'] as string : '';\n\n                if(!parentNode) {\n                    parentNode = this.vdom.getVisNodeFromSelector(parentSelector);\n                }\n                if(!parentNode) {\n                    console.warn('Element not found', element, parentSelector, parentSelector.length, this.vdom.data);\n                    return null;\n                }\n                let index = parentNode.children.length + 1;\n                if(node && parentNode.children.indexOf(node) !== -1) {\n                    index = parentNode.children.indexOf(node) + 1;\n                }\n                let name = element.localName;\n                if (!name) {\n                    console.error(parentNode);\n                    throw Error('name is null');\n                }\n                name = name.toLowerCase();\n                sel = this.combineElementSelectors(parentSelector, name, index);\n            }\n            \n            return sel;\n        }\n    }\n\n    combineElementSelectors(parentSelector: string, elementType: string, childIndex: number) {\n        return parentSelector + ' > ' + elementType + ':nth-child(' + childIndex + ')';\n    }\n\n    getNodeParent(node:VdomNode): VdomNode|null {\n        if(node === this.vdom.data) {\n            return null;\n        }\n        const el = this.getElementFromNode(node);\n        if(!el) {\n            return null;\n        }\n        const parentEl = el.parentNode as Element;\n        return this.getNodeFromElement(parentEl);\n    }\n\n    linkNodeToElement(node: VdomNode, element: Node) {\n        this.nodesToElements.nodes.push(node);\n        node.globalElementIndex = this.nodesToElements.elements.length;\n        this.nodesToElements.elements.push(element as Element);\n    }\n\n    getElementFromNode(node: VdomNode): Element {\n        if(node === this.vdom.data) {\n            return this.svg;\n        }\n        return this.nodesToElements.elements[node.globalElementIndex];\n    }\n\n    getNodeFromElement(element: Element): VdomNode {\n        if(element === this.svg) {\n            return this.vdom.data;\n        }\n        const elementIndex = this.nodesToElements.elements.indexOf(element);\n        return this.nodesToElements.nodes[elementIndex];\n    }\n\n    getParentNode(node: VdomNode): VdomNode|null {\n        const element = this.getElementFromNode(node);\n        const parentElement = element.parentNode as Element;\n        return this.getNodeFromElement(parentElement);\n    }\n\n    getTotalTransformation(node: VdomNode): Transformation {\n        let parent = this.getParentNode(node);\n        const parents = [node];\n\n        while(parent) {\n            parents.push(parent);\n            parent = this.getParentNode(parent);\n        }\n\n        parent = parents.pop();\n        let totalTransform: Transformation = {\n            translateX: 0,\n            translateY: 0,\n            scaleX: 0,\n            scaleY: 0,\n            rotate: 0,\n            translateBeforeScale: false\n        };\n\n        while(parent) {\n            const transform = DrawingUtils.parseTransform(parent.transform);\n            totalTransform = DrawingUtils.addTransforms(totalTransform, transform);\n            parent = parents.pop();\n        }\n\n        return totalTransform;\n    }\n}\n\nlet safeLogCount = 0;\nfunction safeLog(...logContents) {\n    \n    if(safeLogCount < 50) {\n        safeLogCount++;\n        console.log(...logContents);\n    }\n}\nfunction safeErrorLog(...logContents) {\n    \n    if(safeLogCount < 50) {\n        safeLogCount++;\n        console.error(...logContents);\n    }\n}\n","import DrawingUtils from \"../../canvasworker/drawingUtils\";\nimport SetPropertyQueueData from \"./set-property-queue-data\";\nimport {VDOM, VdomNode} from \"./vdom\";\nimport SetPropertyQueue from \"./set-property-queue\";\n\nexport class VdomManager {\n    private sharedData: {[attrName: string]: Int32Array} = {};\n    private static ATTRIBUTES_NOT_IGNORED_WITH_IGNOREDESIGN = ['fill', 'stroke', 'opacity', 'x1', 'x2', 'y1', 'y2', 'x',\n        'y'];\n    private indexToNodeMap: {[index: number]: VdomNode} = {};\n    \n    constructor(public data: VDOM, private ignoreDesign: boolean) {\n        this.ensureNodesMapped();\n    }\n\n    ensureNodesMapped() {\n        const addToMap = (node: VdomNode) => {\n            if(node.globalElementIndex === undefined) {\n                console.error('no element index', node);\n            }\n            this.indexToNodeMap[node.globalElementIndex] = node;\n            for(const child of node.children) {\n                addToMap(child);\n            }\n        };\n        addToMap(this.data);\n    }\n\n    enableFrontendDesignProperties() {\n        this.ignoreDesign = false;\n    }\n    \n    addNode(nodeData: VdomNode, parentNodeIndex: number) {\n        let parentNode = this.getNodeFromIndex(parentNodeIndex);\n        if(!parentNode) {\n            console.error('could not add node without parent', parentNodeIndex, nodeData, JSON.stringify(Object.keys(this.indexToNodeMap)));\n            new Error('parent not found');\n            return;\n        }\n        this.applyParentStyles(parentNode, nodeData);\n        \n        parentNode.children.push(nodeData);\n        this.indexToNodeMap[nodeData.globalElementIndex] = nodeData;\n        return nodeData;\n    }\n\n    removeNode(childIndex: number, parentNodeIndex: number) {\n        const parentNode = this.getNodeFromIndex(parentNodeIndex);\n\n        parentNode.children.splice(childIndex, 1);\n        this.cachedListSelections = {}; //TODO only remove relevant cache.\n    }\n\n    applyParentStyles(parentNode: VdomNode, childNode: VdomNode) {\n        for(const style in parentNode.style) {\n            if(!childNode.style[style]) {\n                childNode.style[style] = parentNode.style[style];\n            }\n        }\n    }\n    \n    getParentNodeFromSelector(parentSelector: string) {\n        if(!parentSelector) {\n            console.error('no parent selector', parentSelector);\n        }\n        //if(setAttrQueue.hasOwnProperty(parentSelector)) {\n        let parentNode;\n        if(parentSelector === 'SVG_PARENT') {\n            parentNode = {children: [this.data]};\n        } else {\n            parentNode = this.getVisNodeFromSelector(parentSelector);\n        }\n        if(!parentNode) {\n            console.error('parent node not found with selector', parentSelector);\n        }\n        return parentNode;\n    }\n\n    applyStyleToNodeAndChildren(node: VdomNode, styleName: string, styleValue: string, specificity: number) {\n        if(!node['styleSpecificity'][styleName] || node['styleSpecificity'][styleName] <= specificity) {\n            node['style'][styleName] = styleValue;\n            node['styleSpecificity'][styleName] = specificity;\n        }\n\n        if(node.children) {\n            for(let child of node.children) {\n                this.applyStyleToNodeAndChildren(child, styleName, styleValue, specificity);\n            }\n        }\n    }\n\n    private getNodeFromIndex(index: number): VdomNode {\n        return this.indexToNodeMap[index];\n    }\n\n    private static ROUNDED_ATTRS = ['cx', 'cy'];\n\n    get(node: VdomNode, attrName: string) {\n        if(attrName in this.sharedData) {\n            return this.sharedData[attrName][node.globalElementIndex] / SetPropertyQueue.BUFFER_PRECISION_FACTOR;\n        } else {\n            return node[attrName];\n        }\n    }\n\n    updatePropertiesFromQueue(setAttrQueue: SetPropertyQueueData) {\n                \n        for(let attrName in setAttrQueue) {\n            if(!setAttrQueue.hasOwnProperty(attrName)) {\n                continue;\n            }\n            const attrNameStart = attrName.substr(0, 'style;'.length);\n\n            if(this.ignoreDesign && (attrNameStart === 'style;' ||\n                VdomManager.ATTRIBUTES_NOT_IGNORED_WITH_IGNOREDESIGN.indexOf(attrName) !== -1)) {\n                continue;\n            }\n\n            let values: string[]|Int32Array;\n            let factor: number|undefined;\n\n            if('SharedArrayBuffer' in self &&\n                setAttrQueue[attrName] instanceof SharedArrayBuffer) {\n                values = new Int32Array(<ArrayBuffer> setAttrQueue[attrName]);\n                //factor = 1 / SetPropertyQueue.BUFFER_PRECISION_FACTOR;\n                this.sharedData[attrName] = values;\n            } else {\n                values = setAttrQueue[attrName] as string[];\n\n                for(let childIndex in values) {\n                    // This skips all values that are 0 because the SharedArrayBuffer fills up with zeros.\n                    //TODO(michaschwab): Find a solution for zero values.\n                    if(!values.hasOwnProperty(childIndex)) {\n                        continue;\n                    }\n                    /*if(values[childIndex] === 0) {\n                        continue;\n                    }*/\n                    const index = parseInt(childIndex);\n                    const childNode = this.getNodeFromIndex(index);\n                    if(!childNode) {\n                        continue;\n                    }\n                    //let value = factor ? factor * <number> values[childIndex] : values[childIndex];\n                    let value: string|number = values[childIndex];\n                    /*if(values[childIndex] === 133713371337) { // magical constant\n                        value = 0;\n                    }*/\n                    if(attrNameStart === 'style;') {\n                        const styleName = attrName.substr('style;'.length);\n                        const specificityAttrName = 'styleSpecificity;' + styleName;\n                        try {\n                            const matchingSpecificity: number = setAttrQueue[specificityAttrName][childIndex];\n                            this.applyStyleToNodeAndChildren(childNode, styleName, <string> value, matchingSpecificity);\n                            this.updateDeducedStyles(childNode, styleName, <string> value);\n                        } catch (e) {\n                            console.error(setAttrQueue, specificityAttrName, childIndex);\n                            this.applyStyleToNodeAndChildren(childNode, styleName, <string> value, -1);\n                        }\n\n                    } else {\n                        if(VdomManager.ROUNDED_ATTRS.indexOf(attrName) !== -1) {\n                            value = Math.round(<number> parseFloat(value));\n                        }\n                        childNode[attrName] = value;\n                        this.updateDeducedStyles(childNode, attrName, <string> value);\n                    }\n                }\n            }\n        }\n    }\n\n    updateDeducedStyles(node: VdomNode, attrName: string, value: string) {\n        if(['opacity', 'fill-opacity', 'stroke-opacity', 'stroke', 'fill'].indexOf(attrName) !== -1) {\n            let stroke = node.style.stroke ? node.style.stroke : node.stroke;\n            if(stroke) {\n                let strokeOpacity = node.style['stroke-opacity'] === undefined ? node.style['opacity']\n                    : node.style['stroke-opacity'];\n                if(strokeOpacity === undefined) {\n                    strokeOpacity = node['stroke-opacity'] === undefined ? node['opacity'] : node['stroke-opacity'];\n                }\n\n                node.style['stroke-rgba'] = DrawingUtils.colorToRgba(stroke, strokeOpacity);\n            }\n        }\n    }\n    \n    private cachedListSelections: {[selector: string]: {[index: number]: VdomNode}} = {};\n    public getVisNodeFromSelector(selector: string): VdomNode|null {\n        const lastSplitPos = selector.lastIndexOf('>');\n        const selectorWithoutLast = selector.substr(0, lastSplitPos);\n        const lastPart = selector.substr(lastSplitPos + 1);\n        const parentSel = selectorWithoutLast ? this.cachedListSelections[selectorWithoutLast] : null;\n        let index = -1;\n        const nthChildPosition = lastPart.indexOf(':nth-child(');\n        if(nthChildPosition !== -1) {\n            index = parseInt(lastPart.substr(nthChildPosition + 11)); // length of ':nth-child('\n            if(parentSel && parentSel[index]) {\n                return parentSel[index];\n            }\n        }\n        \n        const selectedNodes: VdomNode[] = [];\n        this.findMatchingChildren(this.data, selector, 0, selectedNodes);\n        \n        if(selectedNodes && selectedNodes.length === 1) {\n            const el = selectedNodes[0];\n            if(index !== -1) {\n                if(!this.cachedListSelections[selectorWithoutLast]) {\n                    this.cachedListSelections[selectorWithoutLast] = {};\n                }\n                this.cachedListSelections[selectorWithoutLast][index] = el;\n            }\n            return el;\n        }\n        return null;\n    }\n    \n    public getVisNodesFromSelector(visNode: VdomNode, selector: string) {\n        const selectedNodes = [];\n        this.findMatchingChildren(visNode, selector, 0, selectedNodes);\n        return selectedNodes;\n    }\n\n    private findChildrenOfType(visNode: VdomNode, type: string, selectedNodes: VdomNode[]) {\n        const addDirectChildrenIfMatch = (node: VdomNode) => {\n            for(const child of node.children) {\n                if(child.type === type) {\n                    selectedNodes.push(child);\n                }\n                if(node.children.length !== 0) {\n                    addDirectChildrenIfMatch(child);\n                }\n            }\n        };\n        addDirectChildrenIfMatch(visNode);\n    }\n\n    public filterNodesBySelector(parentNode: VdomNode, nodes: VdomNode[], selector: string) {\n        return nodes.filter(node => VdomManager.isCssRulePartialMatch(selector, node, parentNode));\n    }\n    \n    private findMatchingChildren(visNode: VdomNode, selector: string, matchIndex: number, selectedNodes: VdomNode[],\n                                 selectedNodeSelectors: string[] = []) {\n        if(!selector && selector !== '') {\n            console.error(visNode, selector, matchIndex, selectedNodes, selectedNodeSelectors);\n            throw Error('undefined selector');\n        }\n\n        let selParts = selector.split('>').map(s => s.trim());\n        let selPart = selParts[matchIndex];\n        \n        if(matchIndex === 0 && selPart === 'svg') {\n            matchIndex++;\n            selPart = selParts[matchIndex];\n            if(matchIndex === selParts.length) {\n                selectedNodes.push(visNode);\n                selectedNodeSelectors.push(selector);\n                return;\n            }\n        }\n\n        if(selector.match(/^[a-z]+$/)) {\n            return this.findChildrenOfType(visNode, selector, selectedNodes);\n        }\n        \n        for(let i = 0; i < visNode.children.length; i++) {\n            let node = visNode.children[i];\n            let matching = false;\n            \n            if(VdomManager.isCssRulePartialMatch(selPart, node, visNode)) {\n                if(matchIndex === selParts.length - 1) {\n                    selectedNodes.push(node);\n                    selectedNodeSelectors.push(selector);\n                } else {\n                    matching = true;\n                }\n            }\n            \n            if(node.children && (matching || selParts.length < 2) && matchIndex + 1 < selParts.length) {\n                this.findMatchingChildren(node, selector, matchIndex + 1, selectedNodes, selectedNodeSelectors);\n            }\n        }\n    }\n\n    public static isCssRulePartialMatch(cssRuleSelectorPart: string, node: VdomNode, parentNode: VdomNode): boolean {\n        if(cssRuleSelectorPart.substr(0, 5) === ':not(') {\n            const newSelPart = cssRuleSelectorPart.substr(0, cssRuleSelectorPart.length - 1).substr(5);\n            return !VdomManager.isCssRulePartialMatch(newSelPart, node, parentNode);\n        }\n        if(cssRuleSelectorPart[0] === '.') { // Example: .className or .classnameA.classnameB\n            const searchClassNames = cssRuleSelectorPart.split('.');\n            searchClassNames.shift(); // remove empty first string.\n            if(node.className) {\n                let allTrue = true;\n                for(const searchClassName of searchClassNames) {\n                    if(node.className.split(' ').indexOf(searchClassName) === -1) {\n                        allTrue = false;\n                    }\n                }\n                return allTrue;\n            }\n        } else if(cssRuleSelectorPart[0] === '#') { // Example: #id\n            if(cssRuleSelectorPart.substr(1) === node.id) {\n                return true;\n            }\n        } else if(cssRuleSelectorPart.match(/^[a-z]+$/)) { // Example: rect\n            if(cssRuleSelectorPart === node.type) {\n                return true;\n            }\n        } else if(cssRuleSelectorPart.indexOf(':nth-child(') !== -1) {\n            let type = 'any';\n            let indexPart = cssRuleSelectorPart;\n\n            if(cssRuleSelectorPart[0] !== ':') {\n                type = cssRuleSelectorPart.substr(0, cssRuleSelectorPart.indexOf(':'));\n                indexPart = cssRuleSelectorPart.substr(cssRuleSelectorPart.indexOf(':'));\n            }\n\n            const targetIndex = parseInt(indexPart.substr(':nth-child('.length));\n            const index = parentNode.children.indexOf(node);\n\n            return (index === targetIndex - 1 && (type === 'any' || node.type === type));\n        }\n        else if(cssRuleSelectorPart.indexOf('.') !== -1) { // Example: rect.className\n            const cutoff = cssRuleSelectorPart.indexOf('.');\n            const typeName = cssRuleSelectorPart.substr(0, cutoff);\n            const className = cssRuleSelectorPart.substr(cutoff + 1);\n            if(typeName === node.type && node.className && node.className.split(' ').indexOf(className) !== -1) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\nlet safeLogCount = 0;\nfunction safeLog(...logContents) {\n    if(safeLogCount < 50) {\n        safeLogCount++;\n        console.log(...logContents);\n    }\n}\nfunction safeErrorLog(...logContents) {\n    if(safeLogCount < 50) {\n        safeLogCount++;\n        console.error(...logContents);\n    }\n}\n","import {VdomNode} from \"../util/vdom/vdom\";\nimport {VdomManager} from \"../util/vdom/vdom-manager\";\nimport DrawingUtils from \"./drawingUtils\";\nimport CanvasWorker from \"./canvasworker\";\n\ntype DrawMode = 'start'|'normal'|'end'|'forcesingle';\n\nexport default class Canvasrenderer implements CanvasWorker {\n    \n    private ctx: CanvasRenderingContext2D;\n    \n    constructor(private vdom: VdomManager, private canvas: HTMLCanvasElement,\n                private forceSingle = false, private onDrawn = () => {}) {\n        const ctx = canvas.getContext('2d');\n        if(!ctx) throw new Error('could not create canvas context');\n        \n        this.ctx = ctx;\n        this.ctx.scale(this.vdom.data.scale, this.vdom.data.scale);\n        this.ctx.save();\n        \n        this.draw();\n        \n        setTimeout(() => {\n            console.log(this.forceSingle, this.vdom.data);\n            this.draw();\n        }, 1000);\n    }\n    \n    private lastFullSecond = 0;\n    private countSinceLastFullSecond = 0;\n    \n    draw() {\n        const ctx = this.ctx;\n        \n        ctx.restore();\n        ctx.save();\n        \n        //ctx.fillStyle = '#fff';\n        //ctx.fillRect(0, 0, this.vdom.data.width, this.vdom.data.height);\n        ctx.clearRect(0, 0, this.vdom.data.width, this.vdom.data.height);\n    \n        //this.lastDrawn = null;\n        this.drawLine(null, 'start');\n        this.drawCircle(null, 'start');\n        this.drawRect(null, 'start');\n        this.drawText(null, 'start');\n        this.drawImage(null, 'start');\n\n        this.drawNodeAndChildren(this.vdom.data, this.forceSingle);\n\n        this.drawLine(null, 'end');\n        this.drawCircle(null, 'end');\n        this.drawRect(null, 'end');\n        this.drawText(null, 'end');\n        this.drawImage(null, 'end');\n        \n        this.onDrawn();\n    \n        const fullSecond = Math.round(performance.now() / 1000);\n        if(fullSecond !== this.lastFullSecond) {\n            this.lastFullSecond = fullSecond;\n            //console.log(this.countSinceLastFullSecond);\n            this.countSinceLastFullSecond = 0;\n        }\n        this.countSinceLastFullSecond++;\n    }\n    \n    private drawNodeAndChildren(elData: VdomNode, forceSingle: boolean) {\n        const ctx = this.ctx;\n\n        ctx.save();\n        const hasTransformed = this.applyTransform(elData.transform);\n\n        if(elData.transform) {\n            forceSingle = true;\n        }\n        \n        if(elData.type && elData.type !== 'g' && (!elData.style.display || elData.style.display !== 'none')) {\n            if(elData.type === 'title') {\n                return;\n            }\n            \n            if(!forceSingle) {\n                /*if(!this.lastDrawn || (this.lastDrawn && this.lastDrawn.type !== elData.type)) {\n                    if(this.lastDrawn) {\n                        this.drawSingleNode(this.lastDrawn, 'end');\n                    }\n                    this.drawSingleNode(elData, 'start');\n                }*/\n    \n                this.drawSingleNode(elData);\n            } else {\n                this.drawSingleNode(elData, 'forcesingle');\n            }\n            \n            //this.lastDrawn = elData;\n        }\n        \n        if(elData.children) {\n            for(let i = 0; i < elData.children.length; i++) {\n                this.drawNodeAndChildren(elData.children[i], forceSingle);\n            }\n        }\n        ctx.restore();\n        if(hasTransformed) {\n            //ctx.restore();\n        }\n    }\n    \n    private drawSingleNode(elData: VdomNode, mode: DrawMode = 'normal') {\n        const type: string = elData.type;\n        const drawFct = this['draw' + type.substr(0,1).toUpperCase() + type.substr(1)];\n        if(!drawFct) {\n            return console.error('no draw function yet for ', type);\n        }\n        drawFct.call(this, elData, mode);\n    }\n\n    private drawClippath(elData: VdomNode) {\n        console.warn('clippaths can not be rendered yet.')\n    }\n    \n    private circlesByColor: {[color: string]: VdomNode[]} = {};\n    private drawCircle(elData: VdomNode, mode: DrawMode = 'normal') {\n        if(mode === 'normal') {\n            let fill = this.getFillStyle(elData, '#000');\n            const stroke = this.getStrokeStyle(elData);\n            const handle = fill + ';' + stroke;\n            if(!this.circlesByColor[handle]) {\n                this.circlesByColor[handle] = [];\n            }\n            this.circlesByColor[handle].push(elData);\n        }\n        if(mode === 'start') {\n            this.circlesByColor = {};\n            return;\n        }\n        if(mode === 'end') {\n            for(let fillAndStrokeColor in this.circlesByColor) {\n                if(this.circlesByColor.hasOwnProperty(fillAndStrokeColor)) {\n                    const split = fillAndStrokeColor.split(';');\n                    const fillColor = split[0];\n                    const strokeColor = split[1];\n\n                    this.ctx.fillStyle = fillColor;\n                    let sampleData = this.circlesByColor[fillAndStrokeColor][0];\n                    const lineWidth = this.getStrokeWidth(sampleData);\n                    this.ctx.lineWidth = lineWidth !== undefined ? lineWidth : 1;\n                    this.ctx.strokeStyle = strokeColor;\n\n                    this.ctx.beginPath();\n                    for(let elData of this.circlesByColor[fillAndStrokeColor]) {\n                        const cx = this.vdom.get(elData, 'cx') ? this.vdom.get(elData, 'cx') : 0;\n                        const cy = this.vdom.get(elData, 'cx') ? this.vdom.get(elData, 'cy') : 0;\n                        const r = this.vdom.get(elData, 'r');\n                        this.ctx.save();\n                        this.applyTransform(elData.transform);\n                        this.ctx.moveTo(cx + r, cy);\n                        this.ctx.arc(cx, cy, r, 0, 2 * Math.PI);\n                        this.ctx.restore();\n                        //this.ctx.restore();\n                    }\n\n                    if(fillColor !== 'none'){\n                        this.ctx.fill();\n                    }\n\n                    if(sampleData.style['stroke-rgba'] && sampleData.style['stroke-rgba'] !== 'none') {\n                        this.ctx.stroke();\n                    }\n                }\n            }\n            return;\n        }\n        if(mode === 'forcesingle') {\n            let fill = this.getFillStyle(elData, '#000');\n\n            const cx = this.vdom.get(elData, 'cx') || 0;\n            const cy = this.vdom.get(elData, 'cy') || 0;\n\n            this.ctx.beginPath();\n            this.ctx.fillStyle = fill;\n            this.ctx.strokeStyle = this.getStrokeStyle(elData);\n            this.ctx.lineWidth = this.getStrokeWidth(elData);\n            this.ctx.arc(cx, cy, elData.r, 0, 2 * Math.PI);\n            if(fill !== 'none'){\n                this.ctx.fill();\n            }\n\n            if(elData.style['stroke-rgba'] && elData.style['stroke-rgba'] !== 'none') {\n                this.ctx.stroke();\n            }\n        }\n    }\n\n    private getFillStyle(node: VdomNode, defaultColor = 'none'): string {\n        let fill = node.style.fill ? node.style.fill : node.fill;\n        let opacity = node.opacity;\n        if(node.style['fill-opacity']) {\n            opacity = parseFloat(node.style['fill-opacity']);\n        }\n        if(node.style['opacity']) {\n            opacity = parseFloat(node.style['opacity']);\n        }\n        fill = DrawingUtils.colorToRgba(fill, opacity, defaultColor);\n        return fill;\n    }\n\n    private getStrokeStyle(node: VdomNode): string {\n        if(node.style['stroke-rgba']) {\n            return node.style['stroke-rgba'];\n        }\n        let stroke = node.style.stroke ? node.style.stroke : node.stroke;\n        if(stroke !== undefined) {\n            let strokeOpacity = node.style['stroke-opacity'] === undefined ? node.style['opacity']\n                : node.style['stroke-opacity'];\n            if(strokeOpacity === undefined) {\n                strokeOpacity = node['stroke-opacity'] === undefined ? node['opacity'] : node['stroke-opacity'];\n            }\n\n            node.style['stroke-rgba'] = DrawingUtils.colorToRgba(stroke, strokeOpacity);\n            return node.style['stroke-rgba'];\n        }\n        return 'none';\n    }\n\n    private getStrokeWidth(node: VdomNode) {\n        const width = node.style['stroke-width'] !== undefined ? node.style['stroke-width'] : node['stroke-width'];\n        return width === undefined ? undefined : parseFloat(width);\n    }\n\n    private rectsByColor = {};\n\n    private drawRect(elData: VdomNode, mode: DrawMode = 'normal') {\n\n        if(mode === 'normal') {\n            let fill = elData.style.fill ? elData.style.fill : elData.fill;\n            let fillOpacity = elData['fill-opacity'] ? elData['fill-opacity'] : elData['opacity'];\n            let fillOpacityStyle = elData.style['fill-opacity'] ? elData.style['fill-opacity'] : elData.style['opacity'];\n\n            if(fillOpacityStyle !== undefined) {\n                fillOpacity = fillOpacityStyle;\n            }\n\n            //if(!fill) fill = '#000';\n            const fillRgba = DrawingUtils.colorToRgba(fill, fillOpacity);\n            const stroke = this.getStrokeStyle(elData);\n            const handle = fillRgba + ';' + stroke;\n            if(!this.rectsByColor[handle]) {\n                this.rectsByColor[handle] = [];\n            }\n            this.rectsByColor[handle].push(elData);\n        }\n        if(mode === 'start') {\n            this.rectsByColor = {};\n            return;\n        }\n        if(mode === 'end') {\n            for(let fillAndStrokeColor in this.rectsByColor) {\n                if(this.rectsByColor.hasOwnProperty(fillAndStrokeColor)) {\n                    const split = fillAndStrokeColor.split(';');\n                    const fillColor = split[0];\n                    const strokeColor = split[1];\n                    this.ctx.fillStyle = fillColor;\n\n                    let sampleData = this.rectsByColor[fillAndStrokeColor][0];\n                    const lineWidth = this.getStrokeWidth(sampleData);\n                    this.ctx.lineWidth = lineWidth !== undefined ? lineWidth : 1;\n                    this.ctx.strokeStyle = strokeColor;\n\n                    this.ctx.beginPath();\n                    for(let elData of this.rectsByColor[fillAndStrokeColor]) {\n                        const x = this.vdom.get(elData, 'x') || 0;\n                        const y = this.vdom.get(elData, 'y') || 0;\n                        this.ctx.save();\n                        this.applyTransform(elData.transform);\n                        this.ctx.moveTo(x, y);\n                        this.ctx.rect(x, y, elData.width, elData.height);\n                        this.ctx.restore();\n                        //this.ctx.restore();\n                    }\n                    if(fillColor !== 'none'){\n                        this.ctx.fill();\n                    }\n\n                    if(sampleData.style['stroke-rgba'] && sampleData.style['stroke-rgba'] !== 'none') {\n                        this.ctx.stroke();\n                    }\n                }\n            }\n            return;\n        }\n        if(mode === 'forcesingle') {\n            let fill = elData.style.fill ? elData.style.fill : elData.fill;\n            if(fill) {\n                fill = DrawingUtils.colorToRgba(fill, elData.style['fill-opacity']);\n            }\n\n            if(fill && fill !== 'none') {\n                this.ctx.fillStyle = elData.style.fill ? elData.style.fill : elData.fill;\n                this.ctx.fillRect(this.vdom.get(elData, 'x'), this.vdom.get(elData, 'y'),\n                    elData.width, elData.height);\n            }\n\n            let stroke = elData.style.stroke ? elData.style.stroke : elData.stroke;\n            if(stroke !== undefined) {\n                stroke = DrawingUtils.colorToRgba(stroke, elData.style['stroke-opacity']);\n                this.ctx.strokeStyle = stroke;\n                this.ctx.beginPath();\n                this.ctx.rect(this.vdom.get(elData, 'x'), this.vdom.get(elData, 'y'), elData.width, elData.height);\n                this.ctx.stroke();\n            }\n        }\n    }\n\n    private drawTexts: VdomNode[] = [];\n\n    private drawText(node: VdomNode, mode: DrawMode = 'normal') {\n        const drawSingle = (elData: VdomNode) => {\n            if(elData.text === '') {\n                return;\n            }\n            let fontFamily = 'Times New Roman';\n            if(elData['font-family']) {\n                fontFamily = elData['font-family'];\n            }\n            if(elData.style['font-family']) {\n                fontFamily = elData.style['font-family'];\n            }\n            let fontSize = '16px';\n            if(elData['font-size']) {\n                fontSize = DrawingUtils.convertSizeToPx(elData['font-size']) + 'px';\n            }\n            if(elData.style['font-size']) {\n                fontSize = DrawingUtils.convertSizeToPx(elData.style['font-size']) + 'px';\n            }\n            let font = elData.style['font'] ? elData.style['font'] : elData['font'];\n            if(!font) {\n                font = fontSize + ' ' + fontFamily;\n            }\n            let align = elData['text-anchor'] !== undefined ? elData['text-anchor'] : elData.style['text-anchor'];\n            if(align) {\n                if(align === 'middle') {\n                    align = 'center';\n                }\n                this.ctx.textAlign = align;\n            }\n            let fill = elData['fill'] ? elData['fill'] : elData.style['fill'];\n            if(!fill) fill = '#000';\n            this.ctx.font = font;\n            this.ctx.fillStyle = fill;\n            let x = this.vdom.get(elData, 'x') || 0;\n            let y = this.vdom.get(elData, 'y') || 0;\n            let dx = DrawingUtils.convertSizeToPx(elData.dx, false) || 0;\n            let dy = DrawingUtils.convertSizeToPx(elData.dy, false) || 0;\n            this.ctx.fillText(elData.text, x + dx, y + dy);\n        };\n        if(mode === 'start') {\n            this.drawTexts = [];\n            return;\n        }\n        if(mode === 'normal') {\n            this.drawTexts.push(node);\n            return;\n        }\n        if(mode === 'forcesingle') {\n            return drawSingle(node);\n        }\n        if(mode === 'end') {\n            for(const currentNode of this.drawTexts) {\n                drawSingle(currentNode);\n            }\n            return;\n        }\n    }\n\n    private drawImages: VdomNode[] = [];\n\n    private drawImage(node: VdomNode, mode: DrawMode = 'normal') {\n        const drawSingle = (elData: VdomNode) => {\n            if(elData.href === '') {\n                return;\n            }\n            let fill = elData['fill'] ? elData['fill'] : elData.style['fill'];\n            if(!fill) fill = '#000';\n            this.ctx.fillStyle = fill;\n            let x = this.vdom.get(elData, 'x') || 0;\n            let y = this.vdom.get(elData, 'y') || 0;\n            let width = elData.width || 0;\n            let height = elData.height || 0;\n            if(elData.image) {\n                try {\n                    this.ctx.drawImage(elData.image, x, y, width, height);\n                } catch(e) {\n                    console.log(e);\n                }\n            }\n        };\n        if(mode === 'start') {\n            this.drawImages = [];\n            return;\n        }\n        if(mode === 'normal') {\n            this.drawImages.push(node);\n            return;\n        }\n        if(mode === 'forcesingle') {\n            return drawSingle(node);\n        }\n        if(mode === 'end') {\n            for(const currentNode of this.drawImages) {\n                drawSingle(currentNode);\n            }\n            return;\n        }\n    }\n\n    private drawPath(elData: VdomNode, mode: DrawMode = 'normal') {\n        if(mode !== 'normal' && mode !== 'forcesingle') return;\n\n        const fill = this.getFillStyle(elData, '#000000');\n        const stroke = this.getStrokeStyle(elData);\n        const strokeWidth = this.getStrokeWidth(elData);\n\n        let p = new Path2D(elData.d);\n        this.ctx.fillStyle = fill;\n        if(stroke !== undefined && stroke !== 'none') {\n            if(strokeWidth !== undefined) {\n                this.ctx.lineWidth = strokeWidth;\n            }\n            this.ctx.strokeStyle = stroke;\n\n            if(elData.style['stroke-linejoin']) {\n                const lineJoin = elData.style['stroke-linejoin'];\n                if(lineJoin === 'bevel' || lineJoin === 'round' || lineJoin === 'miter') {\n                    this.ctx.lineJoin = lineJoin;\n                } else {\n                    console.error('unknown line join value:', lineJoin)\n                }\n            }\n            this.ctx.stroke(p);\n        }\n\n        if(fill && fill !== 'none') {\n            this.ctx.fill(p);\n        }\n    }\n    \n    private drawTspan(elData: VdomNode, mode: DrawMode = 'normal') {\n        if(mode !== 'normal' && mode !== 'forcesingle') return;\n        \n        this.ctx.font = \"10px Arial\";\n        this.ctx.fillStyle = \"#000000\";\n        const textAlign = <CanvasTextAlign> (elData.style.textAnchor === \"middle\" ? \"center\" : elData.style.textAnchor);\n        this.ctx.textAlign = textAlign;\n        this.ctx.fillText(elData.text, this.vdom.get(elData, 'x'), this.vdom.get(elData, 'y'));\n    }\n\n    private drawTextpath(elData: VdomNode) {\n        console.warn('no draw function yet for textpath');\n    }\n\n    private linesByColor: {[color: string]: VdomNode[]} = {};\n    private drawLine(elData, mode: DrawMode = 'normal') {\n        if(this.vdom.data.scale > 1) {\n            //mode = 'forcesingle';\n            // In my tests, drawing a long connected path is very slow for high DPI devices.\n        }\n        if(mode === 'normal') {\n            const stroke = this.getStrokeStyle(elData);\n            const width = this.getStrokeWidth(elData);\n            if(stroke === 'none' || width === 0) {\n                return;\n            }\n            const selector = `${stroke};${width}`;\n            if(!this.linesByColor[selector]) {\n                this.linesByColor[selector] = [];\n            }\n            this.linesByColor[selector].push(elData);\n        }\n        if(mode === 'start') {\n            this.linesByColor = {};\n            return;\n        }\n        if(mode === 'end') {\n            //safeLog(Object.keys(this.linesByColor), this.linesByColor);\n            for(let selector in this.linesByColor) {\n                if(this.linesByColor.hasOwnProperty(selector)) {\n                    const split = selector.split(';');\n                    const strokeColor = split[0];\n                    const width = split[1];\n\n                    this.ctx.strokeStyle = strokeColor;\n                    this.ctx.lineWidth = parseFloat(width);\n\n                    this.ctx.beginPath();\n                    for(let elData of this.linesByColor[selector]) {\n                        if(elData.transform) {\n                            this.ctx.save();\n                            this.applyTransform(elData.transform);\n                        }\n\n                        this.ctx.moveTo(this.vdom.get(elData, 'x1') || 0, this.vdom.get(elData, 'y1') || 0);\n                        this.ctx.lineTo(this.vdom.get(elData, 'x2') || 0, this.vdom.get(elData, 'y2') || 0);\n\n                        if(elData.transform) {\n                            //this.ctx.restore();\n                            this.ctx.restore();\n                        }\n                    }\n\n                    this.ctx.stroke();\n                }\n            }\n            return;\n        }\n        if(mode === 'forcesingle') {\n            this.ctx.beginPath();\n            this.ctx.moveTo(this.vdom.get(elData, 'x1') || 0, this.vdom.get(elData, 'y1') || 0);\n            this.ctx.lineTo(this.vdom.get(elData, 'x2') || 0, this.vdom.get(elData, 'y2') || 0);\n\n            this.ctx.strokeStyle = this.getStrokeStyle(elData);\n            this.ctx.lineWidth = this.getStrokeWidth(elData);\n            //safeLog(stroke, this.ctx.strokeStyle);\n            this.ctx.stroke();\n        }\n    }\n\n    private drawDefs(node: VdomNode) {\n        //TODO figure out.\n    }\n\n    private drawMarker(node: VdomNode) {\n        //TODO figure out.\n    }\n    \n    private applyTransform(transformString: string) {\n        const transform = transformString ? DrawingUtils.parseTransform(transformString) : null;\n        if(transform) {\n            if(transform.rotate) {\n                //console.log(transform.rotate);\n            }\n            //console.log(transformString);\n            this.ctx.rotate(transform.rotate * Math.PI / 180);\n            const x = transform.translateBeforeScale ? transform.translateX : transform.translateX * transform.scaleX;\n            const y = transform.translateBeforeScale ? transform.translateY : transform.translateY * transform.scaleY;\n            this.ctx.transform(transform.scaleX, 0, 0, transform.scaleY, x, y);\n            //ctx.rotate(transform.rotate / 2 / Math.PI);\n\n            //console.log(transform.rotate);\n            return true;\n        }\n        return false;\n    }\n}\n\n\nlet safeLogCount = 0;\nfunction safeLog(...logContents) {\n    \n    if(safeLogCount < 50) {\n        safeLogCount++;\n        console.log(...logContents);\n    }\n}\nfunction safeErrorLog(...logContents) {\n    \n    if(safeLogCount < 50) {\n        safeLogCount++;\n        console.error(...logContents);\n    }\n}\n","import './custom';\nimport CanvasWorkerImporter = require('worker-loader?inline=true!./canvasworker');\n\nexport default CanvasWorkerImporter;","module.exports = function() {\n  return require(\"!!/home/micha/WebstormProjects/ssvg/node_modules/worker-loader/dist/workers/InlineWorker.js\")(\"!function(t){var e={};function s(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,s),i.l=!0,i.exports}s.m=t,s.c=e,s.d=function(t,e,r){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},s.r=function(t){\\\"undefined\\\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:\\\"Module\\\"}),Object.defineProperty(t,\\\"__esModule\\\",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&\\\"object\\\"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(s.r(r),Object.defineProperty(r,\\\"default\\\",{enumerable:!0,value:t}),2&e&&\\\"string\\\"!=typeof t)for(var i in t)s.d(r,i,function(e){return t[e]}.bind(null,i));return r},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,\\\"a\\\",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p=\\\"\\\",s(s.s=1)}([function(t,e,s){\\\"use strict\\\";Object.defineProperty(e,\\\"__esModule\\\",{value:!0});class r{static parseTransform(t){const e={translateX:0,translateY:0,scaleX:1,scaleY:1,rotate:0,translateBeforeScale:!1};if(t){if(\\\"string\\\"!=typeof t)return e.scaleX=t.k,e.scaleY=t.k,e.translateX=t.x,e.translateY=t.y,e;let s=t;s=s.replace(/ /g,\\\"\\\");const r=/\\\\s*translate\\\\(([-0-9.]+),([-0-9.]+)\\\\)/.exec(s);r&&(e.translateX=parseFloat(r[1]),e.translateY=parseFloat(r[2]));const i=/\\\\s*scale\\\\(([-0-9.]+)(,[-0-9.]+)?\\\\)/.exec(s);i&&(e.scaleX=parseFloat(i[1]),e.scaleY=i[2]?parseFloat(i[2].substr(1)):parseFloat(i[1]));const o=/\\\\s*rotate\\\\(([-0-9.]+)\\\\)/.exec(s);o&&(e.rotate=parseFloat(o[1])),/\\\\s*translate\\\\(([-0-9.]+),([-0-9.]+)\\\\)scale\\\\(([-0-9.,]+)\\\\)/.exec(s)&&(e.translateBeforeScale=!0);const l=/\\\\s*matrix\\\\(([-0-9.]+),([-0-9.]+),([-0-9.]+),([-0-9.]+),([-0-9.]+),([-0-9.]+)\\\\)/.exec(s);l&&(e.scaleX=parseFloat(l[1]),e.scaleY=parseFloat(l[4]),e.translateX=parseFloat(l[5]),e.translateY=parseFloat(l[6]))}return e}static addTransforms(t,e){return{translateX:t.translateX+e.translateX,translateY:t.translateY+e.translateY,scaleX:t.scaleX*e.scaleX,scaleY:t.scaleY*e.scaleY,rotate:t.rotate+e.rotate,translateBeforeScale:!1}}static convertSizeToPx(t,e=!0){const s=e?14:void 0;return void 0===t?s:\\\"number\\\"==typeof t?t:\\\"em\\\"===t.substr(-2)?Math.round(12*parseFloat(t)):\\\"px\\\"===t.substr(-2)?parseInt(t):t.match(/^[0-9]+$/)?parseInt(t):(console.warn(\\\"size in unsupported format: \\\",t),s)}static colorToRgba(t,e=1,s=\\\"none\\\"){if(\\\"none\\\"===t)return t;if(!t)return s;if(t=r.CssNamedColorToHex(t),1===e&&\\\"string\\\"==typeof t)return t;if(\\\"string\\\"==typeof t&&\\\"#\\\"===t[0]){let s;if(/^#([A-Fa-f0-9]{3}){1,2}$/.test(t))return s=t.substring(1),3==s.length&&(s=s[0]+s[0]+s[1]+s[1]+s[2]+s[2]),s=\\\"0x\\\"+s,\\\"rgba(\\\"+[s>>16&255,s>>8&255,255&s].join(\\\",\\\")+\\\",\\\"+e+\\\")\\\";throw new Error(\\\"Bad Hex\\\")}if(\\\"object\\\"==typeof t){if(\\\"r\\\"in t)return\\\"rgba(\\\"+t.r+\\\",\\\"+t.g+\\\",\\\"+t.b+\\\",\\\"+e+\\\")\\\";if(\\\"h\\\"in t){const s=r.hslToRgb(t.h/360,t.s,t.l);return\\\"rgba(\\\"+s.r+\\\",\\\"+s.g+\\\",\\\"+s.b+\\\",\\\"+e+\\\")\\\"}}else if(\\\"rgb(\\\"===t.substr(0,4))return t.substr(0,t.length-1).replace(\\\"rgb\\\",\\\"rgba\\\")+\\\", \\\"+e+\\\")\\\";return t}static hslToRgb(t,e,s){var r,i,o;if(0==e)r=i=o=s;else{var l=function(t,e,s){return s<0&&(s+=1),s>1&&(s-=1),s<1/6?t+6*(e-t)*s:s<.5?e:s<2/3?t+(e-t)*(2/3-s)*6:t},n=s<.5?s*(1+e):s+e-s*e,a=2*s-n;r=l(a,n,t+1/3),i=l(a,n,t),o=l(a,n,t-1/3)}return{r:Math.round(255*r),g:Math.round(255*i),b:Math.round(255*o)}}static CssNamedColorToHex(t){return\\\"string\\\"==typeof t&&i[t.toUpperCase()]?i[t.toUpperCase()]:t}static getCssRuleSpecificityNumber(t){let e=0;t=t.replace(/ >/g,\\\">\\\").replace(/> /g,\\\">\\\");const s=[].concat.apply([],t.split(\\\" \\\").map(t=>t.split(\\\">\\\")));for(const t of s){e+=100;const s=t[0];if(\\\"#\\\"===s)e+=1e3;else if(\\\".\\\"===s){const s=t.split(\\\".\\\").length-1;e+=Math.min(900,100*s)}}return e}}e.default=r;const i={ALICEBLUE:\\\"#F0F8FF\\\",ANTIQUEWHITE:\\\"#FAEBD7\\\",AQUA:\\\"#00FFFF\\\",AQUAMARINE:\\\"#7FFFD4\\\",AZURE:\\\"#F0FFFF\\\",BEIGE:\\\"#F5F5DC\\\",BISQUE:\\\"#FFE4C4\\\",BLACK:\\\"#000000\\\",BLANCHEDALMOND:\\\"#FFEBCD\\\",BLUE:\\\"#0000FF\\\",BLUEVIOLET:\\\"#8A2BE2\\\",BROWN:\\\"#A52A2A\\\",BURLYWOOD:\\\"#DEB887\\\",CADETBLUE:\\\"#5F9EA0\\\",CHARTREUSE:\\\"#7FFF00\\\",CHOCOLATE:\\\"#D2691E\\\",CORAL:\\\"#FF7F50\\\",CORNFLOWERBLUE:\\\"#6495ED\\\",CORNSILK:\\\"#FFF8DC\\\",CRIMSON:\\\"#DC143C\\\",CYAN:\\\"#00FFFF\\\",DARKBLUE:\\\"#00008B\\\",DARKCYAN:\\\"#008B8B\\\",DARKGOLDENROD:\\\"#B8860B\\\",DARKGRAY:\\\"#A9A9A9\\\",DARKGREY:\\\"#A9A9A9\\\",DARKGREEN:\\\"#006400\\\",DARKKHAKI:\\\"#BDB76B\\\",DARKMAGENTA:\\\"#8B008B\\\",DARKOLIVEGREEN:\\\"#556B2F\\\",DARKORANGE:\\\"#FF8C00\\\",DARKORCHID:\\\"#9932CC\\\",DARKRED:\\\"#8B0000\\\",DARKSALMON:\\\"#E9967A\\\",DARKSEAGREEN:\\\"#8FBC8F\\\",DARKSLATEBLUE:\\\"#483D8B\\\",DARKSLATEGRAY:\\\"#2F4F4F\\\",DARKSLATEGREY:\\\"#2F4F4F\\\",DARKTURQUOISE:\\\"#00CED1\\\",DARKVIOLET:\\\"#9400D3\\\",DEEPPINK:\\\"#FF1493\\\",DEEPSKYBLUE:\\\"#00BFFF\\\",DIMGRAY:\\\"#696969\\\",DIMGREY:\\\"#696969\\\",DODGERBLUE:\\\"#1E90FF\\\",FIREBRICK:\\\"#B22222\\\",FLORALWHITE:\\\"#FFFAF0\\\",FORESTGREEN:\\\"#228B22\\\",FUCHSIA:\\\"#FF00FF\\\",GAINSBORO:\\\"#DCDCDC\\\",GHOSTWHITE:\\\"#F8F8FF\\\",GOLD:\\\"#FFD700\\\",GOLDENROD:\\\"#DAA520\\\",GRAY:\\\"#808080\\\",GREY:\\\"#808080\\\",GREEN:\\\"#008000\\\",GREENYELLOW:\\\"#ADFF2F\\\",HONEYDEW:\\\"#F0FFF0\\\",HOTPINK:\\\"#FF69B4\\\",INDIANRED:\\\"#CD5C5C\\\",INDIGO:\\\"#4B0082\\\",IVORY:\\\"#FFFFF0\\\",KHAKI:\\\"#F0E68C\\\",LAVENDER:\\\"#E6E6FA\\\",LAVENDERBLUSH:\\\"#FFF0F5\\\",LAWNGREEN:\\\"#7CFC00\\\",LEMONCHIFFON:\\\"#FFFACD\\\",LIGHTBLUE:\\\"#ADD8E6\\\",LIGHTCORAL:\\\"#F08080\\\",LIGHTCYAN:\\\"#E0FFFF\\\",LIGHTGOLDENRODYELLOW:\\\"#FAFAD2\\\",LIGHTGRAY:\\\"#D3D3D3\\\",LIGHTGREY:\\\"#D3D3D3\\\",LIGHTGREEN:\\\"#90EE90\\\",LIGHTPINK:\\\"#FFB6C1\\\",LIGHTSALMON:\\\"#FFA07A\\\",LIGHTSEAGREEN:\\\"#20B2AA\\\",LIGHTSKYBLUE:\\\"#87CEFA\\\",LIGHTSLATEGRAY:\\\"#778899\\\",LIGHTSLATEGREY:\\\"#778899\\\",LIGHTSTEELBLUE:\\\"#B0C4DE\\\",LIGHTYELLOW:\\\"#FFFFE0\\\",LIME:\\\"#00FF00\\\",LIMEGREEN:\\\"#32CD32\\\",LINEN:\\\"#FAF0E6\\\",MAGENTA:\\\"#FF00FF\\\",MAROON:\\\"#800000\\\",MEDIUMAQUAMARINE:\\\"#66CDAA\\\",MEDIUMBLUE:\\\"#0000CD\\\",MEDIUMORCHID:\\\"#BA55D3\\\",MEDIUMPURPLE:\\\"#9370DB\\\",MEDIUMSEAGREEN:\\\"#3CB371\\\",MEDIUMSLATEBLUE:\\\"#7B68EE\\\",MEDIUMSPRINGGREEN:\\\"#00FA9A\\\",MEDIUMTURQUOISE:\\\"#48D1CC\\\",MEDIUMVIOLETRED:\\\"#C71585\\\",MIDNIGHTBLUE:\\\"#191970\\\",MINTCREAM:\\\"#F5FFFA\\\",MISTYROSE:\\\"#FFE4E1\\\",MOCCASIN:\\\"#FFE4B5\\\",NAVAJOWHITE:\\\"#FFDEAD\\\",NAVY:\\\"#000080\\\",OLDLACE:\\\"#FDF5E6\\\",OLIVE:\\\"#808000\\\",OLIVEDRAB:\\\"#6B8E23\\\",ORANGE:\\\"#FFA500\\\",ORANGERED:\\\"#FF4500\\\",ORCHID:\\\"#DA70D6\\\",PALEGOLDENROD:\\\"#EEE8AA\\\",PALEGREEN:\\\"#98FB98\\\",PALETURQUOISE:\\\"#AFEEEE\\\",PALEVIOLETRED:\\\"#DB7093\\\",PAPAYAWHIP:\\\"#FFEFD5\\\",PEACHPUFF:\\\"#FFDAB9\\\",PERU:\\\"#CD853F\\\",PINK:\\\"#FFC0CB\\\",PLUM:\\\"#DDA0DD\\\",POWDERBLUE:\\\"#B0E0E6\\\",PURPLE:\\\"#800080\\\",REBECCAPURPLE:\\\"#663399\\\",RED:\\\"#FF0000\\\",ROSYBROWN:\\\"#BC8F8F\\\",ROYALBLUE:\\\"#4169E1\\\",SADDLEBROWN:\\\"#8B4513\\\",SALMON:\\\"#FA8072\\\",SANDYBROWN:\\\"#F4A460\\\",SEAGREEN:\\\"#2E8B57\\\",SEASHELL:\\\"#FFF5EE\\\",SIENNA:\\\"#A0522D\\\",SILVER:\\\"#C0C0C0\\\",SKYBLUE:\\\"#87CEEB\\\",SLATEBLUE:\\\"#6A5ACD\\\",SLATEGRAY:\\\"#708090\\\",SLATEGREY:\\\"#708090\\\",SNOW:\\\"#FFFAFA\\\",SPRINGGREEN:\\\"#00FF7F\\\",STEELBLUE:\\\"#4682B4\\\",TAN:\\\"#D2B48C\\\",TEAL:\\\"#008080\\\",THISTLE:\\\"#D8BFD8\\\",TOMATO:\\\"#FF6347\\\",TURQUOISE:\\\"#40E0D0\\\",VIOLET:\\\"#EE82EE\\\",WHEAT:\\\"#F5DEB3\\\",WHITE:\\\"#FFFFFF\\\",WHITESMOKE:\\\"#F5F5F5\\\",YELLOW:\\\"#FFFF00\\\",YELLOWGREEN:\\\"#9ACD32\\\"}},function(t,e,s){\\\"use strict\\\";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,\\\"__esModule\\\",{value:!0});const i=s(2),o=r(s(4));let l;const n=self;let a;n.onmessage=function(t){const e=t.data;if(e&&e.cmd)switch(e.cmd){case\\\"INIT\\\":a=new i.VdomManager(e.data.visData,!1);const t=!!e.data.safeMode;l=new o.default(a,e.data.canvas,t,()=>{n.postMessage({msg:\\\"DRAWN\\\"})});break;case\\\"UPDATE_NODES\\\":const s=e;for(let t of s.data.enterExit)if(\\\"ENTER\\\"===t.cmd){t.keepChildren||(t.node.children=[]);const e=a.addNode(t.node,t.parentNodeIndex);l.addNode&&l.addNode(e)}else\\\"EXIT\\\"===t.cmd&&a.removeNode(t.childIndex,t.parentGlobalIndex);l.updatePropertiesFromQueue?l.updatePropertiesFromQueue(s.data.update):a.updatePropertiesFromQueue(s.data.update),l.draw();break;default:console.error(\\\"did not find command \\\",e.cmd)}}},function(t,e,s){\\\"use strict\\\";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,\\\"__esModule\\\",{value:!0});const i=r(s(0)),o=r(s(3));class l{constructor(t,e){this.data=t,this.ignoreDesign=e,this.sharedData={},this.indexToNodeMap={},this.cachedListSelections={},this.ensureNodesMapped()}ensureNodesMapped(){const t=e=>{void 0===e.globalElementIndex&&console.error(\\\"no element index\\\",e),this.indexToNodeMap[e.globalElementIndex]=e;for(const s of e.children)t(s)};t(this.data)}enableFrontendDesignProperties(){this.ignoreDesign=!1}addNode(t,e){let s=this.getNodeFromIndex(e);return s?(this.applyParentStyles(s,t),s.children.push(t),this.indexToNodeMap[t.globalElementIndex]=t,t):(console.error(\\\"could not add node without parent\\\",e,t,JSON.stringify(Object.keys(this.indexToNodeMap))),void new Error(\\\"parent not found\\\"))}removeNode(t,e){this.getNodeFromIndex(e).children.splice(t,1),this.cachedListSelections={}}applyParentStyles(t,e){for(const s in t.style)e.style[s]||(e.style[s]=t.style[s])}getParentNodeFromSelector(t){let e;return t||console.error(\\\"no parent selector\\\",t),e=\\\"SVG_PARENT\\\"===t?{children:[this.data]}:this.getVisNodeFromSelector(t),e||console.error(\\\"parent node not found with selector\\\",t),e}applyStyleToNodeAndChildren(t,e,s,r){if((!t.styleSpecificity[e]||t.styleSpecificity[e]<=r)&&(t.style[e]=s,t.styleSpecificity[e]=r),t.children)for(let i of t.children)this.applyStyleToNodeAndChildren(i,e,s,r)}getNodeFromIndex(t){return this.indexToNodeMap[t]}get(t,e){return e in this.sharedData?this.sharedData[e][t.globalElementIndex]/o.default.BUFFER_PRECISION_FACTOR:t[e]}updatePropertiesFromQueue(t){for(let e in t){if(!t.hasOwnProperty(e))continue;const s=e.substr(0,\\\"style;\\\".length);if(this.ignoreDesign&&(\\\"style;\\\"===s||-1!==l.ATTRIBUTES_NOT_IGNORED_WITH_IGNOREDESIGN.indexOf(e)))continue;let r;if(\\\"SharedArrayBuffer\\\"in self&&t[e]instanceof SharedArrayBuffer)r=new Int32Array(t[e]),this.sharedData[e]=r;else{r=t[e];for(let i in r){if(!r.hasOwnProperty(i))continue;const o=parseInt(i),n=this.getNodeFromIndex(o);if(!n)continue;let a=r[i];if(\\\"style;\\\"===s){const s=e.substr(\\\"style;\\\".length),r=\\\"styleSpecificity;\\\"+s;try{const e=t[r][i];this.applyStyleToNodeAndChildren(n,s,a,e),this.updateDeducedStyles(n,s,a)}catch(e){console.error(t,r,i),this.applyStyleToNodeAndChildren(n,s,a,-1)}}else-1!==l.ROUNDED_ATTRS.indexOf(e)&&(a=Math.round(parseFloat(a))),n[e]=a,this.updateDeducedStyles(n,e,a)}}}}updateDeducedStyles(t,e,s){if(-1!==[\\\"opacity\\\",\\\"fill-opacity\\\",\\\"stroke-opacity\\\",\\\"stroke\\\",\\\"fill\\\"].indexOf(e)){let e=t.style.stroke?t.style.stroke:t.stroke;if(e){let s=void 0===t.style[\\\"stroke-opacity\\\"]?t.style.opacity:t.style[\\\"stroke-opacity\\\"];void 0===s&&(s=void 0===t[\\\"stroke-opacity\\\"]?t.opacity:t[\\\"stroke-opacity\\\"]),t.style[\\\"stroke-rgba\\\"]=i.default.colorToRgba(e,s)}}}getVisNodeFromSelector(t){const e=t.lastIndexOf(\\\">\\\"),s=t.substr(0,e),r=t.substr(e+1),i=s?this.cachedListSelections[s]:null;let o=-1;const l=r.indexOf(\\\":nth-child(\\\");if(-1!==l&&(o=parseInt(r.substr(l+11)),i&&i[o]))return i[o];const n=[];if(this.findMatchingChildren(this.data,t,0,n),n&&1===n.length){const t=n[0];return-1!==o&&(this.cachedListSelections[s]||(this.cachedListSelections[s]={}),this.cachedListSelections[s][o]=t),t}return null}getVisNodesFromSelector(t,e){const s=[];return this.findMatchingChildren(t,e,0,s),s}findChildrenOfType(t,e,s){const r=t=>{for(const i of t.children)i.type===e&&s.push(i),0!==t.children.length&&r(i)};r(t)}filterNodesBySelector(t,e,s){return e.filter(e=>l.isCssRulePartialMatch(s,e,t))}findMatchingChildren(t,e,s,r,i=[]){if(!e&&\\\"\\\"!==e)throw console.error(t,e,s,r,i),Error(\\\"undefined selector\\\");let o=e.split(\\\">\\\").map(t=>t.trim()),n=o[s];if(0===s&&\\\"svg\\\"===n&&(n=o[++s],s===o.length))return r.push(t),void i.push(e);if(e.match(/^[a-z]+$/))return this.findChildrenOfType(t,e,r);for(let a=0;a<t.children.length;a++){let c=t.children[a],d=!1;l.isCssRulePartialMatch(n,c,t)&&(s===o.length-1?(r.push(c),i.push(e)):d=!0),c.children&&(d||o.length<2)&&s+1<o.length&&this.findMatchingChildren(c,e,s+1,r,i)}}static isCssRulePartialMatch(t,e,s){if(\\\":not(\\\"===t.substr(0,5)){const r=t.substr(0,t.length-1).substr(5);return!l.isCssRulePartialMatch(r,e,s)}if(\\\".\\\"===t[0]){const s=t.split(\\\".\\\");if(s.shift(),e.className){let t=!0;for(const r of s)-1===e.className.split(\\\" \\\").indexOf(r)&&(t=!1);return t}}else if(\\\"#\\\"===t[0]){if(t.substr(1)===e.id)return!0}else if(t.match(/^[a-z]+$/)){if(t===e.type)return!0}else{if(-1!==t.indexOf(\\\":nth-child(\\\")){let r=\\\"any\\\",i=t;\\\":\\\"!==t[0]&&(r=t.substr(0,t.indexOf(\\\":\\\")),i=t.substr(t.indexOf(\\\":\\\")));const o=parseInt(i.substr(\\\":nth-child(\\\".length));return s.children.indexOf(e)===o-1&&(\\\"any\\\"===r||e.type===r)}if(-1!==t.indexOf(\\\".\\\")){const s=t.indexOf(\\\".\\\"),r=t.substr(0,s),i=t.substr(s+1);if(r===e.type&&e.className&&-1!==e.className.split(\\\" \\\").indexOf(i))return!0}}return!1}}e.VdomManager=l,l.ATTRIBUTES_NOT_IGNORED_WITH_IGNOREDESIGN=[\\\"fill\\\",\\\"stroke\\\",\\\"opacity\\\",\\\"x1\\\",\\\"x2\\\",\\\"y1\\\",\\\"y2\\\",\\\"x\\\",\\\"y\\\"],l.ROUNDED_ATTRS=[\\\"cx\\\",\\\"cy\\\"]},function(t,e,s){\\\"use strict\\\";Object.defineProperty(e,\\\"__esModule\\\",{value:!0});class r{constructor(){this.data={raw:{},shared:{}},this.useSharedArrayFor=[\\\"cx\\\",\\\"cy\\\",\\\"x1\\\",\\\"x2\\\",\\\"y1\\\",\\\"y2\\\",\\\"x\\\",\\\"y\\\"]}ensureInitialized(t,e,s){if(\\\"class\\\"===t&&(t=\\\"className\\\"),e&&-1!==this.useSharedArrayFor.indexOf(t))if(this.data.shared[t]){const e=s<500?1e3:2*s,r=Int32Array.BYTES_PER_ELEMENT*e;if(this.data.shared[t].byteLength/r<.8){console.log(\\\"more space needed. prev:\\\",this.data.shared[t].byteLength/Int32Array.BYTES_PER_ELEMENT,\\\"new\\\",e);const s=new SharedArrayBuffer(r),i=new Int32Array(s),o=new Int32Array(this.data.shared[t]);for(const t in o)i[t]=o[t]}}else{const e=s<500?1e3:2*s,i=new SharedArrayBuffer(Int32Array.BYTES_PER_ELEMENT*e),o=new Int32Array(i);if(this.data.raw[t]&&!(this.data.raw[t]instanceof SharedArrayBuffer)){this.data.raw[t].forEach((t,e)=>{o[e]=parseFloat(t)*r.BUFFER_PRECISION_FACTOR})}this.data.raw[t]=i,this.data.shared[t]=o}else this.data.raw[t]||(this.data.raw[t]=[])}set(t,e,s,i){if(\\\"class\\\"===e&&(e=\\\"className\\\"),void 0===t.globalElementIndex)throw console.error(\\\"No index\\\",t),new Error(\\\"Element has no index\\\");const o=t.globalElementIndex,l=i&&-1!==this.useSharedArrayFor.indexOf(e)?\\\"shared\\\":\\\"raw\\\";try{\\\"shared\\\"===l&&0===(s*=r.BUFFER_PRECISION_FACTOR)&&(s=133713371337),this.data[l][e][o]=s}catch(s){console.log(s),console.log(this.data,l,e,t,o)}}removePendingChanges(t){}get(t,e){const s=t.globalElementIndex;return this.data.raw[e][s]}getData(){return this.data.raw}clearData(){this.data={raw:{},shared:{}}}}e.default=r,r.BUFFER_PRECISION_FACTOR=10},function(t,e,s){\\\"use strict\\\";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,\\\"__esModule\\\",{value:!0});const i=r(s(0));e.default=class{constructor(t,e,s=!1,r=(()=>{})){this.vdom=t,this.canvas=e,this.forceSingle=s,this.onDrawn=r,this.lastFullSecond=0,this.countSinceLastFullSecond=0,this.circlesByColor={},this.rectsByColor={},this.drawTexts=[],this.drawImages=[],this.linesByColor={};const i=e.getContext(\\\"2d\\\");if(!i)throw new Error(\\\"could not create canvas context\\\");this.ctx=i,this.ctx.scale(this.vdom.data.scale,this.vdom.data.scale),this.ctx.save(),this.draw(),setTimeout(()=>{console.log(this.forceSingle,this.vdom.data),this.draw()},1e3)}draw(){const t=this.ctx;t.restore(),t.save(),t.clearRect(0,0,this.vdom.data.width,this.vdom.data.height),this.drawLine(null,\\\"start\\\"),this.drawCircle(null,\\\"start\\\"),this.drawRect(null,\\\"start\\\"),this.drawText(null,\\\"start\\\"),this.drawImage(null,\\\"start\\\"),this.drawNodeAndChildren(this.vdom.data,this.forceSingle),this.drawLine(null,\\\"end\\\"),this.drawCircle(null,\\\"end\\\"),this.drawRect(null,\\\"end\\\"),this.drawText(null,\\\"end\\\"),this.drawImage(null,\\\"end\\\"),this.onDrawn();const e=Math.round(performance.now()/1e3);e!==this.lastFullSecond&&(this.lastFullSecond=e,this.countSinceLastFullSecond=0),this.countSinceLastFullSecond++}drawNodeAndChildren(t,e){const s=this.ctx;s.save();this.applyTransform(t.transform);if(t.transform&&(e=!0),t.type&&\\\"g\\\"!==t.type&&(!t.style.display||\\\"none\\\"!==t.style.display)){if(\\\"title\\\"===t.type)return;e?this.drawSingleNode(t,\\\"forcesingle\\\"):this.drawSingleNode(t)}if(t.children)for(let s=0;s<t.children.length;s++)this.drawNodeAndChildren(t.children[s],e);s.restore()}drawSingleNode(t,e=\\\"normal\\\"){const s=t.type,r=this[\\\"draw\\\"+s.substr(0,1).toUpperCase()+s.substr(1)];if(!r)return console.error(\\\"no draw function yet for \\\",s);r.call(this,t,e)}drawClippath(t){console.warn(\\\"clippaths can not be rendered yet.\\\")}drawCircle(t,e=\\\"normal\\\"){if(\\\"normal\\\"===e){const e=this.getFillStyle(t,\\\"#000\\\")+\\\";\\\"+this.getStrokeStyle(t);this.circlesByColor[e]||(this.circlesByColor[e]=[]),this.circlesByColor[e].push(t)}if(\\\"start\\\"!==e){if(\\\"end\\\"!==e){if(\\\"forcesingle\\\"===e){let e=this.getFillStyle(t,\\\"#000\\\");const s=this.vdom.get(t,\\\"cx\\\")||0,r=this.vdom.get(t,\\\"cy\\\")||0;this.ctx.beginPath(),this.ctx.fillStyle=e,this.ctx.strokeStyle=this.getStrokeStyle(t),this.ctx.lineWidth=this.getStrokeWidth(t),this.ctx.arc(s,r,t.r,0,2*Math.PI),\\\"none\\\"!==e&&this.ctx.fill(),t.style[\\\"stroke-rgba\\\"]&&\\\"none\\\"!==t.style[\\\"stroke-rgba\\\"]&&this.ctx.stroke()}}else for(let t in this.circlesByColor)if(this.circlesByColor.hasOwnProperty(t)){const e=t.split(\\\";\\\"),s=e[0],r=e[1];this.ctx.fillStyle=s;let i=this.circlesByColor[t][0];const o=this.getStrokeWidth(i);this.ctx.lineWidth=void 0!==o?o:1,this.ctx.strokeStyle=r,this.ctx.beginPath();for(let e of this.circlesByColor[t]){const t=this.vdom.get(e,\\\"cx\\\")?this.vdom.get(e,\\\"cx\\\"):0,s=this.vdom.get(e,\\\"cx\\\")?this.vdom.get(e,\\\"cy\\\"):0,r=this.vdom.get(e,\\\"r\\\");this.ctx.save(),this.applyTransform(e.transform),this.ctx.moveTo(t+r,s),this.ctx.arc(t,s,r,0,2*Math.PI),this.ctx.restore()}\\\"none\\\"!==s&&this.ctx.fill(),i.style[\\\"stroke-rgba\\\"]&&\\\"none\\\"!==i.style[\\\"stroke-rgba\\\"]&&this.ctx.stroke()}}else this.circlesByColor={}}getFillStyle(t,e=\\\"none\\\"){let s=t.style.fill?t.style.fill:t.fill,r=t.opacity;return t.style[\\\"fill-opacity\\\"]&&(r=parseFloat(t.style[\\\"fill-opacity\\\"])),t.style.opacity&&(r=parseFloat(t.style.opacity)),s=i.default.colorToRgba(s,r,e),s}getStrokeStyle(t){if(t.style[\\\"stroke-rgba\\\"])return t.style[\\\"stroke-rgba\\\"];let e=t.style.stroke?t.style.stroke:t.stroke;if(void 0!==e){let s=void 0===t.style[\\\"stroke-opacity\\\"]?t.style.opacity:t.style[\\\"stroke-opacity\\\"];return void 0===s&&(s=void 0===t[\\\"stroke-opacity\\\"]?t.opacity:t[\\\"stroke-opacity\\\"]),t.style[\\\"stroke-rgba\\\"]=i.default.colorToRgba(e,s),t.style[\\\"stroke-rgba\\\"]}return\\\"none\\\"}getStrokeWidth(t){const e=void 0!==t.style[\\\"stroke-width\\\"]?t.style[\\\"stroke-width\\\"]:t[\\\"stroke-width\\\"];return void 0===e?void 0:parseFloat(e)}drawRect(t,e=\\\"normal\\\"){if(\\\"normal\\\"===e){let e=t.style.fill?t.style.fill:t.fill,s=t[\\\"fill-opacity\\\"]?t[\\\"fill-opacity\\\"]:t.opacity,r=t.style[\\\"fill-opacity\\\"]?t.style[\\\"fill-opacity\\\"]:t.style.opacity;void 0!==r&&(s=r);const o=i.default.colorToRgba(e,s)+\\\";\\\"+this.getStrokeStyle(t);this.rectsByColor[o]||(this.rectsByColor[o]=[]),this.rectsByColor[o].push(t)}if(\\\"start\\\"!==e){if(\\\"end\\\"!==e){if(\\\"forcesingle\\\"===e){let e=t.style.fill?t.style.fill:t.fill;e&&(e=i.default.colorToRgba(e,t.style[\\\"fill-opacity\\\"])),e&&\\\"none\\\"!==e&&(this.ctx.fillStyle=t.style.fill?t.style.fill:t.fill,this.ctx.fillRect(this.vdom.get(t,\\\"x\\\"),this.vdom.get(t,\\\"y\\\"),t.width,t.height));let s=t.style.stroke?t.style.stroke:t.stroke;void 0!==s&&(s=i.default.colorToRgba(s,t.style[\\\"stroke-opacity\\\"]),this.ctx.strokeStyle=s,this.ctx.beginPath(),this.ctx.rect(this.vdom.get(t,\\\"x\\\"),this.vdom.get(t,\\\"y\\\"),t.width,t.height),this.ctx.stroke())}}else for(let t in this.rectsByColor)if(this.rectsByColor.hasOwnProperty(t)){const e=t.split(\\\";\\\"),s=e[0],r=e[1];this.ctx.fillStyle=s;let i=this.rectsByColor[t][0];const o=this.getStrokeWidth(i);this.ctx.lineWidth=void 0!==o?o:1,this.ctx.strokeStyle=r,this.ctx.beginPath();for(let e of this.rectsByColor[t]){const t=this.vdom.get(e,\\\"x\\\")||0,s=this.vdom.get(e,\\\"y\\\")||0;this.ctx.save(),this.applyTransform(e.transform),this.ctx.moveTo(t,s),this.ctx.rect(t,s,e.width,e.height),this.ctx.restore()}\\\"none\\\"!==s&&this.ctx.fill(),i.style[\\\"stroke-rgba\\\"]&&\\\"none\\\"!==i.style[\\\"stroke-rgba\\\"]&&this.ctx.stroke()}}else this.rectsByColor={}}drawText(t,e=\\\"normal\\\"){const s=t=>{if(\\\"\\\"===t.text)return;let e=\\\"Times New Roman\\\";t[\\\"font-family\\\"]&&(e=t[\\\"font-family\\\"]),t.style[\\\"font-family\\\"]&&(e=t.style[\\\"font-family\\\"]);let s=\\\"16px\\\";t[\\\"font-size\\\"]&&(s=i.default.convertSizeToPx(t[\\\"font-size\\\"])+\\\"px\\\"),t.style[\\\"font-size\\\"]&&(s=i.default.convertSizeToPx(t.style[\\\"font-size\\\"])+\\\"px\\\");let r=t.style.font?t.style.font:t.font;r||(r=s+\\\" \\\"+e);let o=void 0!==t[\\\"text-anchor\\\"]?t[\\\"text-anchor\\\"]:t.style[\\\"text-anchor\\\"];o&&(\\\"middle\\\"===o&&(o=\\\"center\\\"),this.ctx.textAlign=o);let l=t.fill?t.fill:t.style.fill;l||(l=\\\"#000\\\"),this.ctx.font=r,this.ctx.fillStyle=l;let n=this.vdom.get(t,\\\"x\\\")||0,a=this.vdom.get(t,\\\"y\\\")||0,c=i.default.convertSizeToPx(t.dx,!1)||0,d=i.default.convertSizeToPx(t.dy,!1)||0;this.ctx.fillText(t.text,n+c,a+d)};if(\\\"start\\\"!==e)if(\\\"normal\\\"!==e){if(\\\"forcesingle\\\"===e)return s(t);if(\\\"end\\\"!==e);else for(const t of this.drawTexts)s(t)}else this.drawTexts.push(t);else this.drawTexts=[]}drawImage(t,e=\\\"normal\\\"){const s=t=>{if(\\\"\\\"===t.href)return;let e=t.fill?t.fill:t.style.fill;e||(e=\\\"#000\\\"),this.ctx.fillStyle=e;let s=this.vdom.get(t,\\\"x\\\")||0,r=this.vdom.get(t,\\\"y\\\")||0,i=t.width||0,o=t.height||0;if(t.image)try{this.ctx.drawImage(t.image,s,r,i,o)}catch(t){console.log(t)}};if(\\\"start\\\"!==e)if(\\\"normal\\\"!==e){if(\\\"forcesingle\\\"===e)return s(t);if(\\\"end\\\"!==e);else for(const t of this.drawImages)s(t)}else this.drawImages.push(t);else this.drawImages=[]}drawPath(t,e=\\\"normal\\\"){if(\\\"normal\\\"!==e&&\\\"forcesingle\\\"!==e)return;const s=this.getFillStyle(t,\\\"#000000\\\"),r=this.getStrokeStyle(t),i=this.getStrokeWidth(t);let o=new Path2D(t.d);if(this.ctx.fillStyle=s,void 0!==r&&\\\"none\\\"!==r){if(void 0!==i&&(this.ctx.lineWidth=i),this.ctx.strokeStyle=r,t.style[\\\"stroke-linejoin\\\"]){const e=t.style[\\\"stroke-linejoin\\\"];\\\"bevel\\\"===e||\\\"round\\\"===e||\\\"miter\\\"===e?this.ctx.lineJoin=e:console.error(\\\"unknown line join value:\\\",e)}this.ctx.stroke(o)}s&&\\\"none\\\"!==s&&this.ctx.fill(o)}drawTspan(t,e=\\\"normal\\\"){if(\\\"normal\\\"!==e&&\\\"forcesingle\\\"!==e)return;this.ctx.font=\\\"10px Arial\\\",this.ctx.fillStyle=\\\"#000000\\\";const s=\\\"middle\\\"===t.style.textAnchor?\\\"center\\\":t.style.textAnchor;this.ctx.textAlign=s,this.ctx.fillText(t.text,this.vdom.get(t,\\\"x\\\"),this.vdom.get(t,\\\"y\\\"))}drawTextpath(t){console.warn(\\\"no draw function yet for textpath\\\")}drawLine(t,e=\\\"normal\\\"){if(this.vdom.data.scale,\\\"normal\\\"===e){const e=this.getStrokeStyle(t),s=this.getStrokeWidth(t);if(\\\"none\\\"===e||0===s)return;const r=`${e};${s}`;this.linesByColor[r]||(this.linesByColor[r]=[]),this.linesByColor[r].push(t)}if(\\\"start\\\"!==e){if(\\\"end\\\"!==e)\\\"forcesingle\\\"===e&&(this.ctx.beginPath(),this.ctx.moveTo(this.vdom.get(t,\\\"x1\\\")||0,this.vdom.get(t,\\\"y1\\\")||0),this.ctx.lineTo(this.vdom.get(t,\\\"x2\\\")||0,this.vdom.get(t,\\\"y2\\\")||0),this.ctx.strokeStyle=this.getStrokeStyle(t),this.ctx.lineWidth=this.getStrokeWidth(t),this.ctx.stroke());else for(let t in this.linesByColor)if(this.linesByColor.hasOwnProperty(t)){const e=t.split(\\\";\\\"),s=e[0],r=e[1];this.ctx.strokeStyle=s,this.ctx.lineWidth=parseFloat(r),this.ctx.beginPath();for(let e of this.linesByColor[t])e.transform&&(this.ctx.save(),this.applyTransform(e.transform)),this.ctx.moveTo(this.vdom.get(e,\\\"x1\\\")||0,this.vdom.get(e,\\\"y1\\\")||0),this.ctx.lineTo(this.vdom.get(e,\\\"x2\\\")||0,this.vdom.get(e,\\\"y2\\\")||0),e.transform&&this.ctx.restore();this.ctx.stroke()}}else this.linesByColor={}}drawDefs(t){}drawMarker(t){}applyTransform(t){const e=t?i.default.parseTransform(t):null;if(e){e.rotate,this.ctx.rotate(e.rotate*Math.PI/180);const t=e.translateBeforeScale?e.translateX:e.translateX*e.scaleX,s=e.translateBeforeScale?e.translateY:e.translateY*e.scaleY;return this.ctx.transform(e.scaleX,0,0,e.scaleY,t,s),!0}return!1}}}]);\\n//# sourceMappingURL=dbe6220f6f80348ff3dc.worker.js.map\", __webpack_public_path__ + \"dbe6220f6f80348ff3dc.worker.js\");\n};","'use strict';\n\n// http://stackoverflow.com/questions/10343913/how-to-create-a-web-worker-from-a-string\n\nvar URL = window.URL || window.webkitURL;\n\nmodule.exports = function (content, url) {\n  try {\n    try {\n      var blob;\n\n      try {\n        // BlobBuilder = Deprecated, but widely implemented\n        var BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;\n\n        blob = new BlobBuilder();\n\n        blob.append(content);\n\n        blob = blob.getBlob();\n      } catch (e) {\n        // The proposed API\n        blob = new Blob([content]);\n      }\n\n      return new Worker(URL.createObjectURL(blob));\n    } catch (e) {\n      return new Worker('data:application/javascript,' + encodeURIComponent(content));\n    }\n  } catch (e) {\n    if (!url) {\n      throw Error('Inline worker is not supported');\n    }\n\n    return new Worker(url);\n  }\n};"],"sourceRoot":""}