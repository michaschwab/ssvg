{"version":3,"sources":["webpack://SSVG/webpack/universalModuleDefinition","webpack://SSVG/webpack/bootstrap","webpack://SSVG/./canvasworker/drawingUtils.ts","webpack://SSVG/./frontend/exporter.ts","webpack://SSVG/./frontend/ssvg.ts","webpack://SSVG/./frontend/domhandler.ts","webpack://SSVG/./util/vdom/vdom-manager.ts","webpack://SSVG/./canvasworker/canvasrenderer.ts","webpack://SSVG/./canvasworker/index.ts","webpack://SSVG/./canvasworker/canvasworker.ts","webpack://SSVG/./node_modules/worker-loader/dist/workers/InlineWorker.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","DrawingUtils","transform","transformObject","translateX","translateY","scaleX","scaleY","rotate","translateBeforeScale","rotateLast","transformString","replace","translate","exec","parseFloat","scale","substr","matrix","transformA","transformB","size","fallback","defaultValue","undefined","Math","round","parseInt","match","console","warn","color","opacity","defaultColor","cacheKey","rgbaCache","CssNamedColorToHex","rgba","test","Error","substring","length","join","g","b","rgb","hslToRgb","h","hue2rgb","q","COLOR_HEXES","toUpperCase","selector","specificity","parts","concat","apply","split","map","part","start","countClasses","min","ALICEBLUE","ANTIQUEWHITE","AQUA","AQUAMARINE","AZURE","BEIGE","BISQUE","BLACK","BLANCHEDALMOND","BLUE","BLUEVIOLET","BROWN","BURLYWOOD","CADETBLUE","CHARTREUSE","CHOCOLATE","CORAL","CORNFLOWERBLUE","CORNSILK","CRIMSON","CYAN","DARKBLUE","DARKCYAN","DARKGOLDENROD","DARKGRAY","DARKGREY","DARKGREEN","DARKKHAKI","DARKMAGENTA","DARKOLIVEGREEN","DARKORANGE","DARKORCHID","DARKRED","DARKSALMON","DARKSEAGREEN","DARKSLATEBLUE","DARKSLATEGRAY","DARKSLATEGREY","DARKTURQUOISE","DARKVIOLET","DEEPPINK","DEEPSKYBLUE","DIMGRAY","DIMGREY","DODGERBLUE","FIREBRICK","FLORALWHITE","FORESTGREEN","FUCHSIA","GAINSBORO","GHOSTWHITE","GOLD","GOLDENROD","GRAY","GREY","GREEN","GREENYELLOW","HONEYDEW","HOTPINK","INDIANRED","INDIGO","IVORY","KHAKI","LAVENDER","LAVENDERBLUSH","LAWNGREEN","LEMONCHIFFON","LIGHTBLUE","LIGHTCORAL","LIGHTCYAN","LIGHTGOLDENRODYELLOW","LIGHTGRAY","LIGHTGREY","LIGHTGREEN","LIGHTPINK","LIGHTSALMON","LIGHTSEAGREEN","LIGHTSKYBLUE","LIGHTSLATEGRAY","LIGHTSLATEGREY","LIGHTSTEELBLUE","LIGHTYELLOW","LIME","LIMEGREEN","LINEN","MAGENTA","MAROON","MEDIUMAQUAMARINE","MEDIUMBLUE","MEDIUMORCHID","MEDIUMPURPLE","MEDIUMSEAGREEN","MEDIUMSLATEBLUE","MEDIUMSPRINGGREEN","MEDIUMTURQUOISE","MEDIUMVIOLETRED","MIDNIGHTBLUE","MINTCREAM","MISTYROSE","MOCCASIN","NAVAJOWHITE","NAVY","OLDLACE","OLIVE","OLIVEDRAB","ORANGE","ORANGERED","ORCHID","PALEGOLDENROD","PALEGREEN","PALETURQUOISE","PALEVIOLETRED","PAPAYAWHIP","PEACHPUFF","PERU","PINK","PLUM","POWDERBLUE","PURPLE","REBECCAPURPLE","RED","ROSYBROWN","ROYALBLUE","SADDLEBROWN","SALMON","SANDYBROWN","SEAGREEN","SEASHELL","SIENNA","SILVER","SKYBLUE","SLATEBLUE","SLATEGRAY","SLATEGREY","SNOW","SPRINGGREEN","STEELBLUE","TAN","TEAL","THISTLE","TOMATO","TURQUOISE","VIOLET","WHEAT","WHITE","WHITESMOKE","YELLOW","YELLOWGREEN","SSVG","options","unassignedNodes","interactionSelections","svgAssignedAndSizeSet","lastCanvasDrawTimes","enterExitQueue","safeMode","useWorker","getFps","this","maxPixelRatio","canvas","document","createElement","worker","onmessage","e","data","msg","logDrawn","requestAnimationFrame","updateCanvas","raf","updateFps","captureD3On","svg","setupElementsIfSvgExists","addEventListener","propagateMouseEvent","propagateTouchEvent","lastHovered","hoveredElement","dispatchEvent","MouseEvent","duplicateTouchEvent","propagateWheelEvent","replaceNativeRemoveChild","replaceNativeAttribute","replaceNativePathFunctions","replaceNativeCreateElement","replaceNativeAppendChild","replaceD3Attr","replaceNativeSelect","replaceNativeGetComputedStyle","replaceD3Select","replaceD3Remove","setTimeout","log","vdom","svgEl","getElementsByTagName","urlConnector","location","href","indexOf","svgSwitchUrl","svgSwitchComment","createComment","parent","parentElement","nextSibling","next","insertBefore","appendChild","domHandler","getVDom","setCanvasSize","useAttrQueue","queue","sendUpdateToWorker","renderer","updatePropertiesFromQueue","draw","width","height","devicePixelRatio","style","offscreen","transferControlToOffscreen","sendToWorker","cmd","visData","ensureNodesMapped","element","isWithinSvg","parentEl","parentNode","d3","originalOn","selection","on","me","el","_parents","children","push","arguments","getReplacement","original","elements","_groups","filter","safeLog","childElements","node","getVisNode","childNodes","getVisNodesFromSelector","getElementFromNode","returnValue","forEach","childNode","childEl","selectAll","select","origFilter","selectorString","firstElement","getNodeFromElement","nodes","selectors","sel","trim","filteredNodes","matchingNodes","filterNodesBySelector","filteredElements","origGetComputedStyle","getComputedStyle","getPropertyValue","propertyName","origQuerySelector","Element","querySelector","globalElementIndex","originalFct","prefix","els","returnVal","getAttributeFromSelector","keys","getElementSelector","error","getVisNodeFromSelector","child","queueSetAttributeOnElement","queueSetAttributeOnSelection","origSelectionAttr","attr","origSelectionStyle","originalClassed","classed","className","enableFrontendDesignProperties","prevClassNames","evaluatedValue","__data__","newClassNames","originalTransition","transition","originalText","text","newRemove","getNewRemoveChild","d3Remove","updateChildSelectors","remove","origCreate","createElementNS","newArgs","Array","from","getNewAppendChild","parentSelector","getParentNodeFromSelector","childElement","nodesToElements","oldSelector","childIndex","combineElementSelectors","type","updateNodeSelector","origRemoveChild","skipUpdateSelectors","writable","parentGlobalIndex","removeNodeFromParent","removeChild","origAppend","appended","el2","keepChildren","getNodeDataFromEl","setProperty","styleProp","removeProperty","linkNodeToElement","addNodeToParent","restyleNode","addNode","index","splice","origAppendChild","newAppend","newChild","refChild","origGetTotalLength","SVGPathElement","getTotalLength","getAttribute","origSetAttribute","origSetAttr","setAttribute","origSetAttrNS","setAttributeNS","origGetAttr","evt","propagateEvent","createEvent","initEvent","prop","touches","touch","identifier","pageX","pageY","clientX","clientY","WheelEvent","new_event","triggeredElement","x","y","getMousePosition","interactionSel","j","vdomNode","nodeAtPosition","svgChildEl","event","pos","logContents","safeLogCount","safeErrorLog","visNode","cx","cy","parseTransform","sqrt","pow","elX","elY","centerX","centerY","distanceX","abs","distanceY","getTotalTransformation","matchAny","Date","now","shift","timeForTenDrawsMs","fps","enterExit","update","postMessage","CSS_STYLES","ignoreDesign","nodesToRestyle","globalElementIndexCounter","css","VdomManager","display","addChildNodesToVisData","attrName","ensureInitialized","set","fetch","origin","then","resp","blob","createImageBitmap","bitmap","styleName","ensureElementIndex","cb","applyStyles","getQueue","clearQueue","getNodeFromIndex","roundedAttrs","tagName","toLowerCase","textContent","attributes","nodeValue","nodeName","kebabCase","obj","propNames","getOwnPropertyNames","propName","clean","styleSheets","sheet","rules","cssRules","rule","selectorText","applyRuleToMatchingNodes","newSelector","selectorPartsLooseStrict","parentsOfInterest","nodeToBeStyled","getNodeParent","setStyle","longSpecName","checkNode","currentNode","looseIndex","strictIndex","selPart","isCssRulePartialMatch","removedClass","removeRuleStylesFromNode","removeNode","childEls","localName","elementType","nodeIndex","getParentNode","parents","pop","totalTransform","addTransforms","sharedData","useSharedArrayFor","indexToNodeMap","cachedListSelections","useBuffer","numNodes","newLength","newByteLength","Int32Array","BYTES_PER_ELEMENT","byteLength","buffer","SharedArrayBuffer","values","oldVals","BUFFER_PRECISION_FACTOR","storage","addToMap","nodeData","parentNodeIndex","applyParentStyles","styleValue","onNodeUpdated","applyStyleToNodeAndChildren","applyCssToNodeAndChildren","id","filtered","attrs","isArray","getSingle","setAttrQueue","attrNameStart","IGNOREDESIGN_ATTRIBUTES","self","ROUNDED_ATTRS","lastSplitPos","lastIndexOf","selectorWithoutLast","lastPart","parentSel","nthChildPosition","selectedNodes","findMatchingChildren","addDirectChildrenIfMatch","matchIndex","selectedNodeSelectors","selParts","findChildrenOfType","matching","cssRuleSelectorPart","newSelPart","searchClassNames","allTrue","searchClassName","indexPart","targetIndex","cutoff","typeName","forceSingle","onDrawn","parentValues","lastFullSecond","countSinceLastFullSecond","circlesByColor","rectsByColor","drawTexts","drawImages","linesByColor","ctx","getContext","save","restore","clearRect","drawLine","drawCircle","drawRect","drawText","drawImage","drawNodeAndChildren","fullSecond","performance","elData","drawClip","parentValuesBackup","applyTransform","clipPathId","clipNode","getNodeById","path","Path2D","clip","drawSingleNode","fill","getFillStyle","stroke","getStrokeStyle","drawFct","handle","strokeStyle","beginPath","fillStyle","lineWidth","getStrokeWidth","moveTo","arc","PI","fillAndStrokeColor","fillColor","strokeColor","sampleData","includes","getAttributeStyleCss","defaultCol","colorToRgba","highestSpec","getCssRuleSpecificityNumber","fillRect","rect","isClip","drawSingle","fontFamily","fontSize","customSize","convertSizeToPx","font","align","textAlign","dx","dy","fillText","image","strokeWidth","lineJoin","addPath","textAnchor","x1","x2","y1","y2","val","lineTo","CanvasWorkerImporter","URL","webkitURL","content","url","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","append","getBlob","Blob","Worker","createObjectURL","encodeURIComponent"],"mappings":"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","file":"ssvg.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SSVG\"] = factory();\n\telse\n\t\troot[\"SSVG\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","export type Transformation = {\n    translateX: number,\n    translateY: number,\n    scaleX: number,\n    scaleY: number,\n    rotate: number,\n    translateBeforeScale: boolean,\n    rotateLast: boolean,\n}\n\nexport default class DrawingUtils {\n    static parseTransform(transform: string|{}): Transformation {\n        const transformObject: Transformation = {\n            translateX: 0,\n            translateY: 0,\n            scaleX: 1,\n            scaleY: 1,\n            rotate: 0,\n            translateBeforeScale: false,\n            rotateLast: false\n        };\n        \n        if (transform) {\n            if(typeof transform !== \"string\") {\n                transformObject.scaleX = transform['k'];\n                transformObject.scaleY = transform['k'];\n                transformObject.translateX = transform['x'];\n                transformObject.translateY = transform['y'];\n                transformObject.translateBeforeScale = true;\n                return transformObject;\n            }\n            let transformString = <string> transform;\n            transformString = transformString.replace(/ /g, '');\n            \n            //let translate  = /translate\\((\\d+),(\\d+)\\)/.exec(transform);\n            const translate = /\\s*translate\\(([-0-9.]+),([-0-9.]+)\\)/.exec(transformString);\n            if (translate) {\n                transformObject.translateX = parseFloat(translate[1]);\n                transformObject.translateY = parseFloat(translate[2]);\n            }\n            else {\n                //console.error('no translate found', transform);\n            }\n            \n            const scale = /\\s*scale\\(([-0-9.]+)(,[-0-9.]+)?\\)/.exec(transformString);\n            if (scale) {\n                transformObject.scaleX = parseFloat(scale[1]);\n                transformObject.scaleY = scale[2] ? parseFloat(scale[2].substr(1)) : parseFloat(scale[1]);\n            }\n            else {\n                //console.error('no scale found', transform);\n            }\n            \n            const rotate = /\\s*rotate\\(([-0-9.]+)\\)/.exec(transformString);\n            if (rotate) {\n                transformObject.rotate = parseFloat(rotate[1]);\n            }\n            else {\n                //console.error('no rotate found', transform);\n            }\n            \n            const translateScale = /\\s*translate\\(([-0-9.]+),([-0-9.]+)\\)scale\\(([-0-9.,]+)\\)/.exec(transformString);\n            if (translateScale) {\n                transformObject.translateBeforeScale = true;\n            }\n\n            const rotateLast = /\\s*rotate\\(([-0-9.,]+)\\)$/.exec(transformString);\n            if (rotateLast) {\n                transformObject.rotateLast = true;\n            }\n            \n            const matrix = /\\s*matrix\\(([-0-9.]+),([-0-9.]+),([-0-9.]+),([-0-9.]+),([-0-9.]+),([-0-9.]+)\\)/.exec(transformString);\n            if(matrix) {\n                transformObject.scaleX = parseFloat(matrix[1]);\n                // 2 is horizontal skewing\n                // 3 is vertical skewing\n                transformObject.scaleY = parseFloat(matrix[4]);\n                transformObject.translateX = parseFloat(matrix[5]);\n                transformObject.translateY = parseFloat(matrix[6]);\n            }\n        }\n        \n        return transformObject;\n    }\n\n    static addTransforms(transformA: Transformation, transformB: Transformation): Transformation {\n        return {\n            translateX: transformA.translateX + transformB.translateX,\n            translateY: transformA.translateY + transformB.translateY,\n            scaleX: transformA.scaleX * transformB.scaleX,\n            scaleY: transformA.scaleY * transformB.scaleY,\n            rotate: transformA.rotate + transformB.rotate,\n            translateBeforeScale: false,\n            rotateLast: false\n        };\n        //TODO: consider translateBeforeScale and rotateLast\n    }\n\n    static convertSizeToPx(size: string|number, fallback = true): number|undefined {\n        const defaultValue = fallback ? 14 : undefined;\n        if(size === undefined) {\n            return defaultValue;\n        }\n        if(typeof size === \"number\") {\n            return size;\n        }\n        if(size.substr(-2) === 'em') {\n            return Math.round(parseFloat(size) * 12);\n        }\n        if(size.substr(-2) === 'px') {\n            return parseInt(size);\n        }\n        if(size.match(/^[0-9]+$/)) {\n            return parseInt(size);\n        }\n        console.warn('size in unsupported format: ', size);\n        return defaultValue;\n    }\n\n    static rgbaCache = {};\n    static colorToRgba(color: string|{r: number, g: number, b: number}|{h: number, s: number, l: number},\n                       opacity: string|number = 1,\n                       defaultColor ='none'): string {\n        if(color === 'none') {\n            return color;\n        }\n        if(!color) {\n            color = defaultColor;\n        }\n        const cacheKey = `${color}-${opacity}`;\n        if(DrawingUtils.rgbaCache[cacheKey]) {\n            return DrawingUtils.rgbaCache[cacheKey];\n        }\n\n        color = DrawingUtils.CssNamedColorToHex(color);\n        if(opacity === 1 && typeof color === 'string') {\n            DrawingUtils.rgbaCache[cacheKey] = color;\n            return color;\n        }\n        let rgba: string;\n        if(typeof color === 'string' && color[0] === '#') {\n            let c; // From https://stackoverflow.com/questions/21646738/convert-hex-to-rgba\n            if(/^#([A-Fa-f0-9]{3}){1,2}$/.test(color)){\n                c = color.substring(1);\n                if(c.length == 3){\n                    c = c[0] + c[0] + c[1] + c[1] + c[2] + c[2];\n                }\n                c = '0x' + c;\n                rgba = 'rgba('+[(c>>16)&255, (c>>8)&255, c&255].join(',')+',' + opacity + ')';\n            } else {\n                throw new Error('Bad Hex');\n            }\n        } else if(typeof color === 'object') {\n            if('r' in color) {\n                rgba = 'rgba(' + color.r + ',' + color.g + ',' + color.b + ',' + opacity + ')';\n            } else if('h' in color) {\n                const rgb = DrawingUtils.hslToRgb(color.h / 360, color.s, color.l);\n                rgba = 'rgba(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ',' + opacity + ')';\n            }\n        } else if(color.substr(0, 4) === 'rgb(') {\n            rgba = color.substr(0, color.length - 1).replace('rgb','rgba') +\n                ', ' + opacity + ')';\n        }\n        DrawingUtils.rgbaCache[cacheKey] = rgba;\n        return rgba;\n    }\n\n    // From https://stackoverflow.com/questions/2353211/hsl-to-rgb-color-conversion\n    static hslToRgb(h, s, l) {\n        var r, g, b;\n\n        if(s == 0){\n            r = g = b = l; // achromatic\n        } else {\n            var hue2rgb = function hue2rgb(p, q, t){\n                if(t < 0) t += 1;\n                if(t > 1) t -= 1;\n                if(t < 1/6) return p + (q - p) * 6 * t;\n                if(t < 1/2) return q;\n                if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;\n                return p;\n            };\n\n            var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n            var p = 2 * l - q;\n            r = hue2rgb(p, q, h + 1/3);\n            g = hue2rgb(p, q, h);\n            b = hue2rgb(p, q, h - 1/3);\n        }\n\n        return {r: Math.round(r * 255), g: Math.round(g * 255), b: Math.round(b * 255)};\n    }\n\n    static CssNamedColorToHex(color: any) {\n        if(typeof color === 'string' && COLOR_HEXES[color.toUpperCase()]) {\n            return COLOR_HEXES[color.toUpperCase()];\n        }\n        return color;\n    }\n\n    /**\n     * Basic implementation to get a sense of specificity. Numbers are completely made up.\n     * Should eventually be more sophisticated, e.g. using https://github.com/keeganstreet/specificity.\n     * @param selector CSS rule as string.\n     */\n    static getCssRuleSpecificityNumber(selector: string) {\n        let specificity = 0;\n\n        selector = selector\n            .replace(/ >/g, '>')\n            .replace(/> /g, '>');\n\n        const parts = [].concat.apply([], selector.split(' ')\n            .map(part => part.split('>')));\n\n        // Rough logic: the more stuff, the more specific. IDs and classes are more specific than other things.\n        for(const part of parts) {\n            specificity += 100;\n            const start = part[0];\n\n            if(start === '#') {\n                specificity += 1000;\n            } else if(start === '.') {\n                // More classes are more specific, but never more specific than an ID.\n                const countClasses = part.split('.').length - 1;\n                specificity += Math.min(900, countClasses * 100);\n            }\n        }\n\n        return specificity;\n    }\n}\n\nconst COLOR_HEXES = {\n    ALICEBLUE: '#F0F8FF',\n    ANTIQUEWHITE: '#FAEBD7',\n    AQUA: '#00FFFF',\n    AQUAMARINE: '#7FFFD4',\n    AZURE: '#F0FFFF',\n    BEIGE: '#F5F5DC',\n    BISQUE: '#FFE4C4',\n    BLACK: '#000000',\n    BLANCHEDALMOND: '#FFEBCD',\n    BLUE: '#0000FF',\n    BLUEVIOLET: '#8A2BE2',\n    BROWN: '#A52A2A',\n    BURLYWOOD: '#DEB887',\n    CADETBLUE: '#5F9EA0',\n    CHARTREUSE: '#7FFF00',\n    CHOCOLATE: '#D2691E',\n    CORAL: '#FF7F50',\n    CORNFLOWERBLUE: '#6495ED',\n    CORNSILK: '#FFF8DC',\n    CRIMSON: '#DC143C',\n    CYAN: '#00FFFF',\n    DARKBLUE: '#00008B',\n    DARKCYAN: '#008B8B',\n    DARKGOLDENROD: '#B8860B',\n    DARKGRAY: '#A9A9A9',\n    DARKGREY: '#A9A9A9',\n    DARKGREEN: '#006400',\n    DARKKHAKI: '#BDB76B',\n    DARKMAGENTA: '#8B008B',\n    DARKOLIVEGREEN: '#556B2F',\n    DARKORANGE: '#FF8C00',\n    DARKORCHID: '#9932CC',\n    DARKRED: '#8B0000',\n    DARKSALMON: '#E9967A',\n    DARKSEAGREEN: '#8FBC8F',\n    DARKSLATEBLUE: '#483D8B',\n    DARKSLATEGRAY: '#2F4F4F',\n    DARKSLATEGREY: '#2F4F4F',\n    DARKTURQUOISE: '#00CED1',\n    DARKVIOLET: '#9400D3',\n    DEEPPINK: '#FF1493',\n    DEEPSKYBLUE: '#00BFFF',\n    DIMGRAY: '#696969',\n    DIMGREY: '#696969',\n    DODGERBLUE: '#1E90FF',\n    FIREBRICK: '#B22222',\n    FLORALWHITE: '#FFFAF0',\n    FORESTGREEN: '#228B22',\n    FUCHSIA: '#FF00FF',\n    GAINSBORO: '#DCDCDC',\n    GHOSTWHITE: '#F8F8FF',\n    GOLD: '#FFD700',\n    GOLDENROD: '#DAA520',\n    GRAY: '#808080',\n    GREY: '#808080',\n    GREEN: '#008000',\n    GREENYELLOW: '#ADFF2F',\n    HONEYDEW: '#F0FFF0',\n    HOTPINK: '#FF69B4',\n    INDIANRED: '#CD5C5C',\n    INDIGO: '#4B0082',\n    IVORY: '#FFFFF0',\n    KHAKI: '#F0E68C',\n    LAVENDER: '#E6E6FA',\n    LAVENDERBLUSH: '#FFF0F5',\n    LAWNGREEN: '#7CFC00',\n    LEMONCHIFFON: '#FFFACD',\n    LIGHTBLUE: '#ADD8E6',\n    LIGHTCORAL: '#F08080',\n    LIGHTCYAN: '#E0FFFF',\n    LIGHTGOLDENRODYELLOW: '#FAFAD2',\n    LIGHTGRAY: '#D3D3D3',\n    LIGHTGREY: '#D3D3D3',\n    LIGHTGREEN: '#90EE90',\n    LIGHTPINK: '#FFB6C1',\n    LIGHTSALMON: '#FFA07A',\n    LIGHTSEAGREEN: '#20B2AA',\n    LIGHTSKYBLUE: '#87CEFA',\n    LIGHTSLATEGRAY: '#778899',\n    LIGHTSLATEGREY: '#778899',\n    LIGHTSTEELBLUE: '#B0C4DE',\n    LIGHTYELLOW: '#FFFFE0',\n    LIME: '#00FF00',\n    LIMEGREEN: '#32CD32',\n    LINEN: '#FAF0E6',\n    MAGENTA: '#FF00FF',\n    MAROON: '#800000',\n    MEDIUMAQUAMARINE: '#66CDAA',\n    MEDIUMBLUE: '#0000CD',\n    MEDIUMORCHID: '#BA55D3',\n    MEDIUMPURPLE: '#9370DB',\n    MEDIUMSEAGREEN: '#3CB371',\n    MEDIUMSLATEBLUE: '#7B68EE',\n    MEDIUMSPRINGGREEN: '#00FA9A',\n    MEDIUMTURQUOISE: '#48D1CC',\n    MEDIUMVIOLETRED: '#C71585',\n    MIDNIGHTBLUE: '#191970',\n    MINTCREAM: '#F5FFFA',\n    MISTYROSE: '#FFE4E1',\n    MOCCASIN: '#FFE4B5',\n    NAVAJOWHITE: '#FFDEAD',\n    NAVY: '#000080',\n    OLDLACE: '#FDF5E6',\n    OLIVE: '#808000',\n    OLIVEDRAB: '#6B8E23',\n    ORANGE: '#FFA500',\n    ORANGERED: '#FF4500',\n    ORCHID: '#DA70D6',\n    PALEGOLDENROD: '#EEE8AA',\n    PALEGREEN: '#98FB98',\n    PALETURQUOISE: '#AFEEEE',\n    PALEVIOLETRED: '#DB7093',\n    PAPAYAWHIP: '#FFEFD5',\n    PEACHPUFF: '#FFDAB9',\n    PERU: '#CD853F',\n    PINK: '#FFC0CB',\n    PLUM: '#DDA0DD',\n    POWDERBLUE: '#B0E0E6',\n    PURPLE: '#800080',\n    REBECCAPURPLE: '#663399',\n    RED: '#FF0000',\n    ROSYBROWN: '#BC8F8F',\n    ROYALBLUE: '#4169E1',\n    SADDLEBROWN: '#8B4513',\n    SALMON: '#FA8072',\n    SANDYBROWN: '#F4A460',\n    SEAGREEN: '#2E8B57',\n    SEASHELL: '#FFF5EE',\n    SIENNA: '#A0522D',\n    SILVER: '#C0C0C0',\n    SKYBLUE: '#87CEEB',\n    SLATEBLUE: '#6A5ACD',\n    SLATEGRAY: '#708090',\n    SLATEGREY: '#708090',\n    SNOW: '#FFFAFA',\n    SPRINGGREEN: '#00FF7F',\n    STEELBLUE: '#4682B4',\n    TAN: '#D2B48C',\n    TEAL: '#008080',\n    THISTLE: '#D8BFD8',\n    TOMATO: '#FF6347',\n    TURQUOISE: '#40E0D0',\n    VIOLET: '#EE82EE',\n    WHEAT: '#F5DEB3',\n    WHITE: '#FFFFFF',\n    WHITESMOKE: '#F5F5F5',\n    YELLOW: '#FFFF00',\n    YELLOWGREEN: '#9ACD32'\n};\n\n","import SSVG from \"./ssvg\";\n\nexport = SSVG;","import {VdomManager} from \"../util/vdom/vdom-manager\";\nimport {VdomNode} from \"../util/vdom/vdom\";\nimport {CanvasWorkerMessage, CanvasUpdateWorkerMessage, CanvasUpdateData} from \"../util/canvas-worker-message\"\nimport Domhandler, {SsvgElement} from \"./domhandler\";\nimport CanvasWorker from \"../canvasworker/canvasworker\";\nimport Canvasrenderer from \"../canvasworker/canvasrenderer\";\nimport DrawingUtils from \"../canvasworker/drawingUtils\";\nimport CanvasWorkerImporter from '../canvasworker';\n\nexport default class SSVG {\n    private unassignedNodes: Node[] = [];\n    private worker: Worker;\n    private domHandler: Domhandler;\n    private vdom: VdomManager;\n    private interactionSelections: SsvgElement[] = [];\n    \n    private renderer: CanvasWorker;\n\n    private svg: (SVGElement & SsvgElement)|undefined;\n    private readonly canvas: HTMLCanvasElement;\n    private svgAssignedAndSizeSet = false;\n    \n    private lastCanvasDrawTimes: number[] = [];\n    \n    private enterExitQueue: CanvasUpdateData[] = [];\n\n    private readonly safeMode: boolean = false;\n    private readonly maxPixelRatio: number|undefined;\n    private readonly useWorker: boolean = true;\n    private readonly getFps: (fps: number) => void = () => {};\n\n    private hoveredElement: Element|undefined;\n\n    constructor(options?: {\n        safeMode?: boolean,\n        maxPixelRatio?: number,\n        useWorker?: boolean,\n        getFps?: (fps: number) => void,\n        svg?: SVGElement & SsvgElement,\n    }) {\n        if(options) {\n            if(options.safeMode !== undefined) {\n                this.safeMode = options.safeMode;\n            }\n            this.maxPixelRatio = options.maxPixelRatio;\n            if(options.useWorker !== undefined) {\n                this.useWorker = options.useWorker;\n            }\n            if(options.getFps !== undefined) {\n                this.getFps = options.getFps;\n            }\n        }\n\n        this.canvas = document.createElement('canvas');\n        if(!('OffscreenCanvas' in window)) {\n            this.useWorker = false;\n        }\n        \n        if(this.useWorker) {\n            this.worker = new CanvasWorkerImporter();\n    \n            this.worker.onmessage = e => {\n                if(e.data && e.data.msg && e.data.msg === 'DRAWN') {\n                    this.logDrawn();\n                    requestAnimationFrame(() => this.updateCanvas());\n                }\n            };\n            const raf = () => {\n                this.updateFps();\n                requestAnimationFrame(raf);\n            };\n            raf();\n        } else {\n            const raf = () => {\n                this.updateFps();\n                this.logDrawn();\n                this.updateCanvas();\n                requestAnimationFrame(raf);\n            };\n            raf();\n        }\n\n        this.captureD3On();\n        const svg = options && options.svg ? options.svg : undefined;\n        this.setupElementsIfSvgExists(svg);\n        \n        this.canvas.addEventListener('mousedown', e => this.propagateMouseEvent(e));\n        this.canvas.addEventListener('touchstart', e => this.propagateTouchEvent(e));\n        this.canvas.addEventListener('mousemove', e => {\n            const lastHovered = this.hoveredElement;\n            this.hoveredElement = this.propagateMouseEvent(e);\n            if(lastHovered !== this.hoveredElement) {\n                if(lastHovered) {\n                    lastHovered.dispatchEvent(new MouseEvent('mouseout', e));\n                }\n            }\n            this.propagateMouseEvent(e, 'mouseover');\n        });\n        this.canvas.addEventListener('touchmove', e => {\n            const lastHovered = this.hoveredElement;\n            this.hoveredElement = this.propagateTouchEvent(e);\n            if(lastHovered !== this.hoveredElement) {\n                if(lastHovered) {\n                    lastHovered.dispatchEvent(this.duplicateTouchEvent(e, 'mouseout'));\n                }\n            }\n            this.propagateTouchEvent(e, 'mouseover');\n        });\n        this.canvas.addEventListener('mouseup', e => this.propagateMouseEvent(e));\n        this.canvas.addEventListener('touchend', e => this.propagateTouchEvent(e));\n        this.canvas.addEventListener('click', e => this.propagateMouseEvent(e));\n        this.canvas.addEventListener('wheel', e => this.propagateWheelEvent(e));\n\n        this.replaceNativeRemoveChild();\n        this.replaceNativeAttribute();\n        this.replaceNativePathFunctions();\n        this.replaceNativeCreateElement();\n        this.replaceNativeAppendChild();\n        this.replaceD3Attr();\n        this.replaceNativeSelect();\n        this.replaceNativeGetComputedStyle();\n        this.replaceD3Select();\n        this.replaceD3Remove();\n\n        setTimeout(() => {\n            console.log(this.vdom.data);\n        }, 1000);\n    }\n    \n    private setupElementsIfSvgExists(svgEl?: SVGElement & SsvgElement) {\n        \n        if(this.svg) {\n            return true;\n        }\n\n        const svg = !svgEl ? document.getElementsByTagName('svg')[0] : svgEl;\n        \n        if(!svg) {\n            return false;\n        }\n\n        const urlConnector = document.location.href.indexOf('?') === -1 ? '?' : '&';\n        const svgSwitchUrl = document.location.href + urlConnector + 'svg';\n        const svgSwitchComment = document.createComment(' This project uses SSVG.io to render a SVG as Canvas.\\r\\n' +\n            'To inspect the SVG, please open the following URL:\\r\\n' +\n            svgSwitchUrl + '\\r\\n');\n        \n        this.svg = svg as SVGElement & SsvgElement;\n        const parent = this.svg.parentElement;\n\n        if(this.svg.nextSibling) {\n            const next = this.svg.nextSibling;\n            parent.insertBefore(svgSwitchComment, next);\n            parent.insertBefore(this.canvas, next);\n        } else {\n            parent.appendChild(svgSwitchComment);\n            parent.appendChild(this.canvas);\n        }\n\n        this.domHandler = new Domhandler(this.svg, this.useWorker, this.useWorker);\n        this.vdom = this.domHandler.getVDom();\n\n        this.setCanvasSize();\n        \n        return true;\n    }\n    \n    private updateCanvas() {\n        if(!this.svgAssignedAndSizeSet) {\n            return;\n        }\n        if(this.useWorker) {\n            this.domHandler.useAttrQueue(queue => {\n                /*if(Object.keys(queue).length === 0) {\n                    //requestAnimationFrame(() => this.updateCanvas());\n                    setTimeout(() => this.updateCanvas(), 1);\n                    //console.log('nothing new');\n                    return;\n                }*/\n\n                /*for(let operation of this.enterExitQueue) {\n                    if(operation.cmd === 'ENTER') {\n                        if(!operation.keepChildren) {\n                            operation.node.children = [];\n                        }\n                        this.vdom.addNode(operation.node, operation.parentNodeIndex);\n                    } else if(operation.cmd === 'EXIT') {\n                        this.vdom.removeNode(operation.childIndex, operation.parentNodeSelector);\n                    }\n                }*/\n                this.sendUpdateToWorker(queue);\n            });\n        } else {\n            this.domHandler.useAttrQueue(queue => {\n                if(this.renderer.updatePropertiesFromQueue) {\n                    this.renderer.updatePropertiesFromQueue(queue);\n                }\n                this.renderer.draw();\n            });\n        }\n    }\n    \n    private setCanvasSize() {\n        if(!this.svg || !this.vdom.data.width || !this.vdom.data.height) {\n            return;\n        }\n        this.vdom.data.scale = window.devicePixelRatio;\n        if(this.maxPixelRatio !== undefined && this.vdom.data.scale > this.maxPixelRatio) {\n            this.vdom.data.scale = this.maxPixelRatio;\n        }\n    \n        this.canvas.style.width = this.vdom.data.width + 'px';\n        this.canvas.style.height = this.vdom.data.height + 'px';\n        this.canvas.width = this.vdom.data.width * this.vdom.data.scale;\n        this.canvas.height = this.vdom.data.height * this.vdom.data.scale;\n        \n        if(this.useWorker) {\n            const offscreen = (this.canvas as any).transferControlToOffscreen();\n            this.sendToWorker({cmd: 'INIT', data: {\n                    canvas: offscreen,\n                    visData: this.vdom.data,\n                    safeMode: this.safeMode\n                }\n            }, [offscreen]);\n            this.vdom.ensureNodesMapped();\n        } else {\n            this.renderer = new Canvasrenderer(this.vdom, this.canvas, this.safeMode, () => {});\n        }\n        \n        this.svgAssignedAndSizeSet = true;\n    }\n\n    private isWithinSvg(element: Element) {\n        let isWithinSvg = false;\n        let parentEl = element;\n\n        while(parentEl && parentEl.parentNode) {\n            if(parentEl === this.svg) {\n                isWithinSvg = true;\n            }\n            parentEl = <Element> parentEl.parentNode;\n        }\n        return isWithinSvg;\n    }\n    \n    private captureD3On() {\n        if((window as any)['d3']) {\n            const d3 = (window as any)['d3'];\n            const originalOn = d3.selection.prototype.on;\n            const me = this;\n\n            d3.selection.prototype.on = function()\n            {\n                let el = this._parents && this._parents.length ? this._parents[0] : this[0].parentNode;\n                if(el === document.children[0]) {\n                    el = me.svg;\n                }\n                let isWithinSvg = me.isWithinSvg(el);\n\n                if(el && isWithinSvg && me.interactionSelections.indexOf(el) === -1)\n                {\n                    me.interactionSelections.push(el); // This one works for native get/setAttribute\n                    //interactionSelections.push(this); // This one works for d3 .attr.\n                }\n        \n                return originalOn.apply(this, arguments);\n            };\n        }\n    }\n    \n    private replaceD3Select() {\n        if((window as any)['d3']) {\n            const me = this;\n            const d3 = (window as any)['d3'];\n\n            const getReplacement = (original) => {\n                return function(selector: string|(()=>{})) {\n                    if(typeof selector === 'string') {\n                        if(selector === 'body') {\n                            return original.apply(this, arguments);\n                        }\n                        let elements: SsvgElement[];\n                        if(this === d3) {\n                            elements = [me.svg];\n                        } else {\n                            elements = this._groups ? this._groups[0] : this[0];\n                        }\n\n                        if(!elements.filter(e => e).length) {\n                            safeLog('element not found within svg, using normal execution', this, selector);\n                            return original.apply(this, arguments);\n                        }\n\n                        let childElements: SsvgElement[] = [];\n\n                        for(let i = 0; i < elements.length; i++) {\n                            const element = elements[i];\n                            const node = me.domHandler.getVisNode(element);\n\n                            if(!node) {\n                                console.warn('node not found', element);\n                                return original.apply(this, arguments);\n                            }\n\n                            const childNodes = me.vdom.getVisNodesFromSelector(node, selector);\n                            childElements = childElements.concat(childNodes.map(node => {\n                                return me.domHandler.getElementFromNode(node);\n                            }));\n                        }\n\n                        const returnValue = original.apply(this, arguments);\n                        const elementsOutsideSvg: NodeList = returnValue._groups ? returnValue._groups[0]\n                            : returnValue[0];\n                        elementsOutsideSvg.forEach(childNode => {\n                            const childEl = <SsvgElement> <any> childNode;\n                            if(childElements.indexOf(childEl) === -1) {\n                                childElements.push();\n                            }\n                        });\n\n                        if(returnValue._groups) {\n                            returnValue._groups[0] = childElements;\n                        } else {\n                            // Older d3 versions\n                            const parentNode = returnValue[0].parentNode;\n                            returnValue[0] = childElements;\n                            returnValue[0].parentNode = parentNode;\n                        }\n\n                        return returnValue;\n                    }\n\n                    return original.apply(this, arguments);\n                }\n            };\n\n            d3.selection.prototype.selectAll = getReplacement(d3.selection.prototype.selectAll);\n            d3.selectAll = getReplacement(d3.selectAll);\n            d3.selection.prototype.select = getReplacement(d3.selection.prototype.select);\n            d3.select = getReplacement(d3.select);\n\n            const origFilter = d3.selection.prototype.filter;\n            d3.selection.prototype.filter = function(selectorString: string) {\n                const elements = this._groups ? this._groups[0] : this[0];\n                if(typeof selectorString !== 'string') {\n                    return origFilter.apply(this, arguments);\n                }\n                let firstElement = elements[0];\n                let i = 1;\n                while(!firstElement && i < elements.length) {\n                    i++;\n                    firstElement = elements[i];\n                }\n\n                const parentNode = firstElement ? me.domHandler.getNodeFromElement(firstElement.parentNode) : null;\n                const nodes = elements.map(element => me.domHandler.getNodeFromElement(element));\n\n                const selectors = selectorString.split(',').map(sel => sel.trim());\n                const filteredNodes = [];\n\n                for(const selector of selectors) {\n                    const matchingNodes = me.vdom.filterNodesBySelector(parentNode, nodes, selector);\n\n                    for(const node of matchingNodes) {\n                        if(filteredNodes.indexOf(node) === -1) {\n                            filteredNodes.push(node);\n                        }\n                    }\n                }\n\n                const filteredElements = filteredNodes.map(node => me.domHandler.getElementFromNode(node));\n\n                const returnValue = origFilter.apply(this, arguments);\n\n                if(returnValue._groups) {\n                    returnValue._groups[0] = filteredElements;\n                } else {\n                    // Older d3 versions\n                    const parentNode = returnValue[0].parentNode;\n                    returnValue[0] = filteredElements;\n                    returnValue[0].parentNode = parentNode;\n                }\n                return returnValue;\n            }\n        }\n    }\n\n    private replaceNativeGetComputedStyle() {\n        const origGetComputedStyle = window.getComputedStyle;\n        const me = this;\n\n        window.getComputedStyle = function(element: SsvgElement) {\n            if(element && !me.isWithinSvg(element) && (<Window> <any> element) !== window) {\n                return origGetComputedStyle.call(this, element);\n            }\n\n            const node = me.domHandler.getNodeFromElement(element);\n            if(!node) {\n                console.warn('node not found for ', this, element);\n                return origGetComputedStyle.call(this, element);\n            }\n            return {\n                getPropertyValue(propertyName: string): string {\n                    //console.log(propertyName, node, node.style[propertyName]);\n                    return node.style[propertyName];\n                }\n            } as CSSStyleDeclaration;\n        };\n    }\n\n    private replaceNativeSelect() {\n        const origQuerySelector = Element.prototype.querySelector;\n        const me = this;\n\n        Element.prototype.querySelector = function(this: SsvgElement, selector: string) {\n            if(!me.isWithinSvg(this)) {\n                return origQuerySelector.apply(this, arguments);\n            }\n\n            const node = me.domHandler.getVisNode(this);\n            const childNodes = me.vdom.getVisNodesFromSelector(node, selector);\n            if(childNodes.length === 0) {\n                console.warn('could not find selection', this, node, node.globalElementIndex, selector);\n                return null;\n            }\n            return me.domHandler.getElementFromNode(childNodes[0]);\n        };\n    }\n\n    private replaceD3Attr() {\n\n        const me = this;\n\n        function getReplacement(originalFct, prefix = '') {\n            return function(name, value) {\n                \n                if(value === undefined) {\n\n                    if(me.unassignedNodes.indexOf(this) !== -1) {\n                        return originalFct.apply(this, arguments);\n                    } else {\n                        // Dealing with d3 v3.\n                        const els = this._groups ? this._groups[0] : this[0];\n                        if(els[0] && !me.isWithinSvg(els[0])) {\n                            return originalFct.apply(this, arguments);\n                        }\n                        if(els.length > 1) {\n                            const returnVal = [];\n                            for(const el of els) {\n                                returnVal.push(me.domHandler.getAttributeFromSelector(el, name))\n                            }\n                            return returnVal;\n                        } else {\n                            return me.domHandler.getAttributeFromSelector(els[0], name);\n                        }\n                    }\n                } else {\n                    if(name === 'class' || !me.svg) {\n                        return originalFct.apply(this, arguments);\n                    }\n                    // For d3 v4, this would just be this.groups[0]. The rest is for\n                    // earlier versions, where selectAll() returned other values.\n                    let elements = this._groups ? this._groups[0] : this[0];\n\n                    if(typeof elements === 'object' && Object.keys(elements).length === 1 && elements.parentNode) {\n                        const parentElement = elements.parentNode;\n                        let parentNode: VdomNode;\n                        if(parentElement !== document.children[0]) {\n                            const selector = me.domHandler.getElementSelector(parentElement);\n                            if(selector === null) {\n                                console.error('selector not found', parentElement, elements);\n                                throw Error('selector not found');\n                            }\n                            parentNode = me.vdom.getVisNodeFromSelector(selector);\n                        } else {\n                            parentNode = me.vdom.data;\n                        }\n\n                        elements = [];\n                        for(const child of parentNode.children) {\n                            elements.push(me.domHandler.getElementFromNode(child));\n                        }\n                    }\n                    if(!elements) {\n                        return originalFct.apply(this, arguments);\n                    }\n                    const filteredElements = [];\n                    try {\n                        for (const element of elements) {\n                            if (element) {\n                                filteredElements.push(element);\n                            }\n                        }\n                    } catch(e) {\n                        console.error(elements, this);\n                        console.error(e);\n                    }\n                    if(filteredElements.length === 1) {\n                        const element = filteredElements[0];\n                        if(!element) {\n                            console.warn('element not found', this, name, value);\n                            return this;\n                        }\n                        if(!me.isWithinSvg(element)) {\n                            return originalFct.apply(this, arguments);\n                        }\n                        me.domHandler.queueSetAttributeOnElement(element, prefix + name, value);\n                    } else {\n                        if(!me.isWithinSvg(elements[0])) {\n                            return originalFct.apply(this, arguments);\n                        }\n                        me.domHandler.queueSetAttributeOnSelection(filteredElements, prefix + name, value);\n                    }\n                    \n                    if(filteredElements[0] === me.svg && (name === 'width' || name === 'height')) {\n                        me.vdom.data[name] = parseInt(value);\n                        me.setCanvasSize();\n                    }\n                \n                    return this;\n                }\n            };\n        }\n    \n        if((window as any)['d3']) {\n            const d3 = (window as any)['d3'];\n\n            const origSelectionAttr = d3.selection.prototype.attr;\n            d3.selection.prototype.attr = getReplacement(origSelectionAttr);\n\n            const origSelectionStyle = d3.selection.prototype.style;\n            d3.selection.prototype.style = getReplacement(origSelectionStyle, 'style;');\n\n            const originalClassed = d3.selection.prototype.classed;\n            d3.selection.prototype.classed = function(className: string,\n                                                      value?: boolean|((data: any, index: number) => boolean)) {\n                if(value !== undefined) {\n                    me.domHandler.enableFrontendDesignProperties();\n                    let elements = this._groups ? this._groups[0] : this[0];\n                    let i = -1;\n                    for(let element of elements) {\n                        i++;\n                        if(element) {\n                            const node = me.domHandler.getNodeFromElement(element);\n                            if(!node) {\n                                console.warn('node not found', element);\n                                continue;\n                            }\n                            const prevClassNames = node.className || '';\n                            const evaluatedValue = typeof value === \"function\" ? value(element.__data__, i) : value;\n                            if(evaluatedValue === true) {\n                                if(prevClassNames.indexOf(className) === -1) {\n                                    let newClassNames = (prevClassNames + ' ' + className).trim();\n\n                                    me.domHandler.queueSetAttributeOnElement(element, 'class', newClassNames);\n                                }\n                            } else if(evaluatedValue === false) {\n                                const containedPreviously = prevClassNames.indexOf(className) !== -1;\n                                if(containedPreviously) {\n                                    const newClassNames = prevClassNames.replace(className, '').replace('  ', ' ');\n                                    me.domHandler.queueSetAttributeOnElement(element, 'class', newClassNames);\n\n                                    if(!node['removedClasses']) {\n                                        node['removedClasses'] = [];\n                                    }\n                                    node['removedClasses'].push(className); // For removing associated styles.\n                                }\n                            }\n                        }\n\n                    }\n                }\n                return originalClassed.apply(this, arguments);\n            };\n\n            const originalTransition = d3.selection.prototype.transition;\n            d3.selection.prototype.transition = function() {\n                me.domHandler.enableFrontendDesignProperties();\n                return originalTransition.apply(this, arguments);\n            };\n\n            const originalText = d3.selection.prototype.text;\n            d3.selection.prototype.text = function(value?: (number|string|((el: HTMLElement) => (number|string)))) {\n                if(value !== undefined) {\n                    let elements = this._groups ? this._groups[0] : this[0];\n                    let i = 0;\n                    for(let element of elements) {\n                        if(element && me.isWithinSvg(element)) {\n                            me.domHandler.queueSetAttributeOnElement(element, 'text', value);\n                        }\n\n                        i++;\n                    }\n                }\n                return originalText.apply(this, arguments);\n            };\n        }\n    }\n\n    private replaceD3Remove() {\n        if(window['d3']) {\n            const d3 = window['d3'];\n            const me = this;\n\n            const newRemove = this.getNewRemoveChild(() => {}, true);\n            const d3Remove = function() {\n                let elements = this._groups ? this._groups[0] : this[0];\n\n                if(elements.length) {\n                    let parentElement: SsvgElement = null;\n                    for(let i = elements.length - 1; i > -1; i--) {\n                        const element = elements[i];\n                        if(element) {\n                            parentElement = element.parentNode;\n                            if(!parentElement) {\n                                console.error('element has no parent node', element);\n                            }\n                            newRemove.call(parentElement, element);\n                        }\n                    }\n                    if(parentElement) {\n                        me.updateChildSelectors(parentElement);\n                    }\n                }\n                return this;\n            };\n            d3.selection.prototype.remove = d3Remove;\n            //d3.transition.prototype.remove = d3Remove;\n        }\n    }\n    \n    private replaceNativeCreateElement() {\n        const origCreate = document.createElementNS;\n        const me = this;\n        \n        document.createElementNS = function() {\n            let newArgs = Array.from(arguments);\n            const el = origCreate.apply(this, newArgs);\n            \n            /*el.appendChild = () => {\n                console.log('hi!!', el, arguments);\n                //return el;\n            };*/\n    \n            el.appendChild = me.getNewAppendChild(el.appendChild);\n            \n            me.unassignedNodes.push(el);\n    \n            //console.log(me.unassignedNodes);\n            \n            return el;\n        }\n    }\n\n    private updateChildSelectors(parentElement: SsvgElement, parentNode?: VdomNode) {\n        if(!this.isWithinSvg(parentElement)) {\n            return;\n        }\n        const parentSelector = parentElement.selector;\n        if(!parentSelector) {\n            console.error('this node has no selector', parentElement)\n        }\n        if(!parentNode) {\n            parentNode = this.vdom.getParentNodeFromSelector(parentSelector);\n        }\n        for(let i = 0; i < parentNode.children.length; i++) {\n            const childNode: VdomNode = parentNode.children[i];\n            const childElement = this.domHandler.getElementFromNode(childNode);\n            if(!childElement) {\n                console.error('element not found', childNode, parentNode.children.length, i);\n                console.log('current element indices:',\n                    this.domHandler.nodesToElements.elements.map(e => e.globalElementIndex));\n                console.log('current elements:', [...this.domHandler.nodesToElements.elements]);\n                console.log('current nodes:', [...this.domHandler.nodesToElements.nodes]);\n                console.log('parent node: ', parentNode);\n                console.log('children:', [...parentNode.children]);\n                continue;\n            }\n            const oldSelector = childElement['selector'];\n\n            childElement.childIndex = i;\n            childElement.parentSelector = parentSelector;\n            childElement.selector = this.domHandler.combineElementSelectors(parentSelector, childNode.type, i+1);\n\n            this.domHandler.updateNodeSelector(oldSelector, childElement['selector']);\n\n            this.updateChildSelectors(childElement, childNode);\n        }\n    }\n\n    private getNewRemoveChild(origRemoveChild: ((<T extends Node>(oldChild: T) => T)|(() => void)),\n        skipUpdateSelectors = false) {\n        const me = this;\n\n        return function<T extends Node>(this: SsvgElement, el: T & SsvgElement) {\n            if(!this) {\n                console.error('context not defined');\n                return el;\n            }\n            if(!me.isWithinSvg(el)) {\n                return origRemoveChild.apply(this, arguments);\n            }\n            const parentNode = me.domHandler.getNodeFromElement(this);\n            const parentSelector = this.selector;\n            const node = me.domHandler.getNodeFromElement(el);\n\n            if(!node) {\n                console.error('node not found', node, el, this, parentNode);\n                return origRemoveChild.apply(this, arguments);\n            }\n\n            // Remove all child elements.\n            /*for(const childNode of node.children) {\n                const childEl = me.domHandler.getElementFromNode(childNode);\n                el.removeChild(childEl);\n            }*/\n\n            // Remove from current parent first.\n            Object.defineProperty(el, 'parentNode', {\n                writable: true,\n                value: undefined\n            });\n\n            //console.log('remove')\n            me.enterExitQueue.push({\n                cmd: 'EXIT',\n                childIndex: el['childIndex'],\n                parentGlobalIndex: parentNode.globalElementIndex\n            });\n\n            me.domHandler.removeNodeFromParent(el, node, parentNode);\n\n            // Fix child indices of all children.\n            if(!skipUpdateSelectors) {\n                if(!parentSelector) {\n                    console.error('parent not found', parentNode, parentSelector, this, el);\n                }\n                me.updateChildSelectors(this);\n            }\n\n            delete el['selector'];\n\n            return el;\n        };\n    }\n\n    private replaceNativeRemoveChild() {\n        Element.prototype.removeChild = this.getNewRemoveChild(Element.prototype.removeChild);\n    }\n    \n    private getNewAppendChild(origAppend) {\n        const me = this;\n        \n        return function<T extends Node>(this: SsvgElement, el: T & SsvgElement) {\n            if(!me.svgAssignedAndSizeSet) {\n                if(!me.svg && el['tagName'] === 'svg') {\n                    const appended = origAppend.apply(this, arguments);\n                    me.setupElementsIfSvgExists(<SVGElement & SsvgElement> <any> el);\n                    return appended;\n                    \n                } else {\n                    return origAppend.apply(this, arguments);\n                }\n            }\n            \n            if(!me.isWithinSvg(this)) {\n                return origAppend.apply(this, arguments);\n            }\n\n            Object.defineProperty(el, 'ownerSVGElement', {\n                writable: true,\n                value: me.svg\n            });\n            el['appendChild'] = <T extends Node>(el2: T) => {\n                return me.getNewAppendChild(origAppend).call(el, el2);\n            };\n            const parentSelector = me.domHandler.getElementSelector(this);\n            if(parentSelector === null) {\n                return origAppend.apply(this, arguments);\n            }\n\n            const parentNode = me.domHandler.getNodeFromElement(this);\n            if(!parentNode) {\n                return console.error('parent node not found', parentSelector, this);\n            }\n            let node: VdomNode;\n            let keepChildren = false;\n\n            if(el['parentSelector']) {\n                node = me.domHandler.getVisNode(el);\n\n                me.getNewRemoveChild(() => {}).call(this, el);\n                keepChildren = true; // If the element is being moved around, keep children.\n            } else {\n                node = me.domHandler.getNodeDataFromEl(el);\n            }\n\n            el.parentSelector = parentSelector;\n            el.selector = me.domHandler.getElementSelector(el, parentNode);\n            el.childIndex = parentNode.children.length;\n\n            Object.defineProperty(el, 'style', {\n                writable: true,\n                value: {\n                    setProperty: function(styleProp: string, value: string) {\n                        me.domHandler.queueSetAttributeOnElement(el, 'style;' + styleProp, value);\n                    },\n                    getPropertyValue: function(styleProp) {\n                        me.domHandler.enableFrontendDesignProperties();\n                        return node.style[styleProp];\n                    },\n                    removeProperty: function() {\n                        console.log('remove property not yet implemented.');\n                        //TODO implement removeProperty CSS function.\n                    }\n                }\n            });\n\n            Object.defineProperty(el, 'parentNode', {\n                writable: true,\n                value: this\n            });\n    \n            me.domHandler.linkNodeToElement(node, el);\n            me.vdom.addNodeToParent(node, parentNode.globalElementIndex);\n            me.domHandler.restyleNode(parentNode, node);\n            me.updateChildSelectors(el, node);\n\n            if(me.useWorker) {\n                me.enterExitQueue.push({\n                    cmd: 'ENTER',\n                    node: node,\n                    parentGlobalIndex: parentNode.globalElementIndex,\n                    keepChildren: keepChildren\n                });\n            } else {\n                if(me.renderer.addNode) {\n                    me.renderer.addNode(node);\n                }\n            }\n    \n            if(me.unassignedNodes.indexOf(el) !== -1) {\n                const index = me.unassignedNodes.indexOf(el);\n                me.unassignedNodes.splice(index, 1);\n            }\n    \n            return el;\n        };\n    }\n    \n    private replaceNativeAppendChild() {\n        const origAppendChild = Element.prototype.appendChild;\n        const newAppend = this.getNewAppendChild(origAppendChild);\n    \n        Element.prototype.appendChild = newAppend;\n        Element.prototype.insertBefore = function<T extends Node>(newChild: T, refChild: Node|null) {\n    \n            newAppend.call(this, newChild);\n            \n            return newChild;\n        };\n    }\n\n    private replaceNativePathFunctions() {\n        const me = this;\n        //const origGetPointAtLength = SVGPathElement.prototype.getPointAtLength;\n        const origGetTotalLength = SVGPathElement.prototype.getTotalLength;\n\n        /*SVGPathElement.prototype.getPointAtLength = function() {\n            if(me.isWithinSvg(this)) {\n                const d = this.getAttribute('d');\n                me.origSetAttribute.call(this, 'd', d);\n            }\n            return origGetPointAtLength.apply(this, arguments);\n        };*/\n        SVGPathElement.prototype.getTotalLength = function() {\n            if(me.isWithinSvg(this)) {\n                const d = this.getAttribute('d');\n                me.origSetAttribute.call(this, 'd', d);\n            }\n\n            return origGetTotalLength.apply(this, arguments);\n        };\n    }\n\n    private origSetAttribute;\n\n    private replaceNativeAttribute() {\n        const origSetAttr = Element.prototype.setAttribute;\n        this.origSetAttribute = origSetAttr;\n        const origSetAttrNS = Element.prototype.setAttributeNS;\n        const origGetAttr = Element.prototype.getAttribute;\n        const me = this;\n    \n        Element.prototype.setAttribute = function(this: SsvgElement, name: string, value: any) {\n            if(name === 'easypz' || me.unassignedNodes.indexOf(this) !== -1) {\n                // Update the original SVG\n                origSetAttr.apply(this, arguments);\n                return;\n            }\n            if(name === 'class') {\n                origSetAttr.apply(this, arguments);\n            }\n            if(!me.isWithinSvg(this)) {\n                return origSetAttr.apply(this, arguments);\n            }\n            me.domHandler.queueSetAttributeOnElement(this, name, value);\n        };\n        //TODO: Figure out how to access the element when setting a style property.\n        /*CSSStyleDeclaration.prototype.setProperty = function(name: string, value: any) {\n            safeLog(this, arguments);\n            me.elementHandler.queueSetAttributeOnElement(this, 'style;' + name, value);\n        };*/\n        Element.prototype.setAttributeNS = function(this: SsvgElement, name: string, value: any) {\n            if(name === 'easypz' || me.unassignedNodes.indexOf(this) !== -1) {\n                // Update the original SVG\n                origSetAttrNS.apply(this, arguments);\n                return;\n            }\n            if(name === 'class') {\n                origSetAttrNS.apply(this, arguments);\n            }\n            if(!me.isWithinSvg(this)) {\n                return origSetAttrNS.apply(this, arguments);\n            }\n            me.domHandler.queueSetAttributeOnElement(this, name, value);\n        };\n    \n        Element.prototype.getAttribute = function(this: SsvgElement, name) {\n            if(me.unassignedNodes.indexOf(this) !== -1) {\n                return origGetAttr.apply(this, arguments);\n            } else {\n                try {\n                    return me.domHandler.getAttributeFromSelector(this, name);\n                } catch(e) {\n                    console.error(e);\n                    return origGetAttr.apply(this, arguments);\n                }\n            }\n        };\n    }\n    \n    private propagateMouseEvent(evt: MouseEvent, type?: string) {\n        return this.propagateEvent(new MouseEvent(type? type : evt.type, evt));\n    }\n\n    private duplicateTouchEvent(evt: TouchEvent, type?: string) {\n        const e = document.createEvent('TouchEvent');\n        if(!type) {\n            type = evt.type;\n        }\n        e.initEvent(type, true, false);\n        for(const prop in evt) {\n            if(prop !== 'isTrusted' && evt.hasOwnProperty(prop)) {\n                Object.defineProperty(e, prop, {\n                    writable: true,\n                    value: evt[prop],\n                });\n            }\n        }\n        Object.defineProperty(e, 'type', {\n            writable: true,\n            value: type,\n        });\n        const touches = [];\n        for(let i = 0; i < evt.touches.length; i++) {\n            const touch = evt.touches[i];\n            touches.push({identifier: touch.identifier, pageX: touch.pageX, pageY: touch.pageY,\n                clientX: touch.clientX, clientY: touch.clientY});\n        }\n        Object.defineProperty(e, 'touches', {\n            writable: true,\n            value: touches,\n        });\n        return e;\n    }\n\n    private propagateTouchEvent(evt: TouchEvent, type?: string) {\n        return this.propagateEvent(this.duplicateTouchEvent(evt, type));\n    }\n    \n    private propagateWheelEvent(evt: WheelEvent) {\n        return this.propagateEvent(new WheelEvent(evt.type, evt));\n    }\n    \n    private propagateEvent(new_event: MouseEvent|TouchEvent|WheelEvent): undefined|Element {\n        this.svg.dispatchEvent(new_event); // for EasyPZ\n\n        let triggeredElement: undefined|Element;\n        const {x, y} = SSVG.getMousePosition(new_event);\n\n        for(let interactionSel of this.interactionSelections)\n        {\n            let parentSelector = this.domHandler.getElementSelector(interactionSel);\n            let parentNode = this.vdom.getVisNodeFromSelector(parentSelector);\n            \n            //let matchingVisParent = selectedNodes[i];\n            let j = 1;\n            \n            if(!parentNode) {\n                //console.error(interactionSel, parentSelector, parentNode);\n            } else {\n                for(let vdomNode of parentNode.children)\n                {\n                    let childNode = this.nodeAtPosition(vdomNode, x - 10, y - 10);\n\n                    if(childNode)\n                    {\n                        const svgEl = this.domHandler.getElementFromNode(vdomNode);\n                        const svgChildEl = this.domHandler.getElementFromNode(childNode);\n\n                        if(svgChildEl) {\n                            Object.defineProperty(new_event, 'target', {\n                                writable: true,\n                                value: svgChildEl\n                            });\n                        }\n\n                        if(svgChildEl) {\n                            triggeredElement = svgChildEl;\n                            svgChildEl.dispatchEvent(new_event);\n                        }\n\n                        if(svgEl !== svgChildEl) {\n                            if(!triggeredElement) {\n                                triggeredElement = svgEl;\n                            }\n                            svgEl.dispatchEvent(new_event);\n                        }\n                    }\n                    j++;\n                }\n            }\n        }\n        return triggeredElement;\n    }\n\n    //TODO move this function somewhere else.\n    private static getMousePosition(event: MouseEvent|TouchEvent) : {x: number, y: number}|null\n    {\n        let pos = {x: 0, y: 0};\n\n        const mouseEvents = ['wheel', 'click', 'mousemove', 'mousedown', 'mouseup', 'dblclick', 'contextmenu',\n            'mouseenter', 'mouseleave', 'mouseout', 'mouseover'];\n        if(mouseEvents.indexOf(event.type) !== -1 && event['clientX']) {\n            pos = {x: event['clientX'], y: event['clientY']};\n        } else if(event.type.substr(0,5) === 'touch') {\n            const touches = event['touches'] ? event['touches'] : [];\n            if(touches.length < 1) return null;\n            pos = {x: touches[0].clientX, y: touches[0].clientY};\n        } else {\n            safeErrorLog('no event pos for event type ', event);\n        }\n\n        return pos;\n    }\n    \n    private nodeAtPosition(visNode: VdomNode, x: number, y: number): false|VdomNode {\n        if (visNode.type === 'circle') {\n            let cx = this.vdom.get(visNode, 'cx') || 0;\n            let cy = this.vdom.get(visNode, 'cy') || 0;\n            if (visNode.transform) {\n                const transform = DrawingUtils.parseTransform(visNode.transform);\n                if (transform.translateX) {\n                    cx += transform.translateX;\n                }\n                if (transform.translateY) {\n                    cy += transform.translateY;\n                }\n            }\n            const distance = Math.sqrt(Math.pow(cx - x, 2) + Math.pow(cy - y, 2));\n            return distance < visNode.r ? visNode : false;\n        } else if(visNode.type === 'rect' || visNode.type === 'image') {\n\n            let elX = this.vdom.get(visNode, 'x') || 0;\n            let elY = this.vdom.get(visNode, 'y') || 0;\n            const width = visNode.width;\n            const height = visNode.height;\n\n            if (visNode.transform) {\n                const transform = DrawingUtils.parseTransform(visNode.transform);\n                if (transform.translateX) {\n                    elX += transform.translateX;\n                }\n                if (transform.translateY) {\n                    elY += transform.translateY;\n                }\n            }\n\n            const centerX = elX + width / 2;\n            const centerY = elY + height / 2;\n\n            const distanceX = Math.abs(centerX - x);\n            const distanceY = Math.abs(centerY - y);\n\n            return distanceX < width / 2 && distanceY < height / 2 ? visNode : false;\n\n        } else if(visNode.type === 'g') {\n\n            const transform = this.domHandler.getTotalTransformation(visNode);\n            if(transform.translateX) {\n                x -= transform.translateX;\n            }\n            if(transform.translateY) {\n                y -= transform.translateY;\n            }\n\n            let matchAny: false|VdomNode = false;\n            for(let i = 0; i < visNode.children.length; i++) {\n                if(this.nodeAtPosition(visNode.children[i], x, y)) {\n                    matchAny = visNode.children[i];\n                }\n            }\n            return matchAny;\n        }\n        return false;\n    }\n    \n    private logDrawn() {\n        this.lastCanvasDrawTimes.push(Date.now());\n        \n        if(this.lastCanvasDrawTimes.length > 100) {\n            this.lastCanvasDrawTimes.shift(); // Remove first item\n        }\n    }\n    \n    private updateFps() {\n        if(this.lastCanvasDrawTimes.length) {\n            const timeForTenDrawsMs = Date.now() - this.lastCanvasDrawTimes[0];\n            const fps = Math.round(this.lastCanvasDrawTimes.length / timeForTenDrawsMs * 1000);\n            this.getFps(fps);\n        }\n    }\n\n    private sendUpdateToWorker(queue) {\n        const msg: CanvasUpdateWorkerMessage = {\n            cmd: 'UPDATE_NODES',\n            data: {\n                enterExit: this.enterExitQueue,\n                update: queue,\n            }\n        };\n\n        this.sendToWorker(msg);\n\n        this.enterExitQueue = [];\n    }\n\n    private sendToWorker(msg: CanvasWorkerMessage, data?: any) {\n        this.worker.postMessage(msg, data);\n        //console.log(roughSizeOfObject(msg));\n    }\n}\n\n\nlet safeLogCount = 0;\nfunction safeLog(...logContents) {\n    \n    if(safeLogCount < 200) {\n        safeLogCount++;\n        console.log(...logContents);\n    }\n}\nfunction safeErrorLog(...logContents) {\n    \n    if(safeLogCount < 200) {\n        safeLogCount++;\n        console.error(...logContents);\n    }\n}\n","import {VDOM, VdomNode, VdomNodeType} from \"../util/vdom/vdom\";\nimport {VdomManager} from \"../util/vdom/vdom-manager\";\nimport DrawingUtils, {Transformation} from \"../canvasworker/drawingUtils\";\nimport drawingUtils from \"../canvasworker/drawingUtils\";\n\nexport const CSS_STYLES = ['stroke', 'stroke-opacity', 'stroke-width', 'stroke-linejoin',\n    'fill', 'fill-opacity', 'font', 'opacity', 'font-family', 'font-size'];\n\nexport default class Domhandler {\n    private readonly vdom: VdomManager;\n    public nodesToElements: { nodes: VdomNode[], elements: SsvgElement[]} = { nodes: [], elements: []};\n    private nodesToRestyle: VdomNode[] = [];\n    private globalElementIndexCounter = 0;\n\n    constructor(private svg: SVGElement & SsvgElement, useWorker: boolean, private ignoreDesign: boolean) {\n        const visData: VDOM = {\n            type: 'svg',\n            width: parseInt(this.svg.getAttribute('width')),\n            height: parseInt(this.svg.getAttribute('height')),\n            scale: 1,\n            children: [],\n            globalElementIndex: 0,\n            style: {},\n            css: {},\n        };\n\n        this.vdom = new VdomManager(visData, ignoreDesign);\n        this.linkNodeToElement(visData, this.svg);\n        this.svg.style.display = 'none';\n        this.svg['selector'] = 'svg';\n\n        this.addChildNodesToVisData(this.svg.childNodes, this.vdom.data);\n\n        window.setTimeout(() => {\n            // Re-do the styles.\n            this.nodesToRestyle = [];\n            // Can not use this.nodesToRestyle = this.nodesToElements.nodes because this links the object and adding\n            // to this.nodesToRestyle would break the nodesToElements mapping.\n            for(const node of this.nodesToElements.nodes) {\n                this.nodesToRestyle.push(node);\n            }\n        }, 100);\n    }\n\n    enableFrontendDesignProperties() {\n        this.ignoreDesign = false;\n        this.vdom.enableFrontendDesignProperties();\n    }\n    \n    getVDom() {\n        return this.vdom;\n    }\n    \n    queueSetAttributeOnElement(element: SsvgElement, attrName: string,\n                               value: (number|string|((el: HTMLElement) => (number|string)))) {\n        //TODO: merge with updatePropertiesFromQueue from VdomManager?\n        let childIndex = element.childIndex;\n        this.vdom.ensureInitialized(attrName, false);\n\n        const evaluatedValue = typeof value === \"function\" ?\n            value.call(element, element.__data__, childIndex) : value;\n\n        const node = this.getNodeFromElement(element);\n        if(!node) {\n            console.error('node not found for ', element);\n            return;\n        }\n        this.vdom.set(node, attrName, evaluatedValue, false);\n\n        if(attrName === \"href\") {\n            try {\n                fetch(location.origin + evaluatedValue, {mode: 'cors'})\n                    .then(resp => resp.blob())\n                    .then(blob => createImageBitmap(blob))\n                    .then(bitmap => {\n                        this.vdom.ensureInitialized('image', false);\n                        this.vdom.set(node, 'image', bitmap, false);\n                    });\n            }\n            catch(e) {console.log(e);}\n        }\n\n        if(attrName === 'class' || attrName.indexOf('style') !== -1) {\n            // Apply classes immediately so styles can be applied correctly.\n            if(attrName === 'class') {\n                node.className = evaluatedValue;\n                this.nodesToRestyle.push(node);\n            } else {\n                const styleName = attrName.substr(6);\n                if(!node.style) {\n                    console.error('no styles on node ', node);\n                }\n                node.style[styleName] = evaluatedValue;\n            }\n        }\n    }\n\n    queueSetAttributeOnSelection(elements: SsvgElement[], attrName: string, value) {\n        if(!elements.length) return;\n        if(!elements[0]) {\n            //console.error('selection elements not found', elements);\n            return;\n        }\n\n        this.vdom.ensureInitialized(attrName, true, this.globalElementIndexCounter);\n\n        for(let i = 0; i < elements.length; i++) {\n            const svgEl = elements[i];\n\n            const evaluatedValue = typeof value === \"function\" ? value(svgEl.__data__, i) : value;\n            this.ensureElementIndex(svgEl);\n\n            this.vdom.set(svgEl, attrName, evaluatedValue);\n\n            //TODO: re-implement.\n            /*if(attrName === \"href\") {\n                try {\n                    fetch(location.origin + evaluatedValue, {mode: 'cors'})\n                    .then(resp => resp.blob())\n                    .then(blob => createImageBitmap(blob))\n                    .then(bitmap => {\n                        //this.checkAttrName(parentSelector, \"image\", useSharedArray, parentNode);\n                        this.setAttrQueue.ensureInitialized(\"image\", false);\n                        this.setAttrQueue[parentSelector][\"image\"][indexOfParent] = bitmap;\n                    });\n                }\n                catch(e) {console.log(e);}\n            }*/\n        }\n\n        if(attrName === 'className' || attrName.indexOf('style') !== -1) {\n            // Apply classes immediately so styles can be applied correctly.\n            for(let i = 0; i < elements.length; i++) {\n                const node = this.getNodeFromElement(elements[i]);\n                const evaluatedValue = typeof value === \"function\" ? value(elements[i].__data__, i) : value;\n\n                if(attrName === 'className') {\n                    node.className = evaluatedValue;\n                    this.nodesToRestyle.push(node);\n                } else {\n                    const styleName = attrName.substr(6);\n                    node.style[styleName] = evaluatedValue;\n                }\n            }\n        }\n    }\n\n    ensureElementIndex(svgEl: SsvgElement) {\n        if(!svgEl.globalElementIndex) {\n            const node = this.getNodeFromElement(svgEl);\n            svgEl.globalElementIndex = node.globalElementIndex;\n        }\n    }\n\n    useAttrQueue(cb: (data) => void = () => {}) {\n        if(this.nodesToRestyle && this.nodesToRestyle.length) {\n            this.applyStyles();\n        }\n\n        const data = this.vdom.getQueue();\n        cb(data);\n        this.vdom.updatePropertiesFromQueue(data);\n        this.vdom.clearQueue();\n    }\n\n    getAttributeFromSelector(element: SsvgElement, name: string) {\n        const node = this.getNodeFromElement(element);\n        \n        if(!node) {\n            console.error('trying to get attribute for unfit selection', node, element, name);\n            throw Error('element not found');\n        }\n        \n        return node[name];\n    }\n    \n    getVisNode(element: SsvgElement): VdomNode|null {\n        if(element === this.svg) {\n            return this.vdom.data;\n        }\n        return this.vdom.getNodeFromIndex(element.globalElementIndex);\n        /*const selector = this.getElementSelector(element);\n\n        if(selector === null) {\n            return null;\n        }\n        \n        return this.vdom.getVisNodeFromSelector(selector);*/\n    }\n    \n    getNodeDataFromEl(el: HTMLElement): VdomNode {\n        const roundedAttrs = ['cx', 'cy', 'r', 'x', 'y', 'x1', 'x2', 'y1', 'y2', 'width', 'height', 'stroke-width'];\n\n        const node = {\n            type: el.tagName.toLowerCase() as VdomNodeType,\n            className: el.getAttribute('class'),\n            style: {},\n            css: {},\n            children: [],\n            globalElementIndex: -1,\n            text: !el.childNodes || (el.childNodes.length === 1 && !(el.childNodes[0] as HTMLElement).tagName)\n                ? el.textContent : undefined,\n        };\n\n        for(let i = 0; i < el.attributes.length; i++) {\n            let value: string|number = el.attributes[i].nodeValue;\n            if(roundedAttrs.indexOf(el.attributes[i].nodeName) !== -1) {\n                value = parseFloat(value);\n            }\n            node[el.attributes[i].nodeName] = value;\n        }\n        node.style = {};\n\n        for(const styleProp in el.style) {\n            if(el.style.hasOwnProperty(styleProp)) {\n                const val = el.style[styleProp];\n                if(val !== '' && typeof el.style[styleProp] !== 'function') {\n                    const kebabCase = styleProp.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n                    node.style[kebabCase] = el.style[styleProp];\n                }\n            }\n        }\n\n        const clean = obj => {\n            const propNames = Object.getOwnPropertyNames(obj);\n            for (let i = 0; i < propNames.length; i++) {\n                const propName = propNames[i];\n                if (obj[propName] === null || obj[propName] === undefined) {\n                    delete obj[propName];\n                }\n            }\n        };\n        \n        clean(node);\n        \n        return node;\n    }\n\n    private applyStyles() {\n        for (let i = 0; i < document.styleSheets.length; i++) {\n            const sheet = document.styleSheets[i] as any;\n            const rules = (sheet.rules ? sheet.rules : sheet.cssRules) as CSSRuleList;\n        \n            for (let j = 0; j < rules.length; j++) {\n                const rule = rules[j] as any;\n                const selector = rule.selectorText as string;\n                if(!selector) {\n                    continue; // Skip @imports etc.\n                }\n                this.applyRuleToMatchingNodes(selector, rule);\n            }\n        }\n\n        this.nodesToRestyle = [];\n    }\n\n    updateNodeSelector(oldSelector: string, newSelector: string) {\n        /*if(oldSelector === newSelector) {\n            return;\n        }\n        if(this.setAttrQueue[newSelector]) {\n            console.warn('having problems rearranging the elements! old:', oldSelector, ', new:', newSelector,\n                this.setAttrQueue[oldSelector], this.setAttrQueue[newSelector]);\n            delete this.setAttrQueue[oldSelector];\n        } else {\n            this.setAttrQueue[newSelector] = this.setAttrQueue[oldSelector];\n            delete this.setAttrQueue[oldSelector];\n        }*/\n    }\n\n    private applyRuleToMatchingNodes(selectorString: string, rule: {style: {[settingName: string]: string}}): boolean {\n        selectorString = selectorString.trim();\n\n        const selector = selectorString\n            .replace(' >', '>')\n            .replace('> ', '>')\n            .replace('svg>', '');\n        \n        const selectorPartsLooseStrict = selector.split(' ')\n            .map(part => part.split('>'));\n\n        const parentsOfInterest = [];\n        for(const nodeToBeStyled of this.nodesToRestyle) {\n            let parent = this.getNodeParent(nodeToBeStyled);\n            while(parent && parentsOfInterest.indexOf(parent) === -1) {\n                parentsOfInterest.push(parent);\n                parent = this.getNodeParent(parent);\n            }\n        }\n\n        const setStyle = (styleName: string, rule: {style: {[settingName: string]: string}}, child: VdomNode) => {\n            if(rule.style[styleName]) {\n                const longSpecName = `css;${selectorString};${styleName}`;\n                this.vdom.ensureInitialized(longSpecName);\n\n                this.vdom.set(child, longSpecName, rule.style[styleName]);\n            }\n        };\n\n        const checkNode = (currentNode: VdomNode, looseIndex = 0, strictIndex = 0): boolean => {\n            const selPart = selectorPartsLooseStrict[looseIndex][strictIndex];\n\n            for(let childIndex = 0; childIndex < currentNode.children.length; childIndex++) {\n                const child = currentNode.children[childIndex];\n                if(parentsOfInterest.indexOf(child) === -1 && this.nodesToRestyle.indexOf(child) === -1) {\n                    continue;\n                }\n                let partialMatch = VdomManager.isCssRulePartialMatch(selPart, child, currentNode);\n\n                if(partialMatch) {\n                    if(selectorPartsLooseStrict[looseIndex].length > strictIndex + 1) {\n                        checkNode(child, looseIndex, strictIndex + 1);\n                    } else if(selectorPartsLooseStrict.length > looseIndex + 1) {\n                        checkNode(child, looseIndex + 1, strictIndex);\n                    } else {\n                        if(!child.css[selectorString]) {\n                            for(const styleName of CSS_STYLES) {\n                                setStyle(styleName, rule, child);\n                            }\n                        }\n                    }\n                } else {\n                    if(child['removedClasses']) {\n                        // temporarily add the class, see if it matches this rule, and if so, un-apply its stuff.\n                        for(const removedClass of child['removedClasses']) {\n                            child.className += ' ' + removedClass;\n\n                            let newPartialMatch = VdomManager.isCssRulePartialMatch(selPart, child, currentNode);\n                            if(newPartialMatch) {\n                                this.removeRuleStylesFromNode(selectorString, child);\n                            }\n\n                            child.className = child.className.substr(0, child.className.length -\n                                removedClass.length - 1);\n                        }\n                        setTimeout(() => {\n                            delete child['removedClasses'];\n                        }); // After this frame, reset which classes have been removed.\n                    }\n                    checkNode(child, looseIndex, strictIndex);\n                }\n            }\n            return false;\n        };\n\n        return checkNode(this.vdom.data);\n    }\n\n    removeRuleStylesFromNode(selector: string, child: VdomNode) {\n        if(child.css[selector]) {\n            this.vdom.ensureInitialized(`css;${selector};*`);\n            this.vdom.set(child, `css;${selector};*`, '');\n        }\n    }\n\n    removeNodeFromParent(element: Element, node: VdomNode, parentNode: VdomNode) {\n        const childIndex = element['childIndex'];\n        //console.log('removing', node, 'from', parentNode, [...parentNode.children], childIndex, childIndex2);\n        this.vdom.removeNode(childIndex, parentNode.globalElementIndex);\n        let index = this.nodesToElements.nodes.indexOf(node);\n        if(index === -1) {\n            return console.error('node not found', node);\n        }\n\n        this.nodesToElements.nodes.splice(index, 1);\n        this.nodesToElements.elements.splice(index, 1);\n\n        // Remove all pending changes on this element\n        //this.setAttrQueue.removePendingChanges(node);\n    }\n\n    restyleNode(parentNode, node) {\n        this.nodesToRestyle.push(node);\n    }\n    \n    private addChildNodesToVisData(childEls: HTMLElement[]|NodeList, parentNode: VdomNode): void {\n        const parentEl = this.getElementFromNode(parentNode);\n\n        for(let i  = 0; i < childEls.length; i++) {\n            let el = childEls[i] as SsvgElement;\n            \n            try\n            {\n                const node = this.getNodeDataFromEl(el);\n\n                el.parentSelector = this.getElementSelector(parentEl);\n                el.selector = this.getElementSelector(el);\n                el.childIndex = parentNode.children.length;\n\n                parentNode.children.push(node);\n                this.linkNodeToElement(node, el);\n                this.nodesToRestyle.push(node);\n                \n                if(el.childNodes)\n                {\n                    this.addChildNodesToVisData(el.childNodes, node);\n                }\n                if(node.type === 'tspan')\n                {\n                    //console.log(node, el, el.childNodes, el.textContent);\n                    //console.log(el.childNodes[0])\n                    //console.log(node, style.textAnchor);\n                }\n                if(node.type === 'text')\n                {\n                    //console.log(node, el, el.childNodes, el.textContent);\n                }\n            }\n            catch(e)\n            {\n                //console.log(e);\n                //console.log(el);\n            }\n        }\n    }\n\n    getNodeSelector(node: VdomNode): string {\n        if(node === this.vdom.data) {\n            return 'svg';\n        }\n        const element = this.getElementFromNode(node);\n        if(!element) {\n            console.error('could not find element for node ', node);\n            return '';\n        }\n        return this.getElementSelector(element, undefined, node);\n    }\n    \n    getElementSelector(element: SsvgElement, parentNode?: VdomNode, node?: VdomNode): string|null {\n        let sel = element['selector'];\n        \n        if(sel)\n        {\n            return sel;\n        }\n        else\n        {\n            if(element === this.svg) {\n                sel = 'svg';\n            } else {\n                let parentSelector = element.parentSelector ? element.parentSelector : '';\n\n                if(!parentNode) {\n                    parentNode = this.vdom.getVisNodeFromSelector(parentSelector);\n                }\n                if(!parentNode) {\n                    console.warn('Element not found', element, parentSelector, parentSelector.length, this.vdom.data);\n                    return null;\n                }\n                let index = parentNode.children.length + 1;\n                if(node && parentNode.children.indexOf(node) !== -1) {\n                    index = parentNode.children.indexOf(node) + 1;\n                }\n                let name = element.localName;\n                if (!name) {\n                    console.error(parentNode);\n                    throw Error('name is null');\n                }\n                name = name.toLowerCase();\n                sel = this.combineElementSelectors(parentSelector, name, index);\n            }\n            \n            return sel;\n        }\n    }\n\n    combineElementSelectors(parentSelector: string, elementType: string, childIndex: number) {\n        return parentSelector + ' > ' + elementType + ':nth-child(' + childIndex + ')';\n    }\n\n    getNodeParent(node:VdomNode): VdomNode|null {\n        if(node === this.vdom.data) {\n            return null;\n        }\n        const el = this.getElementFromNode(node);\n        if(!el) {\n            return null;\n        }\n        const parentEl = el.parentNode as SsvgElement;\n        return this.getNodeFromElement(parentEl);\n    }\n\n    linkNodeToElement(node: VdomNode, element: SsvgElement) {\n        this.nodesToElements.nodes.push(node);\n        this.nodesToElements.elements.push(element);\n\n        node.globalElementIndex = this.globalElementIndexCounter;\n        element.globalElementIndex = this.globalElementIndexCounter;\n        this.globalElementIndexCounter++;\n\n        this.vdom.addNode(node);\n    }\n\n    getElementFromNode(node: VdomNode): SsvgElement {\n        if(node === this.vdom.data) {\n            return this.svg;\n        }\n        const nodeIndex = this.nodesToElements.nodes.indexOf(node);\n        return this.nodesToElements.elements[nodeIndex];\n    }\n\n    getNodeFromElement(element: SsvgElement): VdomNode {\n        if(element === this.svg) {\n            return this.vdom.data;\n        }\n        return this.vdom.getNodeFromIndex(element.globalElementIndex);\n    }\n\n    getParentNode(node: VdomNode): VdomNode|null {\n        const element = this.getElementFromNode(node);\n        const parentElement = element.parentNode as SsvgElement;\n        return this.getNodeFromElement(parentElement);\n    }\n\n    getTotalTransformation(node: VdomNode): Transformation {\n        let parent = this.getParentNode(node);\n        const parents = [node];\n\n        while(parent) {\n            parents.push(parent);\n            parent = this.getParentNode(parent);\n        }\n\n        parent = parents.pop();\n        let totalTransform: Transformation = {\n            translateX: 0,\n            translateY: 0,\n            scaleX: 0,\n            scaleY: 0,\n            rotate: 0,\n            translateBeforeScale: false,\n            rotateLast: false,\n        };\n\n        while(parent) {\n            const transform = DrawingUtils.parseTransform(parent.transform);\n            totalTransform = DrawingUtils.addTransforms(totalTransform, transform);\n            parent = parents.pop();\n        }\n\n        return totalTransform;\n    }\n}\n\nlet safeLogCount = 0;\nfunction safeLog(...logContents) {\n    \n    if(safeLogCount < 50) {\n        safeLogCount++;\n        console.log(...logContents);\n    }\n}\nfunction safeErrorLog(...logContents) {\n    \n    if(safeLogCount < 50) {\n        safeLogCount++;\n        console.error(...logContents);\n    }\n}\n\nexport type SsvgElement = HTMLElement & {\n    __data__: any,\n    globalElementIndex: number,\n    parentSelector: string,\n    selector: string,\n    childIndex: number\n};\n","import DrawingUtils from \"../../canvasworker/drawingUtils\";\nimport SetPropertyQueueData from \"./set-property-queue-data\";\nimport {VDOM, VdomNode} from \"./vdom\";\nimport {SsvgElement} from \"../../frontend/domhandler\";\n\nexport class VdomManager {\n    private sharedData: {[attrName: string]: Int32Array} = {};\n    private queue: SetPropertyQueueData = {};\n    private useSharedArrayFor = ['cx', 'cy', 'x1', 'x2', 'y1', 'y2', 'x', 'y'];\n    private static IGNOREDESIGN_ATTRIBUTES = ['fill', 'stroke', 'opacity'];\n    private indexToNodeMap: {[index: number]: VdomNode} = {};\n    private static BUFFER_PRECISION_FACTOR = 10;\n    \n    constructor(public data: VDOM, private ignoreDesign: boolean) {\n        this.ensureNodesMapped();\n    }\n\n    ensureInitialized(attrName: string, useBuffer = true, numNodes?: number) {\n        if(attrName === 'class') {\n            attrName = 'className';\n        }\n\n        if(!useBuffer || this.useSharedArrayFor.indexOf(attrName) === -1) {\n            if(!this.queue[attrName]) {\n                this.queue[attrName] = [];\n            }\n        } else {\n            if(!this.sharedData[attrName]) {\n                const length = numNodes < 500 ? 1000 : numNodes * 2;\n                const buffer = new SharedArrayBuffer(Int32Array.BYTES_PER_ELEMENT * length);\n                const values = new Int32Array(buffer);\n\n                // If values have been previously set without a buffer, transfer them.\n                if(this.queue[attrName] &&\n                    !(this.queue[attrName] instanceof SharedArrayBuffer)) {\n                    const prevData: string[] = <any> this.queue[attrName];\n\n                    prevData.forEach((value, index) => {\n                        values[index] = parseFloat(value) * VdomManager.BUFFER_PRECISION_FACTOR;\n                    });\n                }\n\n                this.queue[attrName] = buffer;\n                this.sharedData[attrName] = values;\n            } else {\n                const newLength = numNodes < 500 ? 1000 : numNodes * 2;\n                const newByteLength = Int32Array.BYTES_PER_ELEMENT * newLength;\n                if(this.sharedData[attrName].byteLength / newByteLength < 0.8) {\n                    // Need to allocate more space\n                    //console.log('more space needed. prev:', this.sharedData[attrName].byteLength / Int32Array.BYTES_PER_ELEMENT, 'new', newLength);\n                    const buffer = new SharedArrayBuffer(newByteLength);\n                    const values = new Int32Array(buffer);\n                    const oldVals = new Int32Array(this.sharedData[attrName]);\n\n                    for(const i in oldVals) {\n                        values[i] = oldVals[i];\n                    }\n                    this.queue[attrName] = buffer;\n                    this.sharedData[attrName] = values;\n                }\n            }\n        }\n    }\n\n    set(element: VdomNode|SsvgElement, attrName: string, value: any, useBuffer = true) {\n        if(attrName === 'class') {\n            attrName = 'className';\n        }\n        if(element.globalElementIndex === undefined) {\n            console.error('No index', element);\n            throw new Error('Element has no index');\n        }\n        const index = element.globalElementIndex;\n        const storage = useBuffer && this.useSharedArrayFor.indexOf(attrName) !== -1 ? 'shared' : 'raw';\n        try {\n            if(storage === 'shared') {\n                value *= VdomManager.BUFFER_PRECISION_FACTOR;\n                if(value === 0) {\n                    value = 133713371337; // magical constant\n                }\n                this.sharedData[attrName][index] = value;\n            } else {\n                this.queue[attrName][index] = value;\n                if(this.sharedData[attrName] && this.sharedData[attrName][index]) {\n                    // un-set.\n                    this.sharedData[attrName][index] = 0;\n                }\n            }\n        }\n        catch(e) {\n            console.error(e);\n            console.log(this.queue, this.sharedData, storage, attrName, element, index);\n        }\n    }\n\n    ensureNodesMapped() {\n        const addToMap = (node: VdomNode) => {\n            if(node.globalElementIndex === undefined) {\n                console.error('no element index', node);\n            }\n            this.indexToNodeMap[node.globalElementIndex] = node;\n            for(const child of node.children) {\n                addToMap(child);\n            }\n        };\n        addToMap(this.data);\n    }\n\n    enableFrontendDesignProperties() {\n        this.ignoreDesign = false;\n    }\n\n    addNodeToParent(nodeData: VdomNode, parentNodeIndex: number) {\n        let parentNode = this.getNodeFromIndex(parentNodeIndex);\n        if(!parentNode) {\n            console.error('could not add node without parent', parentNodeIndex, nodeData, Object.keys(this.indexToNodeMap));\n            new Error('parent not found');\n            return;\n        }\n        this.applyParentStyles(parentNode, nodeData);\n\n        parentNode.children.push(nodeData);\n    }\n    \n    addNode(nodeData: VdomNode) {\n        this.indexToNodeMap[nodeData.globalElementIndex] = nodeData;\n    }\n\n    removeNode(childIndex: number, parentNodeIndex: number) {\n        const parentNode = this.getNodeFromIndex(parentNodeIndex);\n        const child = parentNode.children[childIndex];\n        delete this.indexToNodeMap[child.globalElementIndex];\n\n        parentNode.children.splice(childIndex, 1);\n        this.cachedListSelections = {}; //TODO only remove relevant cache.\n    }\n\n    applyParentStyles(parentNode: VdomNode, childNode: VdomNode) {\n        for(const style in parentNode.style) {\n            if(!childNode.style[style]) {\n                childNode.style[style] = parentNode.style[style];\n            }\n        }\n    }\n    \n    getParentNodeFromSelector(parentSelector: string) {\n        if(!parentSelector) {\n            console.error('no parent selector', parentSelector);\n        }\n        //if(setAttrQueue.hasOwnProperty(parentSelector)) {\n        let parentNode;\n        if(parentSelector === 'SVG_PARENT') {\n            parentNode = {children: [this.data]};\n        } else {\n            parentNode = this.getVisNodeFromSelector(parentSelector);\n        }\n        if(!parentNode) {\n            console.error('parent node not found with selector', parentSelector);\n        }\n        return parentNode;\n    }\n\n    applyStyleToNodeAndChildren(node: VdomNode, styleName: string, styleValue: string,\n                                onNodeUpdated: (node: VdomNode, attrName: string) => void) {\n        node.style[styleName] = styleValue;\n        onNodeUpdated(node, styleName);\n\n        if(node.children) {\n            for(let child of node.children) {\n                this.applyStyleToNodeAndChildren(child, styleName, styleValue, onNodeUpdated);\n            }\n        }\n    }\n\n    applyCssToNodeAndChildren(node: VdomNode, selector: string, styleName: string, value: string,\n                              onNodeUpdated: (node: VdomNode, attrName: string) => void) {\n        if(styleName === '*' && !value) {\n            delete node.css[selector];\n        } else {\n            if(!node.css[selector]) {\n                node.css[selector] = {};\n            }\n            node.css[selector][styleName] = value;\n        }\n        onNodeUpdated(node, styleName);\n\n        if(node.children) {\n            for(let child of node.children) {\n                this.applyCssToNodeAndChildren(child, selector, styleName, value, onNodeUpdated);\n            }\n        }\n    }\n\n    getNodeFromIndex(index: number): VdomNode {\n        return this.indexToNodeMap[index];\n    }\n\n    getNodeById(id: string): VdomNode {\n        const filtered = Object.values(this.indexToNodeMap).filter(node => node.id === id);\n        if(!filtered || filtered.length > 1) {\n            safeLog('multiple nodes with this id!', Object.values(this.indexToNodeMap)\n                .filter(node => node.id).map(node => node.id), id);\n            safeLog(filtered.length, filtered);\n        }\n        return !filtered || filtered.length !== 1 ? null : filtered[0];\n    }\n\n    private static ROUNDED_ATTRS = ['cx', 'cy'];\n\n    get(node: VdomNode, attrs: string|string[]) {\n        if(Array.isArray(attrs)) {\n            return attrs.map(attrName => this.getSingle(node, attrName));\n        } else {\n            return this.getSingle(node, attrs);\n        }\n    }\n\n    private getSingle(node: VdomNode, attrName: string) {\n        if(this.sharedData[attrName] && this.sharedData[attrName][node.globalElementIndex]) {\n            if(this.sharedData[attrName][node.globalElementIndex] === 133713371337) {\n                return 0;\n            }\n            return this.sharedData[attrName][node.globalElementIndex] / VdomManager.BUFFER_PRECISION_FACTOR;\n        } else {\n            return node[attrName];\n        }\n    }\n\n    getQueueValue(node: VdomNode, attrName: string) {\n        return this.queue[attrName][node.globalElementIndex];\n    }\n\n    getQueue() {\n        return this.queue;\n    }\n\n    clearQueue() {\n        this.queue = {};\n    }\n\n    updatePropertiesFromQueue(setAttrQueue: SetPropertyQueueData,\n                              onNodeUpdated: (node: VdomNode, attrName: string) => void = () => {}) {\n                \n        for(let attrName in setAttrQueue) {\n            if(!setAttrQueue.hasOwnProperty(attrName)) {\n                continue;\n            }\n            const attrNameStart = attrName.substr(0, 'style;'.length);\n            if(this.ignoreDesign && (attrNameStart === 'style;' ||\n                VdomManager.IGNOREDESIGN_ATTRIBUTES.indexOf(attrName) !== -1)) {\n                continue;\n            }\n\n            let values: string[]|Int32Array;\n\n            if('SharedArrayBuffer' in self &&\n                setAttrQueue[attrName] instanceof SharedArrayBuffer) {\n                this.sharedData[attrName] = new Int32Array(<ArrayBuffer> setAttrQueue[attrName]);\n            } else {\n                values = setAttrQueue[attrName] as string[];\n\n                for(let childIndex in values) {\n                    // This skips all values that are 0 because the SharedArrayBuffer fills up with zeros.\n                    //TODO(michaschwab): Find a solution for zero values.\n                    if(!values.hasOwnProperty(childIndex)) {\n                        continue;\n                    }\n                    /*if(values[childIndex] === 0) {\n                        continue;\n                    }*/\n                    const index = parseInt(childIndex);\n                    const childNode = this.getNodeFromIndex(index);\n                    if(!childNode) {\n                        console.error('node not found at index', index)\n                        continue;\n                    }\n                    let value: string|number = values[childIndex];\n                    if(attrNameStart === 'style;') {\n                        const styleName = attrName.substr('style;'.length);\n                        this.applyStyleToNodeAndChildren(childNode, styleName, <string> value, onNodeUpdated);\n                    } else if(attrName.substr(0, 4) === 'css;') {\n                        const [selector, styleName] = attrName.substr(4).split(';');\n\n                        this.applyCssToNodeAndChildren(childNode, selector, styleName, value, onNodeUpdated);\n                    } else {\n                        if(VdomManager.ROUNDED_ATTRS.indexOf(attrName) !== -1) {\n                            value = Math.round(parseFloat(value));\n                        }\n                        childNode[attrName] = value;\n                        onNodeUpdated(childNode, attrName);\n                    }\n                }\n            }\n        }\n    }\n    \n    private cachedListSelections: {[selector: string]: {[index: number]: VdomNode}} = {};\n    public getVisNodeFromSelector(selector: string): VdomNode|null {\n        const lastSplitPos = selector.lastIndexOf('>');\n        const selectorWithoutLast = selector.substr(0, lastSplitPos);\n        const lastPart = selector.substr(lastSplitPos + 1);\n        const parentSel = selectorWithoutLast ? this.cachedListSelections[selectorWithoutLast] : null;\n        let index = -1;\n        const nthChildPosition = lastPart.indexOf(':nth-child(');\n        if(nthChildPosition !== -1) {\n            index = parseInt(lastPart.substr(nthChildPosition + 11)); // length of ':nth-child('\n            if(parentSel && parentSel[index]) {\n                return parentSel[index];\n            }\n        }\n        \n        const selectedNodes: VdomNode[] = [];\n        this.findMatchingChildren(this.data, selector, 0, selectedNodes);\n        \n        if(selectedNodes && selectedNodes.length === 1) {\n            const el = selectedNodes[0];\n            if(index !== -1) {\n                if(!this.cachedListSelections[selectorWithoutLast]) {\n                    this.cachedListSelections[selectorWithoutLast] = {};\n                }\n                this.cachedListSelections[selectorWithoutLast][index] = el;\n            }\n            return el;\n        }\n        return null;\n    }\n    \n    public getVisNodesFromSelector(visNode: VdomNode, selector: string) {\n        const selectedNodes = [];\n        this.findMatchingChildren(visNode, selector, 0, selectedNodes);\n        return selectedNodes;\n    }\n\n    private findChildrenOfType(visNode: VdomNode, type: string, selectedNodes: VdomNode[]) {\n        const addDirectChildrenIfMatch = (node: VdomNode) => {\n            for(const child of node.children) {\n                if(child.type === type) {\n                    selectedNodes.push(child);\n                }\n                if(node.children.length !== 0) {\n                    addDirectChildrenIfMatch(child);\n                }\n            }\n        };\n        addDirectChildrenIfMatch(visNode);\n    }\n\n    public filterNodesBySelector(parentNode: VdomNode, nodes: VdomNode[], selector: string) {\n        return nodes.filter(node => VdomManager.isCssRulePartialMatch(selector, node, parentNode));\n    }\n    \n    private findMatchingChildren(visNode: VdomNode, selector: string, matchIndex: number, selectedNodes: VdomNode[],\n                                 selectedNodeSelectors: string[] = []) {\n        if(!selector && selector !== '') {\n            console.error(visNode, selector, matchIndex, selectedNodes, selectedNodeSelectors);\n            throw Error('undefined selector');\n        }\n\n        let selParts = selector.split('>').map(s => s.trim());\n        let selPart = selParts[matchIndex];\n        \n        if(matchIndex === 0 && selPart === 'svg') {\n            matchIndex++;\n            selPart = selParts[matchIndex];\n            if(matchIndex === selParts.length) {\n                selectedNodes.push(visNode);\n                selectedNodeSelectors.push(selector);\n                return;\n            }\n        }\n\n        if(selector.match(/^[a-z]+$/)) {\n            return this.findChildrenOfType(visNode, selector, selectedNodes);\n        }\n        \n        for(let i = 0; i < visNode.children.length; i++) {\n            let node = visNode.children[i];\n            let matching = false;\n            \n            if(VdomManager.isCssRulePartialMatch(selPart, node, visNode)) {\n                if(matchIndex === selParts.length - 1) {\n                    selectedNodes.push(node);\n                    selectedNodeSelectors.push(selector);\n                } else {\n                    matching = true;\n                }\n            }\n            \n            if(node.children && (matching || selParts.length < 2) && matchIndex + 1 < selParts.length) {\n                this.findMatchingChildren(node, selector, matchIndex + 1, selectedNodes, selectedNodeSelectors);\n            }\n        }\n    }\n\n    public static isCssRulePartialMatch(cssRuleSelectorPart: string, node: VdomNode, parentNode: VdomNode): boolean {\n        if(cssRuleSelectorPart.substr(0, 5) === ':not(') {\n            const newSelPart = cssRuleSelectorPart.substr(0, cssRuleSelectorPart.length - 1).substr(5);\n            return !VdomManager.isCssRulePartialMatch(newSelPart, node, parentNode);\n        }\n        if(cssRuleSelectorPart[0] === '.') { // Example: .className or .classnameA.classnameB\n            const searchClassNames = cssRuleSelectorPart.split('.');\n            searchClassNames.shift(); // remove empty first string.\n            if(node.className) {\n                let allTrue = true;\n                for(const searchClassName of searchClassNames) {\n                    if(node.className.split(' ').indexOf(searchClassName) === -1) {\n                        allTrue = false;\n                    }\n                }\n                return allTrue;\n            }\n        } else if(cssRuleSelectorPart[0] === '#') { // Example: #id\n            if(cssRuleSelectorPart.substr(1) === node.id) {\n                return true;\n            }\n        } else if(cssRuleSelectorPart.match(/^[a-z]+$/)) { // Example: rect\n            if(cssRuleSelectorPart === node.type) {\n                return true;\n            }\n        } else if(cssRuleSelectorPart.indexOf(':nth-child(') !== -1) {\n            let type = 'any';\n            let indexPart = cssRuleSelectorPart;\n\n            if(cssRuleSelectorPart[0] !== ':') {\n                type = cssRuleSelectorPart.substr(0, cssRuleSelectorPart.indexOf(':'));\n                indexPart = cssRuleSelectorPart.substr(cssRuleSelectorPart.indexOf(':'));\n            }\n\n            const targetIndex = parseInt(indexPart.substr(':nth-child('.length));\n            const index = parentNode.children.indexOf(node);\n\n            return (index === targetIndex - 1 && (type === 'any' || node.type === type));\n        }\n        else if(cssRuleSelectorPart.indexOf('.') !== -1) { // Example: rect.className\n            const cutoff = cssRuleSelectorPart.indexOf('.');\n            const typeName = cssRuleSelectorPart.substr(0, cutoff);\n            const className = cssRuleSelectorPart.substr(cutoff + 1);\n            if(typeName === node.type && node.className && node.className.split(' ').indexOf(className) !== -1) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\nlet safeLogCount = 0;\nfunction safeLog(...logContents) {\n    if(safeLogCount < 300) {\n        safeLogCount++;\n        console.log(...logContents);\n    }\n}\nfunction safeErrorLog(...logContents) {\n    if(safeLogCount < 50) {\n        safeLogCount++;\n        console.error(...logContents);\n    }\n}\n","import {VdomNode} from \"../util/vdom/vdom\";\nimport {VdomManager} from \"../util/vdom/vdom-manager\";\nimport DrawingUtils from \"./drawingUtils\";\nimport CanvasWorker from \"./canvasworker\";\n\ntype DrawMode = 'start'|'normal'|'end'|'forcesingle';\n\nexport default class Canvasrenderer implements CanvasWorker {\n    \n    private ctx: CanvasRenderingContext2D;\n    private parentValues: {[prop: string]: string|number} = {};\n    \n    constructor(private vdom: VdomManager, private canvas: HTMLCanvasElement,\n                private forceSingle = false, private onDrawn = () => {}) {\n        const ctx = canvas.getContext('2d');\n        if(!ctx) throw new Error('could not create canvas context');\n        \n        this.ctx = ctx;\n        this.ctx.scale(this.vdom.data.scale, this.vdom.data.scale);\n        this.ctx.save();\n        \n        this.draw();\n        \n        setTimeout(() => {\n            console.log(this.forceSingle, this.vdom.data);\n            this.draw();\n        }, 1000);\n    }\n    \n    private lastFullSecond = 0;\n    private countSinceLastFullSecond = 0;\n    \n    draw() {\n        const ctx = this.ctx;\n        \n        ctx.restore();\n        ctx.save();\n        \n        //ctx.fillStyle = '#fff';\n        //ctx.fillRect(0, 0, this.vdom.data.width, this.vdom.data.height);\n        ctx.clearRect(0, 0, this.vdom.data.width, this.vdom.data.height);\n    \n        //this.lastDrawn = null;\n        this.drawLine(null, 'start');\n        this.drawCircle(null, 'start');\n        this.drawRect(null, 'start');\n        this.drawText(null, 'start');\n        this.drawImage(null, 'start');\n\n        this.drawNodeAndChildren(this.vdom.data, this.forceSingle);\n\n        this.drawLine(null, 'end');\n        this.drawCircle(null, 'end');\n        this.drawRect(null, 'end');\n        this.drawText(null, 'end');\n        this.drawImage(null, 'end');\n        \n        this.onDrawn();\n    \n        const fullSecond = Math.round(performance.now() / 1000);\n        if(fullSecond !== this.lastFullSecond) {\n            this.lastFullSecond = fullSecond;\n            //console.log(this.countSinceLastFullSecond);\n            this.countSinceLastFullSecond = 0;\n        }\n        this.countSinceLastFullSecond++;\n    }\n    \n    private drawNodeAndChildren(elData: VdomNode, forceSingle: boolean, drawClip?: Path2D) {\n        if(elData.type === 'clippath' && !drawClip) {\n            return;\n        }\n\n        const ctx = this.ctx;\n        const parentValuesBackup = {...this.parentValues};\n\n        if(!drawClip) {\n            ctx.save();\n        }\n\n        const hasTransformed = this.applyTransform(elData.transform);\n\n        if(elData.transform || drawClip) {\n            forceSingle = true;\n        }\n\n        if(elData['clip-path']) {\n            if(elData['clip-path'].substr(0, 5) === 'url(#') {\n                const clipPathId = elData['clip-path'].substr(5, elData['clip-path'].length - 6);\n                const clipNode = this.vdom.getNodeById(clipPathId);\n                forceSingle = true;\n\n                if(!clipNode) {\n                    //safeErrorLog('clip node not found', elData['clip-path'], clipPathId, this.vdom.data)\n                } else {\n                    const path = new Path2D();\n                    this.drawNodeAndChildren(clipNode, forceSingle, path);\n                    ctx.clip(path);\n                }\n            } else {\n                safeErrorLog('clip path format not supported:', elData['clip-path']);\n            }\n        }\n\n        if(!elData.style.display || elData.style.display !== 'none') {\n            if(!forceSingle) {\n                this.drawSingleNode(elData, 'normal', drawClip);\n            } else {\n                this.drawSingleNode(elData, 'forcesingle', drawClip);\n            }\n        }\n\n        const fill = this.getFillStyle(elData, 'undefined');\n        if(fill !== 'undefined') {\n            this.parentValues['fill'] = fill;\n        }\n        const stroke = this.getStrokeStyle(elData, 'undefined');\n        if(stroke !== 'undefined') {\n            this.parentValues['stroke'] = stroke;\n        }\n        this.parentValues['opacity'] = elData.opacity;\n\n        if(elData.children) {\n            for(let i = 0; i < elData.children.length; i++) {\n                this.drawNodeAndChildren(elData.children[i], forceSingle, drawClip);\n            }\n        }\n\n        if(!drawClip) {\n            //safeLog('restoring ctx', elData);\n            ctx.restore();\n            this.parentValues = parentValuesBackup;\n        }\n\n        if(hasTransformed) {\n            //ctx.restore();\n        }\n    }\n    \n    private drawSingleNode(elData: VdomNode, mode: DrawMode = 'normal', path?: Path2D) {\n        const type: string = elData.type;\n        const drawFct = this['draw' + type.substr(0,1).toUpperCase() + type.substr(1)];\n        if(!drawFct) {\n            return console.error('no draw function yet for ', type);\n        }\n        drawFct.call(this, elData, mode, path);\n    }\n\n    private drawClippath(elData: VdomNode) {\n        //safeLog('clippaths can not be rendered yet.')\n    }\n\n    private drawSvg() {}\n    private drawTitle() {}\n    private drawG() {}\n    \n    private circlesByColor: {[color: string]: VdomNode[]} = {};\n    private drawCircle(elData: VdomNode, mode: DrawMode = 'normal', path?: Path2D) {\n        if(mode === 'normal') {\n            let fill = this.getFillStyle(elData, '#000');\n            const stroke = this.getStrokeStyle(elData);\n            const handle = fill + ';' + stroke;\n            if(!this.circlesByColor[handle]) {\n                this.circlesByColor[handle] = [];\n            }\n            this.circlesByColor[handle].push(elData);\n        }\n        if(mode === 'start') {\n            this.circlesByColor = {};\n            return;\n        }\n        if(mode === 'end') {\n            for(let fillAndStrokeColor in this.circlesByColor) {\n                if(this.circlesByColor.hasOwnProperty(fillAndStrokeColor)) {\n                    const split = fillAndStrokeColor.split(';');\n                    const fillColor = split[0];\n                    const strokeColor = split[1];\n\n                    this.ctx.fillStyle = fillColor;\n                    let sampleData = this.circlesByColor[fillAndStrokeColor][0];\n                    const lineWidth = this.getStrokeWidth(sampleData);\n                    this.ctx.lineWidth = lineWidth !== undefined ? lineWidth : 1;\n                    this.ctx.strokeStyle = strokeColor;\n\n                    this.ctx.beginPath();\n                    for(let elData of this.circlesByColor[fillAndStrokeColor]) {\n                        // Round values so that paths are connected correctly and there are no rendering glitches\n                        const cx = Math.round(this.vdom.get(elData, 'cx')) || 0;\n                        const cy = Math.round(this.vdom.get(elData, 'cy')) || 0;\n                        const r = Math.round(this.vdom.get(elData, 'r'));\n                        this.ctx.save();\n                        this.applyTransform(elData.transform);\n                        this.ctx.moveTo(cx + r, cy);\n                        this.ctx.arc(cx, cy, r, 0, 2 * Math.PI);\n                        this.ctx.restore();\n                        //this.ctx.restore();\n                    }\n\n                    if(fillColor !== 'none'){\n                        this.ctx.fill();\n                    }\n\n                    if(strokeColor && strokeColor !== 'none') {\n                        this.ctx.stroke();\n                    }\n                }\n            }\n            return;\n        }\n        if(mode === 'forcesingle') {\n            let fill = this.getFillStyle(elData, '#000');\n            const strokeStyle = this.getStrokeStyle(elData);\n\n            const cx = this.vdom.get(elData, 'cx') || 0;\n            const cy = this.vdom.get(elData, 'cy') || 0;\n\n            this.ctx.beginPath();\n            this.ctx.fillStyle = fill;\n            this.ctx.strokeStyle = strokeStyle;\n            this.ctx.lineWidth = this.getStrokeWidth(elData);\n            this.ctx.moveTo(cx + elData.r, cy);\n            const context = path ? path : this.ctx;\n            context.arc(cx, cy, elData.r, 0, 2 * Math.PI);\n            if(fill !== 'none' && !path){\n                this.ctx.fill();\n            }\n\n            if(strokeStyle && strokeStyle !== 'none' && !path) {\n                this.ctx.stroke();\n            }\n        }\n    }\n\n    nodeUpdated(node: VdomNode, attr: string) {\n        if(attr === '*' || attr.includes('fill') || attr.includes('opacity')) {\n            delete node['fill-cache'];\n        }\n        if(attr === '*' || attr.includes('stroke') || attr.includes('opacity')) {\n            delete node['stroke-cache'];\n        }\n    }\n\n    private getFillStyle(node: VdomNode, defaultColor = 'none'): string {\n        if(node['fill-cache']) {\n            return node['fill-cache'];\n        }\n        let fill = this.getAttributeStyleCss(node, 'fill');\n        let opacity = this.getAttributeStyleCss(node, 'opacity') || 1;\n        const fillOpacity = this.getAttributeStyleCss(node, 'fill-opacity') || 1;\n        opacity *= fillOpacity;\n\n        let defaultCol = '';\n        if(this.parentValues['fill']) {\n            defaultCol = this.parentValues['fill'] as string;\n        }\n        if(this.parentValues['style;fill']) {\n            defaultCol = this.parentValues['style;fill'] as string;\n        }\n        if(!this.parentValues['fill'] && !this.parentValues['style;fill']) {\n            defaultCol = defaultColor;\n        }\n\n        fill = DrawingUtils.colorToRgba(fill, opacity, defaultCol);\n        node['fill-cache'] = fill;\n        return fill;\n    }\n\n    private getAttributeStyleCss(node: VdomNode, style: string) {\n        if(node.style[style]) {\n            return node.style[style];\n        } else {\n            let value = node[style];\n\n            let highestSpec = -1;\n            for(const selector in node.css) {\n                if(node.css[selector][style]) {\n                    const specificity = DrawingUtils.getCssRuleSpecificityNumber(selector);\n                    if(specificity > highestSpec) {\n                        value = node.css[selector][style];\n                        highestSpec = specificity;\n                    }\n                }\n            }\n            return value;\n        }\n    }\n\n    private getStrokeStyle(node: VdomNode, defaultColor = 'none'): string {\n        if(node['stroke-cache']) {\n            return node['stroke-cache'];\n        }\n        const stroke = this.getAttributeStyleCss(node, 'stroke');\n        let opacity = this.getAttributeStyleCss(node, 'opacity') || 1;\n        const fillOpacity = this.getAttributeStyleCss(node, 'stroke-opacity') || 1;\n        opacity *= fillOpacity;\n\n        if(stroke !== undefined) {\n            node['stroke-cache'] = DrawingUtils.colorToRgba(stroke, opacity);\n        } else {\n            node['stroke-cache'] = defaultColor;\n        }\n        return node['stroke-cache'];\n    }\n\n    private getStrokeWidth(node: VdomNode) {\n        const width = this.getAttributeStyleCss(node, 'stroke-width');\n        return width === undefined ? undefined : parseFloat(width);\n    }\n\n    private rectsByColor = {};\n\n    private drawRect(elData: VdomNode, mode: DrawMode = 'normal', path?: Path2D) {\n        if(mode === 'normal') {\n            let fill = this.getFillStyle(elData, '#000');\n            const stroke = this.getStrokeStyle(elData);\n            const handle = fill + ';' + stroke;\n            if(!this.rectsByColor[handle]) {\n                this.rectsByColor[handle] = [];\n            }\n            this.rectsByColor[handle].push(elData);\n        }\n        if(mode === 'start') {\n            this.rectsByColor = {};\n            return;\n        }\n        if(mode === 'end') {\n            for(let fillAndStrokeColor in this.rectsByColor) {\n                if(this.rectsByColor.hasOwnProperty(fillAndStrokeColor)) {\n                    const split = fillAndStrokeColor.split(';');\n                    const fillColor = split[0];\n                    const strokeColor = split[1];\n                    this.ctx.fillStyle = fillColor;\n\n                    let sampleData = this.rectsByColor[fillAndStrokeColor][0];\n                    const lineWidth = this.getStrokeWidth(sampleData);\n                    this.ctx.lineWidth = lineWidth !== undefined ? lineWidth : 1;\n                    this.ctx.strokeStyle = strokeColor;\n\n                    this.ctx.beginPath();\n                    for(let elData of this.rectsByColor[fillAndStrokeColor]) {\n                        // Round values so that paths are connected correctly and there are no rendering glitches\n                        const x = Math.round(this.vdom.get(elData, 'x')) || 0;\n                        const y = Math.round(this.vdom.get(elData, 'y')) || 0;\n                        this.ctx.save();\n                        this.applyTransform(elData.transform);\n                        this.ctx.moveTo(x, y);\n                        this.ctx.rect(x, y, elData.width, elData.height);\n                        this.ctx.restore();\n                        //this.ctx.restore();\n                    }\n                    if(fillColor !== 'none'){\n                        this.ctx.fill();\n                    }\n\n                    if(strokeColor && strokeColor !== 'none') {\n                        this.ctx.stroke();\n                    }\n                }\n            }\n            return;\n        }\n        if(mode === 'forcesingle') {\n            let fill = this.getFillStyle(elData, '#000');\n            const stroke = this.getStrokeStyle(elData);\n\n            const x = this.vdom.get(elData, 'x') || 0;\n            const y = this.vdom.get(elData, 'y') || 0;\n\n            if(fill && fill !== 'none' && !path) {\n                this.ctx.fillStyle = fill;\n                this.ctx.fillRect(x, y, elData.width, elData.height);\n            }\n            if(path) {\n                path.rect(x, y, elData.width, elData.height);\n            }\n\n            if(stroke !== 'none' && !path) {\n                this.ctx.strokeStyle = stroke;\n                this.ctx.beginPath();\n                this.ctx.rect(x, y, elData.width, elData.height);\n                this.ctx.stroke();\n            }\n        }\n    }\n\n    private drawTexts: VdomNode[] = [];\n\n    private drawText(node: VdomNode, mode: DrawMode = 'normal', isClip = false) {\n        const drawSingle = (elData: VdomNode) => {\n            if(elData.text === '') {\n                return;\n            }\n            let fontFamily = this.getAttributeStyleCss(elData, 'font-family') || 'Times New Roman';\n\n            let fontSize = '16px';\n            const customSize = this.getAttributeStyleCss(elData, 'font-size');\n            if(customSize) {\n                fontSize = DrawingUtils.convertSizeToPx(customSize) + 'px';\n            }\n            let font = this.getAttributeStyleCss(elData, 'font');\n            if(!font) {\n                font = fontSize + ' ' + fontFamily;\n            }\n            let align = this.getAttributeStyleCss(elData, 'text-anchor');\n            if(align) {\n                if(align === 'middle') {\n                    align = 'center';\n                }\n                this.ctx.textAlign = align;\n            }\n            let fill = this.getAttributeStyleCss(elData, 'fill');\n            if(!fill) fill = '#000';\n            this.ctx.font = font;\n            this.ctx.fillStyle = fill;\n            let x = this.vdom.get(elData, 'x') || 0;\n            let y = this.vdom.get(elData, 'y') || 0;\n            let dx = DrawingUtils.convertSizeToPx(elData.dx, false) || 0;\n            let dy = DrawingUtils.convertSizeToPx(elData.dy, false) || 0;\n            this.ctx.fillText(elData.text, x + dx, y + dy);\n        };\n        if(mode === 'start') {\n            this.drawTexts = [];\n            return;\n        }\n        if(mode === 'normal') {\n            this.drawTexts.push(node);\n            return;\n        }\n        if(mode === 'forcesingle') {\n            return drawSingle(node);\n        }\n        if(mode === 'end') {\n            for(const currentNode of this.drawTexts) {\n                drawSingle(currentNode);\n            }\n            return;\n        }\n    }\n\n    private drawImages: VdomNode[] = [];\n\n    private drawImage(node: VdomNode, mode: DrawMode = 'normal') {\n        const drawSingle = (elData: VdomNode) => {\n            if(elData.href === '') {\n                return;\n            }\n            let fill = elData['fill'] ? elData['fill'] : elData.style['fill'];\n            if(!fill) fill = '#000';\n            this.ctx.fillStyle = fill;\n            let x = this.vdom.get(elData, 'x') || 0;\n            let y = this.vdom.get(elData, 'y') || 0;\n            let width = elData.width || 0;\n            let height = elData.height || 0;\n            if(elData.image) {\n                try {\n                    this.ctx.drawImage(elData.image, x, y, width, height);\n                } catch(e) {\n                    console.log(e);\n                }\n            }\n        };\n        if(mode === 'start') {\n            this.drawImages = [];\n            return;\n        }\n        if(mode === 'normal') {\n            this.drawImages.push(node);\n            return;\n        }\n        if(mode === 'forcesingle') {\n            return drawSingle(node);\n        }\n        if(mode === 'end') {\n            for(const currentNode of this.drawImages) {\n                drawSingle(currentNode);\n            }\n            return;\n        }\n    }\n\n    private drawPath(elData: VdomNode, mode: DrawMode = 'normal', path?: Path2D) {\n        if(mode !== 'normal' && mode !== 'forcesingle') return;\n\n        const fill = this.getFillStyle(elData, '#000');\n        const stroke = this.getStrokeStyle(elData);\n        const strokeWidth = this.getStrokeWidth(elData);\n\n        let p = new Path2D(elData.d);\n        this.ctx.fillStyle = fill;\n        if(stroke !== undefined && stroke !== 'none') {\n            if(strokeWidth !== undefined) {\n                this.ctx.lineWidth = strokeWidth;\n            }\n            this.ctx.strokeStyle = stroke;\n\n            const lineJoin = this.getAttributeStyleCss(elData, 'stroke-linejoin')\n\n            if(lineJoin) {\n                if(lineJoin === 'bevel' || lineJoin === 'round' || lineJoin === 'miter') {\n                    this.ctx.lineJoin = lineJoin;\n                } else {\n                    console.error('unknown line join value:', lineJoin)\n                }\n            }\n            if(!path) {\n                this.ctx.stroke(p);\n            }\n        }\n\n        if(fill && fill !== 'none' && !path) {\n            this.ctx.fill(p);\n        }\n        if(path) {\n            path.addPath(p);\n        }\n    }\n    \n    private drawTspan(elData: VdomNode, mode: DrawMode = 'normal') {\n        if(mode !== 'normal' && mode !== 'forcesingle') return;\n        \n        this.ctx.font = \"10px Arial\";\n        this.ctx.fillStyle = \"#000000\";\n        const textAlign = <CanvasTextAlign> (elData.style.textAnchor === \"middle\" ? \"center\" : elData.style.textAnchor);\n        this.ctx.textAlign = textAlign;\n        this.ctx.fillText(elData.text, this.vdom.get(elData, 'x'), this.vdom.get(elData, 'y'));\n    }\n\n    private drawTextpath(elData: VdomNode) {\n        console.warn('no draw function yet for textpath');\n    }\n\n    private linesByColor: {[color: string]: VdomNode[]} = {};\n    private drawLine(elData, mode: DrawMode = 'normal') {\n        if(this.vdom.data.scale > 1) {\n            //mode = 'forcesingle';\n            // In my tests, drawing a long connected path is very slow for high DPI devices.\n        }\n        if(mode === 'normal') {\n            const stroke = this.getStrokeStyle(elData);\n            const width = this.getStrokeWidth(elData);\n            if(stroke === 'none' || width === 0) {\n                return;\n            }\n            const selector = `${stroke};${width}`;\n            if(!this.linesByColor[selector]) {\n                this.linesByColor[selector] = [];\n            }\n            this.linesByColor[selector].push(elData);\n        }\n        if(mode === 'start') {\n            this.linesByColor = {};\n            return;\n        }\n        if(mode === 'end') {\n            //safeLog(Object.keys(this.linesByColor), this.linesByColor);\n            for(let selector in this.linesByColor) {\n                if(this.linesByColor.hasOwnProperty(selector)) {\n                    const split = selector.split(';');\n                    const strokeColor = split[0];\n                    const width = split[1];\n\n                    this.ctx.strokeStyle = strokeColor;\n                    this.ctx.lineWidth = parseFloat(width);\n\n                    this.ctx.beginPath();\n                    for(let elData of this.linesByColor[selector]) {\n                        if(elData.transform) {\n                            this.ctx.save();\n                            this.applyTransform(elData.transform);\n                        }\n\n                        const [x1, x2, y1, y2] = this.vdom.get(elData, ['x1', 'x2', 'y1', 'y2'])\n                            .map(val => Math.round(val) || 0);\n\n                        this.ctx.moveTo(x1, y1);\n                        this.ctx.lineTo(x2, y2);\n\n                        if(elData.transform) {\n                            //this.ctx.restore();\n                            this.ctx.restore();\n                        }\n                    }\n\n                    this.ctx.stroke();\n                }\n            }\n            return;\n        }\n        if(mode === 'forcesingle') {\n            this.ctx.beginPath();\n\n            const [x1, x2, y1, y2] = this.vdom.get(elData, ['x1', 'x2', 'y1', 'y2'])\n                .map(val => Math.round(val) || 0);\n\n            this.ctx.moveTo(x1, y1);\n            this.ctx.lineTo(x2, y2);\n\n            this.ctx.strokeStyle = this.getStrokeStyle(elData);\n            this.ctx.lineWidth = this.getStrokeWidth(elData);\n            //safeLog(stroke, this.ctx.strokeStyle);\n            this.ctx.stroke();\n        }\n    }\n\n    private drawDefs(node: VdomNode) {\n        //TODO figure out.\n    }\n\n    private drawMarker(node: VdomNode) {\n        //TODO figure out.\n    }\n    \n    private applyTransform(transformString: string) {\n        const transform = transformString ? DrawingUtils.parseTransform(transformString) : null;\n        if(transform) {\n            if(!transform.rotateLast) {\n                this.ctx.rotate(transform.rotate * Math.PI / 180);\n            }\n\n            const x = transform.translateBeforeScale ? transform.translateX : transform.translateX * transform.scaleX;\n            const y = transform.translateBeforeScale ? transform.translateY : transform.translateY * transform.scaleY;\n            this.ctx.transform(transform.scaleX, 0, 0, transform.scaleY, x, y);\n\n            if(transform.rotateLast) {\n                this.ctx.rotate(transform.rotate * Math.PI / 180);\n            }\n\n            return true;\n        }\n        return false;\n    }\n}\n\n\nlet safeLogCount = 0;\nfunction safeLog(...logContents) {\n    \n    if(safeLogCount < 300) {\n        safeLogCount++;\n        console.log(...logContents);\n    }\n}\nfunction safeErrorLog(...logContents) {\n    \n    if(safeLogCount < 50) {\n        safeLogCount++;\n        console.error(...logContents);\n    }\n}\n","import './custom';\nimport CanvasWorkerImporter = require('worker-loader?inline=true!./canvasworker');\n\nexport default CanvasWorkerImporter;","module.exports = function() {\n  return require(\"!!/home/micha/WebstormProjects/ssvg/node_modules/worker-loader/dist/workers/InlineWorker.js\")(\"!function(t){var e={};function s(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,s),i.l=!0,i.exports}s.m=t,s.c=e,s.d=function(t,e,r){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},s.r=function(t){\\\"undefined\\\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:\\\"Module\\\"}),Object.defineProperty(t,\\\"__esModule\\\",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&\\\"object\\\"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(s.r(r),Object.defineProperty(r,\\\"default\\\",{enumerable:!0,value:t}),2&e&&\\\"string\\\"!=typeof t)for(var i in t)s.d(r,i,function(e){return t[e]}.bind(null,i));return r},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,\\\"a\\\",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p=\\\"\\\",s(s.s=0)}([function(t,e,s){\\\"use strict\\\";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,\\\"__esModule\\\",{value:!0});const i=s(1),n=r(s(2));let o;const l=self;let a;l.onmessage=function(t){const e=t.data;if(e&&e.cmd)switch(e.cmd){case\\\"INIT\\\":a=new i.VdomManager(e.data.visData,!1);const t=!!e.data.safeMode;o=new n.default(a,e.data.canvas,t,()=>{l.postMessage({msg:\\\"DRAWN\\\"})});break;case\\\"UPDATE_NODES\\\":const s=e;for(let t of s.data.enterExit)\\\"ENTER\\\"===t.cmd?(t.keepChildren||(t.node.children=[]),a.addNode(t.node),a.addNodeToParent(t.node,t.parentGlobalIndex),o.addNode&&o.addNode(t.node)):\\\"EXIT\\\"===t.cmd&&a.removeNode(t.childIndex,t.parentGlobalIndex);o.updatePropertiesFromQueue?o.updatePropertiesFromQueue(s.data.update):a.updatePropertiesFromQueue(s.data.update,o.nodeUpdated),o.draw();break;default:console.error(\\\"did not find command \\\",e.cmd)}}},function(t,e,s){\\\"use strict\\\";Object.defineProperty(e,\\\"__esModule\\\",{value:!0});class r{constructor(t,e){this.data=t,this.ignoreDesign=e,this.sharedData={},this.queue={},this.useSharedArrayFor=[\\\"cx\\\",\\\"cy\\\",\\\"x1\\\",\\\"x2\\\",\\\"y1\\\",\\\"y2\\\",\\\"x\\\",\\\"y\\\"],this.indexToNodeMap={},this.cachedListSelections={},this.ensureNodesMapped()}ensureInitialized(t,e=!0,s){if(\\\"class\\\"===t&&(t=\\\"className\\\"),e&&-1!==this.useSharedArrayFor.indexOf(t))if(this.sharedData[t]){const e=s<500?1e3:2*s,r=Int32Array.BYTES_PER_ELEMENT*e;if(this.sharedData[t].byteLength/r<.8){const e=new SharedArrayBuffer(r),s=new Int32Array(e),i=new Int32Array(this.sharedData[t]);for(const t in i)s[t]=i[t];this.queue[t]=e,this.sharedData[t]=s}}else{const e=s<500?1e3:2*s,i=new SharedArrayBuffer(Int32Array.BYTES_PER_ELEMENT*e),n=new Int32Array(i);if(this.queue[t]&&!(this.queue[t]instanceof SharedArrayBuffer)){this.queue[t].forEach((t,e)=>{n[e]=parseFloat(t)*r.BUFFER_PRECISION_FACTOR})}this.queue[t]=i,this.sharedData[t]=n}else this.queue[t]||(this.queue[t]=[])}set(t,e,s,i=!0){if(\\\"class\\\"===e&&(e=\\\"className\\\"),void 0===t.globalElementIndex)throw console.error(\\\"No index\\\",t),new Error(\\\"Element has no index\\\");const n=t.globalElementIndex,o=i&&-1!==this.useSharedArrayFor.indexOf(e)?\\\"shared\\\":\\\"raw\\\";try{\\\"shared\\\"===o?(0===(s*=r.BUFFER_PRECISION_FACTOR)&&(s=133713371337),this.sharedData[e][n]=s):(this.queue[e][n]=s,this.sharedData[e]&&this.sharedData[e][n]&&(this.sharedData[e][n]=0))}catch(s){console.error(s),console.log(this.queue,this.sharedData,o,e,t,n)}}ensureNodesMapped(){const t=e=>{void 0===e.globalElementIndex&&console.error(\\\"no element index\\\",e),this.indexToNodeMap[e.globalElementIndex]=e;for(const s of e.children)t(s)};t(this.data)}enableFrontendDesignProperties(){this.ignoreDesign=!1}addNodeToParent(t,e){let s=this.getNodeFromIndex(e);if(!s)return console.error(\\\"could not add node without parent\\\",e,t,Object.keys(this.indexToNodeMap)),void new Error(\\\"parent not found\\\");this.applyParentStyles(s,t),s.children.push(t)}addNode(t){this.indexToNodeMap[t.globalElementIndex]=t}removeNode(t,e){const s=this.getNodeFromIndex(e),r=s.children[t];delete this.indexToNodeMap[r.globalElementIndex],s.children.splice(t,1),this.cachedListSelections={}}applyParentStyles(t,e){for(const s in t.style)e.style[s]||(e.style[s]=t.style[s])}getParentNodeFromSelector(t){let e;return t||console.error(\\\"no parent selector\\\",t),e=\\\"SVG_PARENT\\\"===t?{children:[this.data]}:this.getVisNodeFromSelector(t),e||console.error(\\\"parent node not found with selector\\\",t),e}applyStyleToNodeAndChildren(t,e,s,r){if(t.style[e]=s,r(t,e),t.children)for(let i of t.children)this.applyStyleToNodeAndChildren(i,e,s,r)}applyCssToNodeAndChildren(t,e,s,r,i){if(\\\"*\\\"!==s||r?(t.css[e]||(t.css[e]={}),t.css[e][s]=r):delete t.css[e],i(t,s),t.children)for(let n of t.children)this.applyCssToNodeAndChildren(n,e,s,r,i)}getNodeFromIndex(t){return this.indexToNodeMap[t]}getNodeById(t){const e=Object.values(this.indexToNodeMap).filter(e=>e.id===t);return(!e||e.length>1)&&(n(\\\"multiple nodes with this id!\\\",Object.values(this.indexToNodeMap).filter(t=>t.id).map(t=>t.id),t),n(e.length,e)),e&&1===e.length?e[0]:null}get(t,e){return Array.isArray(e)?e.map(e=>this.getSingle(t,e)):this.getSingle(t,e)}getSingle(t,e){return this.sharedData[e]&&this.sharedData[e][t.globalElementIndex]?133713371337===this.sharedData[e][t.globalElementIndex]?0:this.sharedData[e][t.globalElementIndex]/r.BUFFER_PRECISION_FACTOR:t[e]}getQueueValue(t,e){return this.queue[e][t.globalElementIndex]}getQueue(){return this.queue}clearQueue(){this.queue={}}updatePropertiesFromQueue(t,e=(()=>{})){for(let s in t){if(!t.hasOwnProperty(s))continue;const i=s.substr(0,\\\"style;\\\".length);if(this.ignoreDesign&&(\\\"style;\\\"===i||-1!==r.IGNOREDESIGN_ATTRIBUTES.indexOf(s)))continue;let n;if(\\\"SharedArrayBuffer\\\"in self&&t[s]instanceof SharedArrayBuffer)this.sharedData[s]=new Int32Array(t[s]);else{n=t[s];for(let t in n){if(!n.hasOwnProperty(t))continue;const o=parseInt(t),l=this.getNodeFromIndex(o);if(!l){console.error(\\\"node not found at index\\\",o);continue}let a=n[t];if(\\\"style;\\\"===i){const t=s.substr(\\\"style;\\\".length);this.applyStyleToNodeAndChildren(l,t,a,e)}else if(\\\"css;\\\"===s.substr(0,4)){const[t,r]=s.substr(4).split(\\\";\\\");this.applyCssToNodeAndChildren(l,t,r,a,e)}else-1!==r.ROUNDED_ATTRS.indexOf(s)&&(a=Math.round(parseFloat(a))),l[s]=a,e(l,s)}}}}getVisNodeFromSelector(t){const e=t.lastIndexOf(\\\">\\\"),s=t.substr(0,e),r=t.substr(e+1),i=s?this.cachedListSelections[s]:null;let n=-1;const o=r.indexOf(\\\":nth-child(\\\");if(-1!==o&&(n=parseInt(r.substr(o+11)),i&&i[n]))return i[n];const l=[];if(this.findMatchingChildren(this.data,t,0,l),l&&1===l.length){const t=l[0];return-1!==n&&(this.cachedListSelections[s]||(this.cachedListSelections[s]={}),this.cachedListSelections[s][n]=t),t}return null}getVisNodesFromSelector(t,e){const s=[];return this.findMatchingChildren(t,e,0,s),s}findChildrenOfType(t,e,s){const r=t=>{for(const i of t.children)i.type===e&&s.push(i),0!==t.children.length&&r(i)};r(t)}filterNodesBySelector(t,e,s){return e.filter(e=>r.isCssRulePartialMatch(s,e,t))}findMatchingChildren(t,e,s,i,n=[]){if(!e&&\\\"\\\"!==e)throw console.error(t,e,s,i,n),Error(\\\"undefined selector\\\");let o=e.split(\\\">\\\").map(t=>t.trim()),l=o[s];if(0===s&&\\\"svg\\\"===l&&(l=o[++s],s===o.length))return i.push(t),void n.push(e);if(e.match(/^[a-z]+$/))return this.findChildrenOfType(t,e,i);for(let a=0;a<t.children.length;a++){let c=t.children[a],h=!1;r.isCssRulePartialMatch(l,c,t)&&(s===o.length-1?(i.push(c),n.push(e)):h=!0),c.children&&(h||o.length<2)&&s+1<o.length&&this.findMatchingChildren(c,e,s+1,i,n)}}static isCssRulePartialMatch(t,e,s){if(\\\":not(\\\"===t.substr(0,5)){const i=t.substr(0,t.length-1).substr(5);return!r.isCssRulePartialMatch(i,e,s)}if(\\\".\\\"===t[0]){const s=t.split(\\\".\\\");if(s.shift(),e.className){let t=!0;for(const r of s)-1===e.className.split(\\\" \\\").indexOf(r)&&(t=!1);return t}}else if(\\\"#\\\"===t[0]){if(t.substr(1)===e.id)return!0}else if(t.match(/^[a-z]+$/)){if(t===e.type)return!0}else{if(-1!==t.indexOf(\\\":nth-child(\\\")){let r=\\\"any\\\",i=t;\\\":\\\"!==t[0]&&(r=t.substr(0,t.indexOf(\\\":\\\")),i=t.substr(t.indexOf(\\\":\\\")));const n=parseInt(i.substr(\\\":nth-child(\\\".length));return s.children.indexOf(e)===n-1&&(\\\"any\\\"===r||e.type===r)}if(-1!==t.indexOf(\\\".\\\")){const s=t.indexOf(\\\".\\\"),r=t.substr(0,s),i=t.substr(s+1);if(r===e.type&&e.className&&-1!==e.className.split(\\\" \\\").indexOf(i))return!0}}return!1}}e.VdomManager=r,r.IGNOREDESIGN_ATTRIBUTES=[\\\"fill\\\",\\\"stroke\\\",\\\"opacity\\\"],r.BUFFER_PRECISION_FACTOR=10,r.ROUNDED_ATTRS=[\\\"cx\\\",\\\"cy\\\"];let i=0;function n(...t){i<300&&(i++,console.log(...t))}},function(t,e,s){\\\"use strict\\\";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,\\\"__esModule\\\",{value:!0});const i=r(s(3));e.default=class{constructor(t,e,s=!1,r=(()=>{})){this.vdom=t,this.canvas=e,this.forceSingle=s,this.onDrawn=r,this.parentValues={},this.lastFullSecond=0,this.countSinceLastFullSecond=0,this.circlesByColor={},this.rectsByColor={},this.drawTexts=[],this.drawImages=[],this.linesByColor={};const i=e.getContext(\\\"2d\\\");if(!i)throw new Error(\\\"could not create canvas context\\\");this.ctx=i,this.ctx.scale(this.vdom.data.scale,this.vdom.data.scale),this.ctx.save(),this.draw(),setTimeout(()=>{console.log(this.forceSingle,this.vdom.data),this.draw()},1e3)}draw(){const t=this.ctx;t.restore(),t.save(),t.clearRect(0,0,this.vdom.data.width,this.vdom.data.height),this.drawLine(null,\\\"start\\\"),this.drawCircle(null,\\\"start\\\"),this.drawRect(null,\\\"start\\\"),this.drawText(null,\\\"start\\\"),this.drawImage(null,\\\"start\\\"),this.drawNodeAndChildren(this.vdom.data,this.forceSingle),this.drawLine(null,\\\"end\\\"),this.drawCircle(null,\\\"end\\\"),this.drawRect(null,\\\"end\\\"),this.drawText(null,\\\"end\\\"),this.drawImage(null,\\\"end\\\"),this.onDrawn();const e=Math.round(performance.now()/1e3);e!==this.lastFullSecond&&(this.lastFullSecond=e,this.countSinceLastFullSecond=0),this.countSinceLastFullSecond++}drawNodeAndChildren(t,e,s){if(\\\"clippath\\\"===t.type&&!s)return;const r=this.ctx,i=Object.assign({},this.parentValues);s||r.save();this.applyTransform(t.transform);if((t.transform||s)&&(e=!0),t[\\\"clip-path\\\"])if(\\\"url(#\\\"===t[\\\"clip-path\\\"].substr(0,5)){const s=t[\\\"clip-path\\\"].substr(5,t[\\\"clip-path\\\"].length-6),i=this.vdom.getNodeById(s);if(e=!0,i){const t=new Path2D;this.drawNodeAndChildren(i,e,t),r.clip(t)}else;}else!function(...t){n<50&&(n++,console.error(...t))}(\\\"clip path format not supported:\\\",t[\\\"clip-path\\\"]);t.style.display&&\\\"none\\\"===t.style.display||(e?this.drawSingleNode(t,\\\"forcesingle\\\",s):this.drawSingleNode(t,\\\"normal\\\",s));const o=this.getFillStyle(t,\\\"undefined\\\");\\\"undefined\\\"!==o&&(this.parentValues.fill=o);const l=this.getStrokeStyle(t,\\\"undefined\\\");if(\\\"undefined\\\"!==l&&(this.parentValues.stroke=l),this.parentValues.opacity=t.opacity,t.children)for(let r=0;r<t.children.length;r++)this.drawNodeAndChildren(t.children[r],e,s);s||(r.restore(),this.parentValues=i)}drawSingleNode(t,e=\\\"normal\\\",s){const r=t.type,i=this[\\\"draw\\\"+r.substr(0,1).toUpperCase()+r.substr(1)];if(!i)return console.error(\\\"no draw function yet for \\\",r);i.call(this,t,e,s)}drawClippath(t){}drawSvg(){}drawTitle(){}drawG(){}drawCircle(t,e=\\\"normal\\\",s){if(\\\"normal\\\"===e){const e=this.getFillStyle(t,\\\"#000\\\")+\\\";\\\"+this.getStrokeStyle(t);this.circlesByColor[e]||(this.circlesByColor[e]=[]),this.circlesByColor[e].push(t)}if(\\\"start\\\"!==e){if(\\\"end\\\"!==e){if(\\\"forcesingle\\\"===e){let e=this.getFillStyle(t,\\\"#000\\\");const r=this.getStrokeStyle(t),i=this.vdom.get(t,\\\"cx\\\")||0,n=this.vdom.get(t,\\\"cy\\\")||0;this.ctx.beginPath(),this.ctx.fillStyle=e,this.ctx.strokeStyle=r,this.ctx.lineWidth=this.getStrokeWidth(t),this.ctx.moveTo(i+t.r,n),(s||this.ctx).arc(i,n,t.r,0,2*Math.PI),\\\"none\\\"===e||s||this.ctx.fill(),r&&\\\"none\\\"!==r&&!s&&this.ctx.stroke()}}else for(let t in this.circlesByColor)if(this.circlesByColor.hasOwnProperty(t)){const e=t.split(\\\";\\\"),s=e[0],r=e[1];this.ctx.fillStyle=s;let i=this.circlesByColor[t][0];const n=this.getStrokeWidth(i);this.ctx.lineWidth=void 0!==n?n:1,this.ctx.strokeStyle=r,this.ctx.beginPath();for(let e of this.circlesByColor[t]){const t=Math.round(this.vdom.get(e,\\\"cx\\\"))||0,s=Math.round(this.vdom.get(e,\\\"cy\\\"))||0,r=Math.round(this.vdom.get(e,\\\"r\\\"));this.ctx.save(),this.applyTransform(e.transform),this.ctx.moveTo(t+r,s),this.ctx.arc(t,s,r,0,2*Math.PI),this.ctx.restore()}\\\"none\\\"!==s&&this.ctx.fill(),r&&\\\"none\\\"!==r&&this.ctx.stroke()}}else this.circlesByColor={}}nodeUpdated(t,e){(\\\"*\\\"===e||e.includes(\\\"fill\\\")||e.includes(\\\"opacity\\\"))&&delete t[\\\"fill-cache\\\"],(\\\"*\\\"===e||e.includes(\\\"stroke\\\")||e.includes(\\\"opacity\\\"))&&delete t[\\\"stroke-cache\\\"]}getFillStyle(t,e=\\\"none\\\"){if(t[\\\"fill-cache\\\"])return t[\\\"fill-cache\\\"];let s=this.getAttributeStyleCss(t,\\\"fill\\\"),r=this.getAttributeStyleCss(t,\\\"opacity\\\")||1;r*=this.getAttributeStyleCss(t,\\\"fill-opacity\\\")||1;let n=\\\"\\\";return this.parentValues.fill&&(n=this.parentValues.fill),this.parentValues[\\\"style;fill\\\"]&&(n=this.parentValues[\\\"style;fill\\\"]),this.parentValues.fill||this.parentValues[\\\"style;fill\\\"]||(n=e),s=i.default.colorToRgba(s,r,n),t[\\\"fill-cache\\\"]=s,s}getAttributeStyleCss(t,e){if(t.style[e])return t.style[e];{let s=t[e],r=-1;for(const n in t.css)if(t.css[n][e]){const o=i.default.getCssRuleSpecificityNumber(n);o>r&&(s=t.css[n][e],r=o)}return s}}getStrokeStyle(t,e=\\\"none\\\"){if(t[\\\"stroke-cache\\\"])return t[\\\"stroke-cache\\\"];const s=this.getAttributeStyleCss(t,\\\"stroke\\\");let r=this.getAttributeStyleCss(t,\\\"opacity\\\")||1;return r*=this.getAttributeStyleCss(t,\\\"stroke-opacity\\\")||1,t[\\\"stroke-cache\\\"]=void 0!==s?i.default.colorToRgba(s,r):e,t[\\\"stroke-cache\\\"]}getStrokeWidth(t){const e=this.getAttributeStyleCss(t,\\\"stroke-width\\\");return void 0===e?void 0:parseFloat(e)}drawRect(t,e=\\\"normal\\\",s){if(\\\"normal\\\"===e){const e=this.getFillStyle(t,\\\"#000\\\")+\\\";\\\"+this.getStrokeStyle(t);this.rectsByColor[e]||(this.rectsByColor[e]=[]),this.rectsByColor[e].push(t)}if(\\\"start\\\"!==e){if(\\\"end\\\"!==e){if(\\\"forcesingle\\\"===e){let e=this.getFillStyle(t,\\\"#000\\\");const r=this.getStrokeStyle(t),i=this.vdom.get(t,\\\"x\\\")||0,n=this.vdom.get(t,\\\"y\\\")||0;e&&\\\"none\\\"!==e&&!s&&(this.ctx.fillStyle=e,this.ctx.fillRect(i,n,t.width,t.height)),s&&s.rect(i,n,t.width,t.height),\\\"none\\\"===r||s||(this.ctx.strokeStyle=r,this.ctx.beginPath(),this.ctx.rect(i,n,t.width,t.height),this.ctx.stroke())}}else for(let t in this.rectsByColor)if(this.rectsByColor.hasOwnProperty(t)){const e=t.split(\\\";\\\"),s=e[0],r=e[1];this.ctx.fillStyle=s;let i=this.rectsByColor[t][0];const n=this.getStrokeWidth(i);this.ctx.lineWidth=void 0!==n?n:1,this.ctx.strokeStyle=r,this.ctx.beginPath();for(let e of this.rectsByColor[t]){const t=Math.round(this.vdom.get(e,\\\"x\\\"))||0,s=Math.round(this.vdom.get(e,\\\"y\\\"))||0;this.ctx.save(),this.applyTransform(e.transform),this.ctx.moveTo(t,s),this.ctx.rect(t,s,e.width,e.height),this.ctx.restore()}\\\"none\\\"!==s&&this.ctx.fill(),r&&\\\"none\\\"!==r&&this.ctx.stroke()}}else this.rectsByColor={}}drawText(t,e=\\\"normal\\\",s=!1){const r=t=>{if(\\\"\\\"===t.text)return;let e=this.getAttributeStyleCss(t,\\\"font-family\\\")||\\\"Times New Roman\\\",s=\\\"16px\\\";const r=this.getAttributeStyleCss(t,\\\"font-size\\\");r&&(s=i.default.convertSizeToPx(r)+\\\"px\\\");let n=this.getAttributeStyleCss(t,\\\"font\\\");n||(n=s+\\\" \\\"+e);let o=this.getAttributeStyleCss(t,\\\"text-anchor\\\");o&&(\\\"middle\\\"===o&&(o=\\\"center\\\"),this.ctx.textAlign=o);let l=this.getAttributeStyleCss(t,\\\"fill\\\");l||(l=\\\"#000\\\"),this.ctx.font=n,this.ctx.fillStyle=l;let a=this.vdom.get(t,\\\"x\\\")||0,c=this.vdom.get(t,\\\"y\\\")||0,h=i.default.convertSizeToPx(t.dx,!1)||0,d=i.default.convertSizeToPx(t.dy,!1)||0;this.ctx.fillText(t.text,a+h,c+d)};if(\\\"start\\\"!==e)if(\\\"normal\\\"!==e){if(\\\"forcesingle\\\"===e)return r(t);if(\\\"end\\\"!==e);else for(const t of this.drawTexts)r(t)}else this.drawTexts.push(t);else this.drawTexts=[]}drawImage(t,e=\\\"normal\\\"){const s=t=>{if(\\\"\\\"===t.href)return;let e=t.fill?t.fill:t.style.fill;e||(e=\\\"#000\\\"),this.ctx.fillStyle=e;let s=this.vdom.get(t,\\\"x\\\")||0,r=this.vdom.get(t,\\\"y\\\")||0,i=t.width||0,n=t.height||0;if(t.image)try{this.ctx.drawImage(t.image,s,r,i,n)}catch(t){console.log(t)}};if(\\\"start\\\"!==e)if(\\\"normal\\\"!==e){if(\\\"forcesingle\\\"===e)return s(t);if(\\\"end\\\"!==e);else for(const t of this.drawImages)s(t)}else this.drawImages.push(t);else this.drawImages=[]}drawPath(t,e=\\\"normal\\\",s){if(\\\"normal\\\"!==e&&\\\"forcesingle\\\"!==e)return;const r=this.getFillStyle(t,\\\"#000\\\"),i=this.getStrokeStyle(t),n=this.getStrokeWidth(t);let o=new Path2D(t.d);if(this.ctx.fillStyle=r,void 0!==i&&\\\"none\\\"!==i){void 0!==n&&(this.ctx.lineWidth=n),this.ctx.strokeStyle=i;const e=this.getAttributeStyleCss(t,\\\"stroke-linejoin\\\");e&&(\\\"bevel\\\"===e||\\\"round\\\"===e||\\\"miter\\\"===e?this.ctx.lineJoin=e:console.error(\\\"unknown line join value:\\\",e)),s||this.ctx.stroke(o)}r&&\\\"none\\\"!==r&&!s&&this.ctx.fill(o),s&&s.addPath(o)}drawTspan(t,e=\\\"normal\\\"){if(\\\"normal\\\"!==e&&\\\"forcesingle\\\"!==e)return;this.ctx.font=\\\"10px Arial\\\",this.ctx.fillStyle=\\\"#000000\\\";const s=\\\"middle\\\"===t.style.textAnchor?\\\"center\\\":t.style.textAnchor;this.ctx.textAlign=s,this.ctx.fillText(t.text,this.vdom.get(t,\\\"x\\\"),this.vdom.get(t,\\\"y\\\"))}drawTextpath(t){console.warn(\\\"no draw function yet for textpath\\\")}drawLine(t,e=\\\"normal\\\"){if(this.vdom.data.scale,\\\"normal\\\"===e){const e=this.getStrokeStyle(t),s=this.getStrokeWidth(t);if(\\\"none\\\"===e||0===s)return;const r=`${e};${s}`;this.linesByColor[r]||(this.linesByColor[r]=[]),this.linesByColor[r].push(t)}if(\\\"start\\\"!==e){if(\\\"end\\\"!==e){if(\\\"forcesingle\\\"===e){this.ctx.beginPath();const[e,s,r,i]=this.vdom.get(t,[\\\"x1\\\",\\\"x2\\\",\\\"y1\\\",\\\"y2\\\"]).map(t=>Math.round(t)||0);this.ctx.moveTo(e,r),this.ctx.lineTo(s,i),this.ctx.strokeStyle=this.getStrokeStyle(t),this.ctx.lineWidth=this.getStrokeWidth(t),this.ctx.stroke()}}else for(let t in this.linesByColor)if(this.linesByColor.hasOwnProperty(t)){const e=t.split(\\\";\\\"),s=e[0],r=e[1];this.ctx.strokeStyle=s,this.ctx.lineWidth=parseFloat(r),this.ctx.beginPath();for(let e of this.linesByColor[t]){e.transform&&(this.ctx.save(),this.applyTransform(e.transform));const[t,s,r,i]=this.vdom.get(e,[\\\"x1\\\",\\\"x2\\\",\\\"y1\\\",\\\"y2\\\"]).map(t=>Math.round(t)||0);this.ctx.moveTo(t,r),this.ctx.lineTo(s,i),e.transform&&this.ctx.restore()}this.ctx.stroke()}}else this.linesByColor={}}drawDefs(t){}drawMarker(t){}applyTransform(t){const e=t?i.default.parseTransform(t):null;if(e){e.rotateLast||this.ctx.rotate(e.rotate*Math.PI/180);const t=e.translateBeforeScale?e.translateX:e.translateX*e.scaleX,s=e.translateBeforeScale?e.translateY:e.translateY*e.scaleY;return this.ctx.transform(e.scaleX,0,0,e.scaleY,t,s),e.rotateLast&&this.ctx.rotate(e.rotate*Math.PI/180),!0}return!1}};let n=0},function(t,e,s){\\\"use strict\\\";Object.defineProperty(e,\\\"__esModule\\\",{value:!0});class r{static parseTransform(t){const e={translateX:0,translateY:0,scaleX:1,scaleY:1,rotate:0,translateBeforeScale:!1,rotateLast:!1};if(t){if(\\\"string\\\"!=typeof t)return e.scaleX=t.k,e.scaleY=t.k,e.translateX=t.x,e.translateY=t.y,e.translateBeforeScale=!0,e;let s=t;s=s.replace(/ /g,\\\"\\\");const r=/\\\\s*translate\\\\(([-0-9.]+),([-0-9.]+)\\\\)/.exec(s);r&&(e.translateX=parseFloat(r[1]),e.translateY=parseFloat(r[2]));const i=/\\\\s*scale\\\\(([-0-9.]+)(,[-0-9.]+)?\\\\)/.exec(s);i&&(e.scaleX=parseFloat(i[1]),e.scaleY=i[2]?parseFloat(i[2].substr(1)):parseFloat(i[1]));const n=/\\\\s*rotate\\\\(([-0-9.]+)\\\\)/.exec(s);n&&(e.rotate=parseFloat(n[1])),/\\\\s*translate\\\\(([-0-9.]+),([-0-9.]+)\\\\)scale\\\\(([-0-9.,]+)\\\\)/.exec(s)&&(e.translateBeforeScale=!0),/\\\\s*rotate\\\\(([-0-9.,]+)\\\\)$/.exec(s)&&(e.rotateLast=!0);const o=/\\\\s*matrix\\\\(([-0-9.]+),([-0-9.]+),([-0-9.]+),([-0-9.]+),([-0-9.]+),([-0-9.]+)\\\\)/.exec(s);o&&(e.scaleX=parseFloat(o[1]),e.scaleY=parseFloat(o[4]),e.translateX=parseFloat(o[5]),e.translateY=parseFloat(o[6]))}return e}static addTransforms(t,e){return{translateX:t.translateX+e.translateX,translateY:t.translateY+e.translateY,scaleX:t.scaleX*e.scaleX,scaleY:t.scaleY*e.scaleY,rotate:t.rotate+e.rotate,translateBeforeScale:!1,rotateLast:!1}}static convertSizeToPx(t,e=!0){const s=e?14:void 0;return void 0===t?s:\\\"number\\\"==typeof t?t:\\\"em\\\"===t.substr(-2)?Math.round(12*parseFloat(t)):\\\"px\\\"===t.substr(-2)?parseInt(t):t.match(/^[0-9]+$/)?parseInt(t):(console.warn(\\\"size in unsupported format: \\\",t),s)}static colorToRgba(t,e=1,s=\\\"none\\\"){if(\\\"none\\\"===t)return t;t||(t=s);const i=`${t}-${e}`;if(r.rgbaCache[i])return r.rgbaCache[i];if(t=r.CssNamedColorToHex(t),1===e&&\\\"string\\\"==typeof t)return r.rgbaCache[i]=t,t;let n;if(\\\"string\\\"==typeof t&&\\\"#\\\"===t[0]){let s;if(!/^#([A-Fa-f0-9]{3}){1,2}$/.test(t))throw new Error(\\\"Bad Hex\\\");s=t.substring(1),3==s.length&&(s=s[0]+s[0]+s[1]+s[1]+s[2]+s[2]),s=\\\"0x\\\"+s,n=\\\"rgba(\\\"+[s>>16&255,s>>8&255,255&s].join(\\\",\\\")+\\\",\\\"+e+\\\")\\\"}else if(\\\"object\\\"==typeof t){if(\\\"r\\\"in t)n=\\\"rgba(\\\"+t.r+\\\",\\\"+t.g+\\\",\\\"+t.b+\\\",\\\"+e+\\\")\\\";else if(\\\"h\\\"in t){const s=r.hslToRgb(t.h/360,t.s,t.l);n=\\\"rgba(\\\"+s.r+\\\",\\\"+s.g+\\\",\\\"+s.b+\\\",\\\"+e+\\\")\\\"}}else\\\"rgb(\\\"===t.substr(0,4)&&(n=t.substr(0,t.length-1).replace(\\\"rgb\\\",\\\"rgba\\\")+\\\", \\\"+e+\\\")\\\");return r.rgbaCache[i]=n,n}static hslToRgb(t,e,s){var r,i,n;if(0==e)r=i=n=s;else{var o=function(t,e,s){return s<0&&(s+=1),s>1&&(s-=1),s<1/6?t+6*(e-t)*s:s<.5?e:s<2/3?t+(e-t)*(2/3-s)*6:t},l=s<.5?s*(1+e):s+e-s*e,a=2*s-l;r=o(a,l,t+1/3),i=o(a,l,t),n=o(a,l,t-1/3)}return{r:Math.round(255*r),g:Math.round(255*i),b:Math.round(255*n)}}static CssNamedColorToHex(t){return\\\"string\\\"==typeof t&&i[t.toUpperCase()]?i[t.toUpperCase()]:t}static getCssRuleSpecificityNumber(t){let e=0;t=t.replace(/ >/g,\\\">\\\").replace(/> /g,\\\">\\\");const s=[].concat.apply([],t.split(\\\" \\\").map(t=>t.split(\\\">\\\")));for(const t of s){e+=100;const s=t[0];if(\\\"#\\\"===s)e+=1e3;else if(\\\".\\\"===s){const s=t.split(\\\".\\\").length-1;e+=Math.min(900,100*s)}}return e}}e.default=r,r.rgbaCache={};const i={ALICEBLUE:\\\"#F0F8FF\\\",ANTIQUEWHITE:\\\"#FAEBD7\\\",AQUA:\\\"#00FFFF\\\",AQUAMARINE:\\\"#7FFFD4\\\",AZURE:\\\"#F0FFFF\\\",BEIGE:\\\"#F5F5DC\\\",BISQUE:\\\"#FFE4C4\\\",BLACK:\\\"#000000\\\",BLANCHEDALMOND:\\\"#FFEBCD\\\",BLUE:\\\"#0000FF\\\",BLUEVIOLET:\\\"#8A2BE2\\\",BROWN:\\\"#A52A2A\\\",BURLYWOOD:\\\"#DEB887\\\",CADETBLUE:\\\"#5F9EA0\\\",CHARTREUSE:\\\"#7FFF00\\\",CHOCOLATE:\\\"#D2691E\\\",CORAL:\\\"#FF7F50\\\",CORNFLOWERBLUE:\\\"#6495ED\\\",CORNSILK:\\\"#FFF8DC\\\",CRIMSON:\\\"#DC143C\\\",CYAN:\\\"#00FFFF\\\",DARKBLUE:\\\"#00008B\\\",DARKCYAN:\\\"#008B8B\\\",DARKGOLDENROD:\\\"#B8860B\\\",DARKGRAY:\\\"#A9A9A9\\\",DARKGREY:\\\"#A9A9A9\\\",DARKGREEN:\\\"#006400\\\",DARKKHAKI:\\\"#BDB76B\\\",DARKMAGENTA:\\\"#8B008B\\\",DARKOLIVEGREEN:\\\"#556B2F\\\",DARKORANGE:\\\"#FF8C00\\\",DARKORCHID:\\\"#9932CC\\\",DARKRED:\\\"#8B0000\\\",DARKSALMON:\\\"#E9967A\\\",DARKSEAGREEN:\\\"#8FBC8F\\\",DARKSLATEBLUE:\\\"#483D8B\\\",DARKSLATEGRAY:\\\"#2F4F4F\\\",DARKSLATEGREY:\\\"#2F4F4F\\\",DARKTURQUOISE:\\\"#00CED1\\\",DARKVIOLET:\\\"#9400D3\\\",DEEPPINK:\\\"#FF1493\\\",DEEPSKYBLUE:\\\"#00BFFF\\\",DIMGRAY:\\\"#696969\\\",DIMGREY:\\\"#696969\\\",DODGERBLUE:\\\"#1E90FF\\\",FIREBRICK:\\\"#B22222\\\",FLORALWHITE:\\\"#FFFAF0\\\",FORESTGREEN:\\\"#228B22\\\",FUCHSIA:\\\"#FF00FF\\\",GAINSBORO:\\\"#DCDCDC\\\",GHOSTWHITE:\\\"#F8F8FF\\\",GOLD:\\\"#FFD700\\\",GOLDENROD:\\\"#DAA520\\\",GRAY:\\\"#808080\\\",GREY:\\\"#808080\\\",GREEN:\\\"#008000\\\",GREENYELLOW:\\\"#ADFF2F\\\",HONEYDEW:\\\"#F0FFF0\\\",HOTPINK:\\\"#FF69B4\\\",INDIANRED:\\\"#CD5C5C\\\",INDIGO:\\\"#4B0082\\\",IVORY:\\\"#FFFFF0\\\",KHAKI:\\\"#F0E68C\\\",LAVENDER:\\\"#E6E6FA\\\",LAVENDERBLUSH:\\\"#FFF0F5\\\",LAWNGREEN:\\\"#7CFC00\\\",LEMONCHIFFON:\\\"#FFFACD\\\",LIGHTBLUE:\\\"#ADD8E6\\\",LIGHTCORAL:\\\"#F08080\\\",LIGHTCYAN:\\\"#E0FFFF\\\",LIGHTGOLDENRODYELLOW:\\\"#FAFAD2\\\",LIGHTGRAY:\\\"#D3D3D3\\\",LIGHTGREY:\\\"#D3D3D3\\\",LIGHTGREEN:\\\"#90EE90\\\",LIGHTPINK:\\\"#FFB6C1\\\",LIGHTSALMON:\\\"#FFA07A\\\",LIGHTSEAGREEN:\\\"#20B2AA\\\",LIGHTSKYBLUE:\\\"#87CEFA\\\",LIGHTSLATEGRAY:\\\"#778899\\\",LIGHTSLATEGREY:\\\"#778899\\\",LIGHTSTEELBLUE:\\\"#B0C4DE\\\",LIGHTYELLOW:\\\"#FFFFE0\\\",LIME:\\\"#00FF00\\\",LIMEGREEN:\\\"#32CD32\\\",LINEN:\\\"#FAF0E6\\\",MAGENTA:\\\"#FF00FF\\\",MAROON:\\\"#800000\\\",MEDIUMAQUAMARINE:\\\"#66CDAA\\\",MEDIUMBLUE:\\\"#0000CD\\\",MEDIUMORCHID:\\\"#BA55D3\\\",MEDIUMPURPLE:\\\"#9370DB\\\",MEDIUMSEAGREEN:\\\"#3CB371\\\",MEDIUMSLATEBLUE:\\\"#7B68EE\\\",MEDIUMSPRINGGREEN:\\\"#00FA9A\\\",MEDIUMTURQUOISE:\\\"#48D1CC\\\",MEDIUMVIOLETRED:\\\"#C71585\\\",MIDNIGHTBLUE:\\\"#191970\\\",MINTCREAM:\\\"#F5FFFA\\\",MISTYROSE:\\\"#FFE4E1\\\",MOCCASIN:\\\"#FFE4B5\\\",NAVAJOWHITE:\\\"#FFDEAD\\\",NAVY:\\\"#000080\\\",OLDLACE:\\\"#FDF5E6\\\",OLIVE:\\\"#808000\\\",OLIVEDRAB:\\\"#6B8E23\\\",ORANGE:\\\"#FFA500\\\",ORANGERED:\\\"#FF4500\\\",ORCHID:\\\"#DA70D6\\\",PALEGOLDENROD:\\\"#EEE8AA\\\",PALEGREEN:\\\"#98FB98\\\",PALETURQUOISE:\\\"#AFEEEE\\\",PALEVIOLETRED:\\\"#DB7093\\\",PAPAYAWHIP:\\\"#FFEFD5\\\",PEACHPUFF:\\\"#FFDAB9\\\",PERU:\\\"#CD853F\\\",PINK:\\\"#FFC0CB\\\",PLUM:\\\"#DDA0DD\\\",POWDERBLUE:\\\"#B0E0E6\\\",PURPLE:\\\"#800080\\\",REBECCAPURPLE:\\\"#663399\\\",RED:\\\"#FF0000\\\",ROSYBROWN:\\\"#BC8F8F\\\",ROYALBLUE:\\\"#4169E1\\\",SADDLEBROWN:\\\"#8B4513\\\",SALMON:\\\"#FA8072\\\",SANDYBROWN:\\\"#F4A460\\\",SEAGREEN:\\\"#2E8B57\\\",SEASHELL:\\\"#FFF5EE\\\",SIENNA:\\\"#A0522D\\\",SILVER:\\\"#C0C0C0\\\",SKYBLUE:\\\"#87CEEB\\\",SLATEBLUE:\\\"#6A5ACD\\\",SLATEGRAY:\\\"#708090\\\",SLATEGREY:\\\"#708090\\\",SNOW:\\\"#FFFAFA\\\",SPRINGGREEN:\\\"#00FF7F\\\",STEELBLUE:\\\"#4682B4\\\",TAN:\\\"#D2B48C\\\",TEAL:\\\"#008080\\\",THISTLE:\\\"#D8BFD8\\\",TOMATO:\\\"#FF6347\\\",TURQUOISE:\\\"#40E0D0\\\",VIOLET:\\\"#EE82EE\\\",WHEAT:\\\"#F5DEB3\\\",WHITE:\\\"#FFFFFF\\\",WHITESMOKE:\\\"#F5F5F5\\\",YELLOW:\\\"#FFFF00\\\",YELLOWGREEN:\\\"#9ACD32\\\"}}]);\\n//# sourceMappingURL=8eb865e68faf6e903e99.worker.js.map\", __webpack_public_path__ + \"8eb865e68faf6e903e99.worker.js\");\n};","'use strict';\n\n// http://stackoverflow.com/questions/10343913/how-to-create-a-web-worker-from-a-string\n\nvar URL = window.URL || window.webkitURL;\n\nmodule.exports = function (content, url) {\n  try {\n    try {\n      var blob;\n\n      try {\n        // BlobBuilder = Deprecated, but widely implemented\n        var BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;\n\n        blob = new BlobBuilder();\n\n        blob.append(content);\n\n        blob = blob.getBlob();\n      } catch (e) {\n        // The proposed API\n        blob = new Blob([content]);\n      }\n\n      return new Worker(URL.createObjectURL(blob));\n    } catch (e) {\n      return new Worker('data:application/javascript,' + encodeURIComponent(content));\n    }\n  } catch (e) {\n    if (!url) {\n      throw Error('Inline worker is not supported');\n    }\n\n    return new Worker(url);\n  }\n};"],"sourceRoot":""}